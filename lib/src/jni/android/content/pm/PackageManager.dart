// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../java/lang/CharSequence.dart' as charsequence_;

import '../Intent.dart' as intent_;

import '../IntentFilter.dart' as intentfilter_;

/// from: `android.content.pm.PackageManager$ApplicationInfoFlags`
class PackageManager_ApplicationInfoFlags extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_ApplicationInfoFlags> $type;

  @_$jni.internal
  PackageManager_ApplicationInfoFlags.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$ApplicationInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ApplicationInfoFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ApplicationInfoFlags;',
  );

  static final _of = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public android.content.pm.PackageManager$ApplicationInfoFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ApplicationInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as _$jni.JMethodIDPtr, j)
        .object(const $PackageManager_ApplicationInfoFlags$Type());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getValue()`
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as _$jni.JMethodIDPtr)
        .long;
  }
}

final class $PackageManager_ApplicationInfoFlags$Type
    extends _$jni.JObjType<PackageManager_ApplicationInfoFlags> {
  @_$jni.internal
  const $PackageManager_ApplicationInfoFlags$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ApplicationInfoFlags;';

  @_$jni.internal
  @_$core.override
  PackageManager_ApplicationInfoFlags fromReference(
          _$jni.JReference reference) =>
      PackageManager_ApplicationInfoFlags.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_ApplicationInfoFlags$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ApplicationInfoFlags$Type) &&
        other is $PackageManager_ApplicationInfoFlags$Type;
  }
}

/// from: `android.content.pm.PackageManager$ComponentEnabledSetting`
class PackageManager_ComponentEnabledSetting extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_ComponentEnabledSetting> $type;

  @_$jni.internal
  PackageManager_ComponentEnabledSetting.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$ComponentEnabledSetting');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentEnabledSetting$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  static final _id_new$ = _class.constructorId(
    r'(Landroid/content/ComponentName;II)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public void <init>(android.content.ComponentName componentName, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_ComponentEnabledSetting(
    _$jni.JObject componentName,
    int i,
    int i1,
  ) {
    return PackageManager_ComponentEnabledSetting.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r'getComponentName',
    r'()Landroid/content/ComponentName;',
  );

  static final _getComponentName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.content.ComponentName getComponentName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getEnabledState = _class.instanceMethodId(
    r'getEnabledState',
    r'()I',
  );

  static final _getEnabledState = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getEnabledState()`
  int getEnabledState() {
    return _getEnabledState(
            reference.pointer, _id_getEnabledState as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getEnabledFlags = _class.instanceMethodId(
    r'getEnabledFlags',
    r'()I',
  );

  static final _getEnabledFlags = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getEnabledFlags()`
  int getEnabledFlags() {
    return _getEnabledFlags(
            reference.pointer, _id_getEnabledFlags as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $PackageManager_ComponentEnabledSetting$Type
    extends _$jni.JObjType<PackageManager_ComponentEnabledSetting> {
  @_$jni.internal
  const $PackageManager_ComponentEnabledSetting$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ComponentEnabledSetting;';

  @_$jni.internal
  @_$core.override
  PackageManager_ComponentEnabledSetting fromReference(
          _$jni.JReference reference) =>
      PackageManager_ComponentEnabledSetting.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_ComponentEnabledSetting$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PackageManager_ComponentEnabledSetting$Type) &&
        other is $PackageManager_ComponentEnabledSetting$Type;
  }
}

/// from: `android.content.pm.PackageManager$ComponentInfoFlags`
class PackageManager_ComponentInfoFlags extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_ComponentInfoFlags> $type;

  @_$jni.internal
  PackageManager_ComponentInfoFlags.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$ComponentInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ComponentInfoFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ComponentInfoFlags;',
  );

  static final _of = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public android.content.pm.PackageManager$ComponentInfoFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ComponentInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as _$jni.JMethodIDPtr, j)
        .object(const $PackageManager_ComponentInfoFlags$Type());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getValue()`
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as _$jni.JMethodIDPtr)
        .long;
  }
}

final class $PackageManager_ComponentInfoFlags$Type
    extends _$jni.JObjType<PackageManager_ComponentInfoFlags> {
  @_$jni.internal
  const $PackageManager_ComponentInfoFlags$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ComponentInfoFlags;';

  @_$jni.internal
  @_$core.override
  PackageManager_ComponentInfoFlags fromReference(_$jni.JReference reference) =>
      PackageManager_ComponentInfoFlags.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_ComponentInfoFlags$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ComponentInfoFlags$Type) &&
        other is $PackageManager_ComponentInfoFlags$Type;
  }
}

/// from: `android.content.pm.PackageManager$NameNotFoundException`
class PackageManager_NameNotFoundException extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_NameNotFoundException> $type;

  @_$jni.internal
  PackageManager_NameNotFoundException.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$NameNotFoundException');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_NameNotFoundException$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException() {
    return PackageManager_NameNotFoundException.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory PackageManager_NameNotFoundException.new$1(
    _$jni.JString string,
  ) {
    return PackageManager_NameNotFoundException.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .reference);
  }
}

final class $PackageManager_NameNotFoundException$Type
    extends _$jni.JObjType<PackageManager_NameNotFoundException> {
  @_$jni.internal
  const $PackageManager_NameNotFoundException$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$NameNotFoundException;';

  @_$jni.internal
  @_$core.override
  PackageManager_NameNotFoundException fromReference(
          _$jni.JReference reference) =>
      PackageManager_NameNotFoundException.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_NameNotFoundException$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_NameNotFoundException$Type) &&
        other is $PackageManager_NameNotFoundException$Type;
  }
}

/// from: `android.content.pm.PackageManager$OnChecksumsReadyListener`
class PackageManager_OnChecksumsReadyListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_OnChecksumsReadyListener> $type;

  @_$jni.internal
  PackageManager_OnChecksumsReadyListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$OnChecksumsReadyListener');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_OnChecksumsReadyListener$Type();
  static final _id_onChecksumsReady = _class.instanceMethodId(
    r'onChecksumsReady',
    r'(Ljava/util/List;)V',
  );

  static final _onChecksumsReady = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onChecksumsReady(java.util.List list)`
  void onChecksumsReady(
    _$jni.JList<_$jni.JObject> list,
  ) {
    _onChecksumsReady(reference.pointer,
            _id_onChecksumsReady as _$jni.JMethodIDPtr, list.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $PackageManager_OnChecksumsReadyListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onChecksumsReady(Ljava/util/List;)V') {
        _$impls[$p]!.onChecksumsReady(
          $a[0].as(const _$jni.JListType(_$jni.JObjectType()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $PackageManager_OnChecksumsReadyListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.content.pm.PackageManager$OnChecksumsReadyListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onChecksumsReady$async)
          r'onChecksumsReady(Ljava/util/List;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PackageManager_OnChecksumsReadyListener.implement(
    $PackageManager_OnChecksumsReadyListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return PackageManager_OnChecksumsReadyListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PackageManager_OnChecksumsReadyListener {
  factory $PackageManager_OnChecksumsReadyListener({
    required void Function(_$jni.JList<_$jni.JObject> list) onChecksumsReady,
    bool onChecksumsReady$async,
  }) = _$PackageManager_OnChecksumsReadyListener;

  void onChecksumsReady(_$jni.JList<_$jni.JObject> list);
  bool get onChecksumsReady$async => false;
}

final class _$PackageManager_OnChecksumsReadyListener
    with $PackageManager_OnChecksumsReadyListener {
  _$PackageManager_OnChecksumsReadyListener({
    required void Function(_$jni.JList<_$jni.JObject> list) onChecksumsReady,
    this.onChecksumsReady$async = false,
  }) : _onChecksumsReady = onChecksumsReady;

  final void Function(_$jni.JList<_$jni.JObject> list) _onChecksumsReady;
  final bool onChecksumsReady$async;

  void onChecksumsReady(_$jni.JList<_$jni.JObject> list) {
    return _onChecksumsReady(list);
  }
}

final class $PackageManager_OnChecksumsReadyListener$Type
    extends _$jni.JObjType<PackageManager_OnChecksumsReadyListener> {
  @_$jni.internal
  const $PackageManager_OnChecksumsReadyListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$OnChecksumsReadyListener;';

  @_$jni.internal
  @_$core.override
  PackageManager_OnChecksumsReadyListener fromReference(
          _$jni.JReference reference) =>
      PackageManager_OnChecksumsReadyListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_OnChecksumsReadyListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PackageManager_OnChecksumsReadyListener$Type) &&
        other is $PackageManager_OnChecksumsReadyListener$Type;
  }
}

/// from: `android.content.pm.PackageManager$PackageInfoFlags`
class PackageManager_PackageInfoFlags extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_PackageInfoFlags> $type;

  @_$jni.internal
  PackageManager_PackageInfoFlags.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$PackageInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_PackageInfoFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$PackageInfoFlags;',
  );

  static final _of = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public android.content.pm.PackageManager$PackageInfoFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_PackageInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as _$jni.JMethodIDPtr, j)
        .object(const $PackageManager_PackageInfoFlags$Type());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getValue()`
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as _$jni.JMethodIDPtr)
        .long;
  }
}

final class $PackageManager_PackageInfoFlags$Type
    extends _$jni.JObjType<PackageManager_PackageInfoFlags> {
  @_$jni.internal
  const $PackageManager_PackageInfoFlags$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$PackageInfoFlags;';

  @_$jni.internal
  @_$core.override
  PackageManager_PackageInfoFlags fromReference(_$jni.JReference reference) =>
      PackageManager_PackageInfoFlags.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_PackageInfoFlags$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_PackageInfoFlags$Type) &&
        other is $PackageManager_PackageInfoFlags$Type;
  }
}

/// from: `android.content.pm.PackageManager$Property`
class PackageManager_Property extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_Property> $type;

  @_$jni.internal
  PackageManager_Property.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/content/pm/PackageManager$Property');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_Property$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  static final _id_getName = _class.instanceMethodId(
    r'getName',
    r'()Ljava/lang/String;',
  );

  static final _getName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getName() {
    return _getName(reference.pointer, _id_getName as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r'getPackageName',
    r'()Ljava/lang/String;',
  );

  static final _getPackageName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getPackageName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getClassName = _class.instanceMethodId(
    r'getClassName',
    r'()Ljava/lang/String;',
  );

  static final _getClassName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getClassName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getClassName() {
    return _getClassName(
            reference.pointer, _id_getClassName as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getBoolean = _class.instanceMethodId(
    r'getBoolean',
    r'()Z',
  );

  static final _getBoolean = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean getBoolean()`
  bool getBoolean() {
    return _getBoolean(reference.pointer, _id_getBoolean as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isBoolean = _class.instanceMethodId(
    r'isBoolean',
    r'()Z',
  );

  static final _isBoolean = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isBoolean()`
  bool isBoolean() {
    return _isBoolean(reference.pointer, _id_isBoolean as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getFloat = _class.instanceMethodId(
    r'getFloat',
    r'()F',
  );

  static final _getFloat = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallFloatMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public float getFloat()`
  double getFloat() {
    return _getFloat(reference.pointer, _id_getFloat as _$jni.JMethodIDPtr)
        .float;
  }

  static final _id_isFloat = _class.instanceMethodId(
    r'isFloat',
    r'()Z',
  );

  static final _isFloat = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isFloat()`
  bool isFloat() {
    return _isFloat(reference.pointer, _id_isFloat as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getInteger = _class.instanceMethodId(
    r'getInteger',
    r'()I',
  );

  static final _getInteger = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getInteger()`
  int getInteger() {
    return _getInteger(reference.pointer, _id_getInteger as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isInteger = _class.instanceMethodId(
    r'isInteger',
    r'()Z',
  );

  static final _isInteger = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isInteger()`
  bool isInteger() {
    return _isInteger(reference.pointer, _id_isInteger as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getResourceId = _class.instanceMethodId(
    r'getResourceId',
    r'()I',
  );

  static final _getResourceId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getResourceId()`
  int getResourceId() {
    return _getResourceId(
            reference.pointer, _id_getResourceId as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isResourceId = _class.instanceMethodId(
    r'isResourceId',
    r'()Z',
  );

  static final _isResourceId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isResourceId()`
  bool isResourceId() {
    return _isResourceId(
            reference.pointer, _id_isResourceId as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getString = _class.instanceMethodId(
    r'getString',
    r'()Ljava/lang/String;',
  );

  static final _getString = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getString() {
    return _getString(reference.pointer, _id_getString as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_isString = _class.instanceMethodId(
    r'isString',
    r'()Z',
  );

  static final _isString = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isString()`
  bool isString() {
    return _isString(reference.pointer, _id_isString as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $PackageManager_Property$Type
    extends _$jni.JObjType<PackageManager_Property> {
  @_$jni.internal
  const $PackageManager_Property$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/content/pm/PackageManager$Property;';

  @_$jni.internal
  @_$core.override
  PackageManager_Property fromReference(_$jni.JReference reference) =>
      PackageManager_Property.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_Property$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_Property$Type) &&
        other is $PackageManager_Property$Type;
  }
}

/// from: `android.content.pm.PackageManager$ResolveInfoFlags`
class PackageManager_ResolveInfoFlags extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager_ResolveInfoFlags> $type;

  @_$jni.internal
  PackageManager_ResolveInfoFlags.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/content/pm/PackageManager$ResolveInfoFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager_ResolveInfoFlags$Type();
  static final _id_of = _class.staticMethodId(
    r'of',
    r'(J)Landroid/content/pm/PackageManager$ResolveInfoFlags;',
  );

  static final _of = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int64,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public android.content.pm.PackageManager$ResolveInfoFlags of(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static PackageManager_ResolveInfoFlags of(
    int j,
  ) {
    return _of(_class.reference.pointer, _id_of as _$jni.JMethodIDPtr, j)
        .object(const $PackageManager_ResolveInfoFlags$Type());
  }

  static final _id_getValue = _class.instanceMethodId(
    r'getValue',
    r'()J',
  );

  static final _getValue = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getValue()`
  int getValue() {
    return _getValue(reference.pointer, _id_getValue as _$jni.JMethodIDPtr)
        .long;
  }
}

final class $PackageManager_ResolveInfoFlags$Type
    extends _$jni.JObjType<PackageManager_ResolveInfoFlags> {
  @_$jni.internal
  const $PackageManager_ResolveInfoFlags$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/content/pm/PackageManager$ResolveInfoFlags;';

  @_$jni.internal
  @_$core.override
  PackageManager_ResolveInfoFlags fromReference(_$jni.JReference reference) =>
      PackageManager_ResolveInfoFlags.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager_ResolveInfoFlags$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager_ResolveInfoFlags$Type) &&
        other is $PackageManager_ResolveInfoFlags$Type;
  }
}

/// from: `android.content.pm.PackageManager`
class PackageManager extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<PackageManager> $type;

  @_$jni.internal
  PackageManager.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/content/pm/PackageManager');

  /// The type which includes information such as the signature of this class.
  static const type = $PackageManager$Type();

  /// from: `static public final int CERT_INPUT_RAW_X509`
  static const CERT_INPUT_RAW_X509 = 0;

  /// from: `static public final int CERT_INPUT_SHA256`
  static const CERT_INPUT_SHA256 = 1;

  /// from: `static public final int COMPONENT_ENABLED_STATE_DEFAULT`
  static const COMPONENT_ENABLED_STATE_DEFAULT = 0;

  /// from: `static public final int COMPONENT_ENABLED_STATE_DISABLED`
  static const COMPONENT_ENABLED_STATE_DISABLED = 2;

  /// from: `static public final int COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED`
  static const COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED = 4;

  /// from: `static public final int COMPONENT_ENABLED_STATE_DISABLED_USER`
  static const COMPONENT_ENABLED_STATE_DISABLED_USER = 3;

  /// from: `static public final int COMPONENT_ENABLED_STATE_ENABLED`
  static const COMPONENT_ENABLED_STATE_ENABLED = 1;

  /// from: `static public final int DONT_KILL_APP`
  static const DONT_KILL_APP = 1;
  static final _id_EXTRA_VERIFICATION_ID = _class.staticFieldId(
    r'EXTRA_VERIFICATION_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_VERIFICATION_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_VERIFICATION_ID =>
      _id_EXTRA_VERIFICATION_ID.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_VERIFICATION_RESULT = _class.staticFieldId(
    r'EXTRA_VERIFICATION_RESULT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_VERIFICATION_RESULT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_VERIFICATION_RESULT =>
      _id_EXTRA_VERIFICATION_RESULT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS =
      _class.staticFieldId(
    r'FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS =>
      _id_FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_APP_WIDGETS = _class.staticFieldId(
    r'FEATURE_APP_WIDGETS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_APP_WIDGETS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_APP_WIDGETS =>
      _id_FEATURE_APP_WIDGETS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_AUDIO_LOW_LATENCY = _class.staticFieldId(
    r'FEATURE_AUDIO_LOW_LATENCY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_AUDIO_LOW_LATENCY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_AUDIO_LOW_LATENCY =>
      _id_FEATURE_AUDIO_LOW_LATENCY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_AUDIO_OUTPUT = _class.staticFieldId(
    r'FEATURE_AUDIO_OUTPUT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_AUDIO_OUTPUT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_AUDIO_OUTPUT =>
      _id_FEATURE_AUDIO_OUTPUT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_AUDIO_PRO = _class.staticFieldId(
    r'FEATURE_AUDIO_PRO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_AUDIO_PRO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_AUDIO_PRO =>
      _id_FEATURE_AUDIO_PRO.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_AUTOFILL = _class.staticFieldId(
    r'FEATURE_AUTOFILL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_AUTOFILL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_AUTOFILL =>
      _id_FEATURE_AUTOFILL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_AUTOMOTIVE = _class.staticFieldId(
    r'FEATURE_AUTOMOTIVE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_AUTOMOTIVE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_AUTOMOTIVE =>
      _id_FEATURE_AUTOMOTIVE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_BACKUP = _class.staticFieldId(
    r'FEATURE_BACKUP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_BACKUP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_BACKUP =>
      _id_FEATURE_BACKUP.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_BLUETOOTH = _class.staticFieldId(
    r'FEATURE_BLUETOOTH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_BLUETOOTH`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_BLUETOOTH =>
      _id_FEATURE_BLUETOOTH.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_BLUETOOTH_LE = _class.staticFieldId(
    r'FEATURE_BLUETOOTH_LE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_BLUETOOTH_LE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_BLUETOOTH_LE =>
      _id_FEATURE_BLUETOOTH_LE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA = _class.staticFieldId(
    r'FEATURE_CAMERA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA =>
      _id_FEATURE_CAMERA.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_ANY = _class.staticFieldId(
    r'FEATURE_CAMERA_ANY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_ANY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_ANY =>
      _id_FEATURE_CAMERA_ANY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_AR = _class.staticFieldId(
    r'FEATURE_CAMERA_AR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_AR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_AR =>
      _id_FEATURE_CAMERA_AR.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_AUTOFOCUS = _class.staticFieldId(
    r'FEATURE_CAMERA_AUTOFOCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_AUTOFOCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_AUTOFOCUS =>
      _id_FEATURE_CAMERA_AUTOFOCUS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING =
      _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING =>
      _id_FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR =
      _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR =>
      _id_FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_CAPABILITY_RAW = _class.staticFieldId(
    r'FEATURE_CAMERA_CAPABILITY_RAW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_CAPABILITY_RAW`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_CAPABILITY_RAW =>
      _id_FEATURE_CAMERA_CAPABILITY_RAW.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_CONCURRENT = _class.staticFieldId(
    r'FEATURE_CAMERA_CONCURRENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_CONCURRENT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_CONCURRENT =>
      _id_FEATURE_CAMERA_CONCURRENT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_EXTERNAL = _class.staticFieldId(
    r'FEATURE_CAMERA_EXTERNAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_EXTERNAL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_EXTERNAL =>
      _id_FEATURE_CAMERA_EXTERNAL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_FLASH = _class.staticFieldId(
    r'FEATURE_CAMERA_FLASH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_FLASH`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_FLASH =>
      _id_FEATURE_CAMERA_FLASH.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_FRONT = _class.staticFieldId(
    r'FEATURE_CAMERA_FRONT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_FRONT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_FRONT =>
      _id_FEATURE_CAMERA_FRONT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CAMERA_LEVEL_FULL = _class.staticFieldId(
    r'FEATURE_CAMERA_LEVEL_FULL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CAMERA_LEVEL_FULL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CAMERA_LEVEL_FULL =>
      _id_FEATURE_CAMERA_LEVEL_FULL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CANT_SAVE_STATE = _class.staticFieldId(
    r'FEATURE_CANT_SAVE_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CANT_SAVE_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CANT_SAVE_STATE =>
      _id_FEATURE_CANT_SAVE_STATE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_COMPANION_DEVICE_SETUP = _class.staticFieldId(
    r'FEATURE_COMPANION_DEVICE_SETUP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_COMPANION_DEVICE_SETUP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_COMPANION_DEVICE_SETUP =>
      _id_FEATURE_COMPANION_DEVICE_SETUP.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CONNECTION_SERVICE = _class.staticFieldId(
    r'FEATURE_CONNECTION_SERVICE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CONNECTION_SERVICE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CONNECTION_SERVICE =>
      _id_FEATURE_CONNECTION_SERVICE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CONSUMER_IR = _class.staticFieldId(
    r'FEATURE_CONSUMER_IR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CONSUMER_IR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CONSUMER_IR =>
      _id_FEATURE_CONSUMER_IR.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CONTROLS = _class.staticFieldId(
    r'FEATURE_CONTROLS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CONTROLS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CONTROLS =>
      _id_FEATURE_CONTROLS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_CREDENTIALS = _class.staticFieldId(
    r'FEATURE_CREDENTIALS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_CREDENTIALS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_CREDENTIALS =>
      _id_FEATURE_CREDENTIALS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_DEVICE_ADMIN = _class.staticFieldId(
    r'FEATURE_DEVICE_ADMIN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_DEVICE_ADMIN`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_DEVICE_ADMIN =>
      _id_FEATURE_DEVICE_ADMIN.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_DEVICE_LOCK = _class.staticFieldId(
    r'FEATURE_DEVICE_LOCK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_DEVICE_LOCK`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_DEVICE_LOCK =>
      _id_FEATURE_DEVICE_LOCK.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_EMBEDDED = _class.staticFieldId(
    r'FEATURE_EMBEDDED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_EMBEDDED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_EMBEDDED =>
      _id_FEATURE_EMBEDDED.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_ETHERNET = _class.staticFieldId(
    r'FEATURE_ETHERNET',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_ETHERNET`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_ETHERNET =>
      _id_FEATURE_ETHERNET.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_EXPANDED_PICTURE_IN_PICTURE = _class.staticFieldId(
    r'FEATURE_EXPANDED_PICTURE_IN_PICTURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_EXPANDED_PICTURE_IN_PICTURE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_EXPANDED_PICTURE_IN_PICTURE =>
      _id_FEATURE_EXPANDED_PICTURE_IN_PICTURE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_FACE = _class.staticFieldId(
    r'FEATURE_FACE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FACE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FACE =>
      _id_FEATURE_FACE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_FAKETOUCH = _class.staticFieldId(
    r'FEATURE_FAKETOUCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FAKETOUCH`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FAKETOUCH =>
      _id_FEATURE_FAKETOUCH.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT = _class.staticFieldId(
    r'FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT =>
      _id_FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND = _class.staticFieldId(
    r'FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND =>
      _id_FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_FINGERPRINT = _class.staticFieldId(
    r'FEATURE_FINGERPRINT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FINGERPRINT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FINGERPRINT =>
      _id_FEATURE_FINGERPRINT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_FREEFORM_WINDOW_MANAGEMENT = _class.staticFieldId(
    r'FEATURE_FREEFORM_WINDOW_MANAGEMENT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_FREEFORM_WINDOW_MANAGEMENT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_FREEFORM_WINDOW_MANAGEMENT =>
      _id_FEATURE_FREEFORM_WINDOW_MANAGEMENT.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_GAMEPAD = _class.staticFieldId(
    r'FEATURE_GAMEPAD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_GAMEPAD`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_GAMEPAD =>
      _id_FEATURE_GAMEPAD.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_HARDWARE_KEYSTORE = _class.staticFieldId(
    r'FEATURE_HARDWARE_KEYSTORE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_HARDWARE_KEYSTORE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_HARDWARE_KEYSTORE =>
      _id_FEATURE_HARDWARE_KEYSTORE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_HIFI_SENSORS = _class.staticFieldId(
    r'FEATURE_HIFI_SENSORS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_HIFI_SENSORS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_HIFI_SENSORS =>
      _id_FEATURE_HIFI_SENSORS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_HOME_SCREEN = _class.staticFieldId(
    r'FEATURE_HOME_SCREEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_HOME_SCREEN`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_HOME_SCREEN =>
      _id_FEATURE_HOME_SCREEN.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE = _class.staticFieldId(
    r'FEATURE_IDENTITY_CREDENTIAL_HARDWARE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_IDENTITY_CREDENTIAL_HARDWARE =>
      _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS =
      _class.staticFieldId(
    r'FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS =>
      _id_FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_INPUT_METHODS = _class.staticFieldId(
    r'FEATURE_INPUT_METHODS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_INPUT_METHODS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_INPUT_METHODS =>
      _id_FEATURE_INPUT_METHODS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_IPSEC_TUNNELS = _class.staticFieldId(
    r'FEATURE_IPSEC_TUNNELS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_IPSEC_TUNNELS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_IPSEC_TUNNELS =>
      _id_FEATURE_IPSEC_TUNNELS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_IPSEC_TUNNEL_MIGRATION = _class.staticFieldId(
    r'FEATURE_IPSEC_TUNNEL_MIGRATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_IPSEC_TUNNEL_MIGRATION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_IPSEC_TUNNEL_MIGRATION =>
      _id_FEATURE_IPSEC_TUNNEL_MIGRATION.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_IRIS = _class.staticFieldId(
    r'FEATURE_IRIS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_IRIS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_IRIS =>
      _id_FEATURE_IRIS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_KEYSTORE_APP_ATTEST_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_APP_ATTEST_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_KEYSTORE_APP_ATTEST_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_KEYSTORE_APP_ATTEST_KEY =>
      _id_FEATURE_KEYSTORE_APP_ATTEST_KEY.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_KEYSTORE_LIMITED_USE_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_LIMITED_USE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_KEYSTORE_LIMITED_USE_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_KEYSTORE_LIMITED_USE_KEY =>
      _id_FEATURE_KEYSTORE_LIMITED_USE_KEY.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_KEYSTORE_SINGLE_USE_KEY = _class.staticFieldId(
    r'FEATURE_KEYSTORE_SINGLE_USE_KEY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_KEYSTORE_SINGLE_USE_KEY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_KEYSTORE_SINGLE_USE_KEY =>
      _id_FEATURE_KEYSTORE_SINGLE_USE_KEY.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_LEANBACK = _class.staticFieldId(
    r'FEATURE_LEANBACK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LEANBACK`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LEANBACK =>
      _id_FEATURE_LEANBACK.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LEANBACK_ONLY = _class.staticFieldId(
    r'FEATURE_LEANBACK_ONLY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LEANBACK_ONLY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LEANBACK_ONLY =>
      _id_FEATURE_LEANBACK_ONLY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LIVE_TV = _class.staticFieldId(
    r'FEATURE_LIVE_TV',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LIVE_TV`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LIVE_TV =>
      _id_FEATURE_LIVE_TV.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LIVE_WALLPAPER = _class.staticFieldId(
    r'FEATURE_LIVE_WALLPAPER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LIVE_WALLPAPER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LIVE_WALLPAPER =>
      _id_FEATURE_LIVE_WALLPAPER.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LOCATION = _class.staticFieldId(
    r'FEATURE_LOCATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LOCATION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LOCATION =>
      _id_FEATURE_LOCATION.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LOCATION_GPS = _class.staticFieldId(
    r'FEATURE_LOCATION_GPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LOCATION_GPS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LOCATION_GPS =>
      _id_FEATURE_LOCATION_GPS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_LOCATION_NETWORK = _class.staticFieldId(
    r'FEATURE_LOCATION_NETWORK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_LOCATION_NETWORK`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_LOCATION_NETWORK =>
      _id_FEATURE_LOCATION_NETWORK.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_MANAGED_USERS = _class.staticFieldId(
    r'FEATURE_MANAGED_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_MANAGED_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_MANAGED_USERS =>
      _id_FEATURE_MANAGED_USERS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_MICROPHONE = _class.staticFieldId(
    r'FEATURE_MICROPHONE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_MICROPHONE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_MICROPHONE =>
      _id_FEATURE_MICROPHONE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_MIDI = _class.staticFieldId(
    r'FEATURE_MIDI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_MIDI`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_MIDI =>
      _id_FEATURE_MIDI.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_NFC = _class.staticFieldId(
    r'FEATURE_NFC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC =>
      _id_FEATURE_NFC.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_NFC_BEAM = _class.staticFieldId(
    r'FEATURE_NFC_BEAM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC_BEAM`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC_BEAM =>
      _id_FEATURE_NFC_BEAM.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_NFC_HOST_CARD_EMULATION = _class.staticFieldId(
    r'FEATURE_NFC_HOST_CARD_EMULATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC_HOST_CARD_EMULATION =>
      _id_FEATURE_NFC_HOST_CARD_EMULATION.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_NFC_HOST_CARD_EMULATION_NFCF = _class.staticFieldId(
    r'FEATURE_NFC_HOST_CARD_EMULATION_NFCF',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC_HOST_CARD_EMULATION_NFCF`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC_HOST_CARD_EMULATION_NFCF =>
      _id_FEATURE_NFC_HOST_CARD_EMULATION_NFCF.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE =
      _class.staticFieldId(
    r'FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE =>
      _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC =
      _class.staticFieldId(
    r'FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC =>
      _id_FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_OPENGLES_DEQP_LEVEL = _class.staticFieldId(
    r'FEATURE_OPENGLES_DEQP_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_OPENGLES_DEQP_LEVEL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_OPENGLES_DEQP_LEVEL =>
      _id_FEATURE_OPENGLES_DEQP_LEVEL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_OPENGLES_EXTENSION_PACK = _class.staticFieldId(
    r'FEATURE_OPENGLES_EXTENSION_PACK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_OPENGLES_EXTENSION_PACK`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_OPENGLES_EXTENSION_PACK =>
      _id_FEATURE_OPENGLES_EXTENSION_PACK.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_PC = _class.staticFieldId(
    r'FEATURE_PC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_PC`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_PC =>
      _id_FEATURE_PC.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_PICTURE_IN_PICTURE = _class.staticFieldId(
    r'FEATURE_PICTURE_IN_PICTURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_PICTURE_IN_PICTURE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_PICTURE_IN_PICTURE =>
      _id_FEATURE_PICTURE_IN_PICTURE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_PRINTING = _class.staticFieldId(
    r'FEATURE_PRINTING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_PRINTING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_PRINTING =>
      _id_FEATURE_PRINTING.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_RAM_LOW = _class.staticFieldId(
    r'FEATURE_RAM_LOW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_RAM_LOW`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_RAM_LOW =>
      _id_FEATURE_RAM_LOW.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_RAM_NORMAL = _class.staticFieldId(
    r'FEATURE_RAM_NORMAL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_RAM_NORMAL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_RAM_NORMAL =>
      _id_FEATURE_RAM_NORMAL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SCREEN_LANDSCAPE = _class.staticFieldId(
    r'FEATURE_SCREEN_LANDSCAPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SCREEN_LANDSCAPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SCREEN_LANDSCAPE =>
      _id_FEATURE_SCREEN_LANDSCAPE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SCREEN_PORTRAIT = _class.staticFieldId(
    r'FEATURE_SCREEN_PORTRAIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SCREEN_PORTRAIT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SCREEN_PORTRAIT =>
      _id_FEATURE_SCREEN_PORTRAIT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SECURELY_REMOVES_USERS = _class.staticFieldId(
    r'FEATURE_SECURELY_REMOVES_USERS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SECURELY_REMOVES_USERS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SECURELY_REMOVES_USERS =>
      _id_FEATURE_SECURELY_REMOVES_USERS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SECURE_LOCK_SCREEN = _class.staticFieldId(
    r'FEATURE_SECURE_LOCK_SCREEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SECURE_LOCK_SCREEN`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SECURE_LOCK_SCREEN =>
      _id_FEATURE_SECURE_LOCK_SCREEN.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SECURITY_MODEL_COMPATIBLE = _class.staticFieldId(
    r'FEATURE_SECURITY_MODEL_COMPATIBLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SECURITY_MODEL_COMPATIBLE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SECURITY_MODEL_COMPATIBLE =>
      _id_FEATURE_SECURITY_MODEL_COMPATIBLE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER = _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_ACCELEROMETER =>
      _id_FEATURE_SENSOR_ACCELEROMETER.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES =
      _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES =>
      _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED =
      _class.staticFieldId(
    r'FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString
      get FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED =>
          _id_FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED.get(
              _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_AMBIENT_TEMPERATURE = _class.staticFieldId(
    r'FEATURE_SENSOR_AMBIENT_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_AMBIENT_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_AMBIENT_TEMPERATURE =>
      _id_FEATURE_SENSOR_AMBIENT_TEMPERATURE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_BAROMETER = _class.staticFieldId(
    r'FEATURE_SENSOR_BAROMETER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_BAROMETER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_BAROMETER =>
      _id_FEATURE_SENSOR_BAROMETER.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_COMPASS = _class.staticFieldId(
    r'FEATURE_SENSOR_COMPASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_COMPASS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_COMPASS =>
      _id_FEATURE_SENSOR_COMPASS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER = _class.staticFieldId(
    r'FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER =>
      _id_FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE = _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_GYROSCOPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_GYROSCOPE =>
      _id_FEATURE_SENSOR_GYROSCOPE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES = _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES =>
      _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED =
      _class.staticFieldId(
    r'FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED =>
      _id_FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_HEADING = _class.staticFieldId(
    r'FEATURE_SENSOR_HEADING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_HEADING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_HEADING =>
      _id_FEATURE_SENSOR_HEADING.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_HEART_RATE = _class.staticFieldId(
    r'FEATURE_SENSOR_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_HEART_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_HEART_RATE =>
      _id_FEATURE_SENSOR_HEART_RATE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_HEART_RATE_ECG = _class.staticFieldId(
    r'FEATURE_SENSOR_HEART_RATE_ECG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_HEART_RATE_ECG`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_HEART_RATE_ECG =>
      _id_FEATURE_SENSOR_HEART_RATE_ECG.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_HINGE_ANGLE = _class.staticFieldId(
    r'FEATURE_SENSOR_HINGE_ANGLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_HINGE_ANGLE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_HINGE_ANGLE =>
      _id_FEATURE_SENSOR_HINGE_ANGLE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_LIGHT = _class.staticFieldId(
    r'FEATURE_SENSOR_LIGHT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_LIGHT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_LIGHT =>
      _id_FEATURE_SENSOR_LIGHT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_PROXIMITY = _class.staticFieldId(
    r'FEATURE_SENSOR_PROXIMITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_PROXIMITY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_PROXIMITY =>
      _id_FEATURE_SENSOR_PROXIMITY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_RELATIVE_HUMIDITY = _class.staticFieldId(
    r'FEATURE_SENSOR_RELATIVE_HUMIDITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_RELATIVE_HUMIDITY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_RELATIVE_HUMIDITY =>
      _id_FEATURE_SENSOR_RELATIVE_HUMIDITY.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_STEP_COUNTER = _class.staticFieldId(
    r'FEATURE_SENSOR_STEP_COUNTER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_STEP_COUNTER`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_STEP_COUNTER =>
      _id_FEATURE_SENSOR_STEP_COUNTER.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SENSOR_STEP_DETECTOR = _class.staticFieldId(
    r'FEATURE_SENSOR_STEP_DETECTOR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SENSOR_STEP_DETECTOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SENSOR_STEP_DETECTOR =>
      _id_FEATURE_SENSOR_STEP_DETECTOR.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_ESE = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_ESE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SE_OMAPI_ESE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SE_OMAPI_ESE =>
      _id_FEATURE_SE_OMAPI_ESE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_SD = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_SD',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SE_OMAPI_SD`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SE_OMAPI_SD =>
      _id_FEATURE_SE_OMAPI_SD.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SE_OMAPI_UICC = _class.staticFieldId(
    r'FEATURE_SE_OMAPI_UICC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SE_OMAPI_UICC`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SE_OMAPI_UICC =>
      _id_FEATURE_SE_OMAPI_UICC.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SIP = _class.staticFieldId(
    r'FEATURE_SIP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SIP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SIP =>
      _id_FEATURE_SIP.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_SIP_VOIP = _class.staticFieldId(
    r'FEATURE_SIP_VOIP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_SIP_VOIP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_SIP_VOIP =>
      _id_FEATURE_SIP_VOIP.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_STRONGBOX_KEYSTORE = _class.staticFieldId(
    r'FEATURE_STRONGBOX_KEYSTORE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_STRONGBOX_KEYSTORE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_STRONGBOX_KEYSTORE =>
      _id_FEATURE_STRONGBOX_KEYSTORE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELECOM = _class.staticFieldId(
    r'FEATURE_TELECOM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELECOM`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELECOM =>
      _id_FEATURE_TELECOM.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY = _class.staticFieldId(
    r'FEATURE_TELEPHONY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY =>
      _id_FEATURE_TELEPHONY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_CALLING = _class.staticFieldId(
    r'FEATURE_TELEPHONY_CALLING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_CALLING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_CALLING =>
      _id_FEATURE_TELEPHONY_CALLING.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_CDMA = _class.staticFieldId(
    r'FEATURE_TELEPHONY_CDMA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_CDMA`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_CDMA =>
      _id_FEATURE_TELEPHONY_CDMA.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_DATA = _class.staticFieldId(
    r'FEATURE_TELEPHONY_DATA',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_DATA`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_DATA =>
      _id_FEATURE_TELEPHONY_DATA.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_EUICC = _class.staticFieldId(
    r'FEATURE_TELEPHONY_EUICC',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_EUICC`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_EUICC =>
      _id_FEATURE_TELEPHONY_EUICC.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_EUICC_MEP = _class.staticFieldId(
    r'FEATURE_TELEPHONY_EUICC_MEP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_EUICC_MEP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_EUICC_MEP =>
      _id_FEATURE_TELEPHONY_EUICC_MEP.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_GSM = _class.staticFieldId(
    r'FEATURE_TELEPHONY_GSM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_GSM`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_GSM =>
      _id_FEATURE_TELEPHONY_GSM.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_IMS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_IMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_IMS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_IMS =>
      _id_FEATURE_TELEPHONY_IMS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_MBMS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_MBMS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_MBMS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_MBMS =>
      _id_FEATURE_TELEPHONY_MBMS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_MESSAGING = _class.staticFieldId(
    r'FEATURE_TELEPHONY_MESSAGING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_MESSAGING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_MESSAGING =>
      _id_FEATURE_TELEPHONY_MESSAGING.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_RADIO_ACCESS = _class.staticFieldId(
    r'FEATURE_TELEPHONY_RADIO_ACCESS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_RADIO_ACCESS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_RADIO_ACCESS =>
      _id_FEATURE_TELEPHONY_RADIO_ACCESS.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEPHONY_SUBSCRIPTION = _class.staticFieldId(
    r'FEATURE_TELEPHONY_SUBSCRIPTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEPHONY_SUBSCRIPTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEPHONY_SUBSCRIPTION =>
      _id_FEATURE_TELEPHONY_SUBSCRIPTION.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TELEVISION = _class.staticFieldId(
    r'FEATURE_TELEVISION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TELEVISION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TELEVISION =>
      _id_FEATURE_TELEVISION.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN = _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TOUCHSCREEN`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TOUCHSCREEN =>
      _id_FEATURE_TOUCHSCREEN.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH = _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT =
      _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND =
      _class.staticFieldId(
    r'FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND =>
      _id_FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_USB_ACCESSORY = _class.staticFieldId(
    r'FEATURE_USB_ACCESSORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_USB_ACCESSORY`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_USB_ACCESSORY =>
      _id_FEATURE_USB_ACCESSORY.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_USB_HOST = _class.staticFieldId(
    r'FEATURE_USB_HOST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_USB_HOST`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_USB_HOST =>
      _id_FEATURE_USB_HOST.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_UWB = _class.staticFieldId(
    r'FEATURE_UWB',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_UWB`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_UWB =>
      _id_FEATURE_UWB.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VERIFIED_BOOT = _class.staticFieldId(
    r'FEATURE_VERIFIED_BOOT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VERIFIED_BOOT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VERIFIED_BOOT =>
      _id_FEATURE_VERIFIED_BOOT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VR_HEADTRACKING = _class.staticFieldId(
    r'FEATURE_VR_HEADTRACKING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VR_HEADTRACKING`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VR_HEADTRACKING =>
      _id_FEATURE_VR_HEADTRACKING.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VR_MODE = _class.staticFieldId(
    r'FEATURE_VR_MODE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VR_MODE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VR_MODE =>
      _id_FEATURE_VR_MODE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VR_MODE_HIGH_PERFORMANCE = _class.staticFieldId(
    r'FEATURE_VR_MODE_HIGH_PERFORMANCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VR_MODE_HIGH_PERFORMANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VR_MODE_HIGH_PERFORMANCE =>
      _id_FEATURE_VR_MODE_HIGH_PERFORMANCE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_VULKAN_DEQP_LEVEL = _class.staticFieldId(
    r'FEATURE_VULKAN_DEQP_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VULKAN_DEQP_LEVEL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VULKAN_DEQP_LEVEL =>
      _id_FEATURE_VULKAN_DEQP_LEVEL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_COMPUTE = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_COMPUTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VULKAN_HARDWARE_COMPUTE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VULKAN_HARDWARE_COMPUTE =>
      _id_FEATURE_VULKAN_HARDWARE_COMPUTE.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_LEVEL = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_LEVEL',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VULKAN_HARDWARE_LEVEL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VULKAN_HARDWARE_LEVEL =>
      _id_FEATURE_VULKAN_HARDWARE_LEVEL.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_VULKAN_HARDWARE_VERSION = _class.staticFieldId(
    r'FEATURE_VULKAN_HARDWARE_VERSION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_VULKAN_HARDWARE_VERSION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_VULKAN_HARDWARE_VERSION =>
      _id_FEATURE_VULKAN_HARDWARE_VERSION.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS =
      _class.staticFieldId(
    r'FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS =>
      _id_FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS.get(
          _class, const _$jni.JStringType());

  static final _id_FEATURE_WATCH = _class.staticFieldId(
    r'FEATURE_WATCH',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WATCH`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WATCH =>
      _id_FEATURE_WATCH.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WEBVIEW = _class.staticFieldId(
    r'FEATURE_WEBVIEW',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WEBVIEW`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WEBVIEW =>
      _id_FEATURE_WEBVIEW.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WIFI = _class.staticFieldId(
    r'FEATURE_WIFI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WIFI`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WIFI =>
      _id_FEATURE_WIFI.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WIFI_AWARE = _class.staticFieldId(
    r'FEATURE_WIFI_AWARE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WIFI_AWARE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WIFI_AWARE =>
      _id_FEATURE_WIFI_AWARE.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WIFI_DIRECT = _class.staticFieldId(
    r'FEATURE_WIFI_DIRECT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WIFI_DIRECT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WIFI_DIRECT =>
      _id_FEATURE_WIFI_DIRECT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WIFI_PASSPOINT = _class.staticFieldId(
    r'FEATURE_WIFI_PASSPOINT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WIFI_PASSPOINT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WIFI_PASSPOINT =>
      _id_FEATURE_WIFI_PASSPOINT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WIFI_RTT = _class.staticFieldId(
    r'FEATURE_WIFI_RTT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WIFI_RTT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WIFI_RTT =>
      _id_FEATURE_WIFI_RTT.get(_class, const _$jni.JStringType());

  static final _id_FEATURE_WINDOW_MAGNIFICATION = _class.staticFieldId(
    r'FEATURE_WINDOW_MAGNIFICATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FEATURE_WINDOW_MAGNIFICATION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FEATURE_WINDOW_MAGNIFICATION =>
      _id_FEATURE_WINDOW_MAGNIFICATION.get(_class, const _$jni.JStringType());

  /// from: `static public final int FLAG_PERMISSION_WHITELIST_INSTALLER`
  static const FLAG_PERMISSION_WHITELIST_INSTALLER = 2;

  /// from: `static public final int FLAG_PERMISSION_WHITELIST_SYSTEM`
  static const FLAG_PERMISSION_WHITELIST_SYSTEM = 1;

  /// from: `static public final int FLAG_PERMISSION_WHITELIST_UPGRADE`
  static const FLAG_PERMISSION_WHITELIST_UPGRADE = 4;

  /// from: `static public final int GET_ACTIVITIES`
  static const GET_ACTIVITIES = 1;

  /// from: `static public final int GET_ATTRIBUTIONS`
  static const GET_ATTRIBUTIONS = -2147483648;

  /// from: `static public final long GET_ATTRIBUTIONS_LONG`
  static const GET_ATTRIBUTIONS_LONG = 2147483648;

  /// from: `static public final int GET_CONFIGURATIONS`
  static const GET_CONFIGURATIONS = 16384;

  /// from: `static public final int GET_DISABLED_COMPONENTS`
  static const GET_DISABLED_COMPONENTS = 512;

  /// from: `static public final int GET_DISABLED_UNTIL_USED_COMPONENTS`
  static const GET_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: `static public final int GET_GIDS`
  static const GET_GIDS = 256;

  /// from: `static public final int GET_INSTRUMENTATION`
  static const GET_INSTRUMENTATION = 16;

  /// from: `static public final int GET_INTENT_FILTERS`
  static const GET_INTENT_FILTERS = 32;

  /// from: `static public final int GET_META_DATA`
  static const GET_META_DATA = 128;

  /// from: `static public final int GET_PERMISSIONS`
  static const GET_PERMISSIONS = 4096;

  /// from: `static public final int GET_PROVIDERS`
  static const GET_PROVIDERS = 8;

  /// from: `static public final int GET_RECEIVERS`
  static const GET_RECEIVERS = 2;

  /// from: `static public final int GET_RESOLVED_FILTER`
  static const GET_RESOLVED_FILTER = 64;

  /// from: `static public final int GET_SERVICES`
  static const GET_SERVICES = 4;

  /// from: `static public final int GET_SHARED_LIBRARY_FILES`
  static const GET_SHARED_LIBRARY_FILES = 1024;

  /// from: `static public final int GET_SIGNATURES`
  static const GET_SIGNATURES = 64;

  /// from: `static public final int GET_SIGNING_CERTIFICATES`
  static const GET_SIGNING_CERTIFICATES = 134217728;

  /// from: `static public final int GET_UNINSTALLED_PACKAGES`
  static const GET_UNINSTALLED_PACKAGES = 8192;

  /// from: `static public final int GET_URI_PERMISSION_PATTERNS`
  static const GET_URI_PERMISSION_PATTERNS = 2048;

  /// from: `static public final int INSTALL_REASON_DEVICE_RESTORE`
  static const INSTALL_REASON_DEVICE_RESTORE = 2;

  /// from: `static public final int INSTALL_REASON_DEVICE_SETUP`
  static const INSTALL_REASON_DEVICE_SETUP = 3;

  /// from: `static public final int INSTALL_REASON_POLICY`
  static const INSTALL_REASON_POLICY = 1;

  /// from: `static public final int INSTALL_REASON_UNKNOWN`
  static const INSTALL_REASON_UNKNOWN = 0;

  /// from: `static public final int INSTALL_REASON_USER`
  static const INSTALL_REASON_USER = 4;

  /// from: `static public final int INSTALL_SCENARIO_BULK`
  static const INSTALL_SCENARIO_BULK = 2;

  /// from: `static public final int INSTALL_SCENARIO_BULK_SECONDARY`
  static const INSTALL_SCENARIO_BULK_SECONDARY = 3;

  /// from: `static public final int INSTALL_SCENARIO_DEFAULT`
  static const INSTALL_SCENARIO_DEFAULT = 0;

  /// from: `static public final int INSTALL_SCENARIO_FAST`
  static const INSTALL_SCENARIO_FAST = 1;

  /// from: `static public final int MATCH_ALL`
  static const MATCH_ALL = 131072;

  /// from: `static public final int MATCH_APEX`
  static const MATCH_APEX = 1073741824;

  /// from: `static public final int MATCH_DEFAULT_ONLY`
  static const MATCH_DEFAULT_ONLY = 65536;

  /// from: `static public final int MATCH_DIRECT_BOOT_AUTO`
  static const MATCH_DIRECT_BOOT_AUTO = 268435456;

  /// from: `static public final int MATCH_DIRECT_BOOT_AWARE`
  static const MATCH_DIRECT_BOOT_AWARE = 524288;

  /// from: `static public final int MATCH_DIRECT_BOOT_UNAWARE`
  static const MATCH_DIRECT_BOOT_UNAWARE = 262144;

  /// from: `static public final int MATCH_DISABLED_COMPONENTS`
  static const MATCH_DISABLED_COMPONENTS = 512;

  /// from: `static public final int MATCH_DISABLED_UNTIL_USED_COMPONENTS`
  static const MATCH_DISABLED_UNTIL_USED_COMPONENTS = 32768;

  /// from: `static public final int MATCH_SYSTEM_ONLY`
  static const MATCH_SYSTEM_ONLY = 1048576;

  /// from: `static public final int MATCH_UNINSTALLED_PACKAGES`
  static const MATCH_UNINSTALLED_PACKAGES = 8192;

  /// from: `static public final long MAXIMUM_VERIFICATION_TIMEOUT`
  static const MAXIMUM_VERIFICATION_TIMEOUT = 3600000;

  /// from: `static public final int PERMISSION_DENIED`
  static const PERMISSION_DENIED = -1;

  /// from: `static public final int PERMISSION_GRANTED`
  static const PERMISSION_GRANTED = 0;
  static final _id_PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT =
      _class.staticFieldId(
    r'PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT =>
      _id_PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT.get(
          _class, const _$jni.JStringType());

  static final _id_PROPERTY_MEDIA_CAPABILITIES = _class.staticFieldId(
    r'PROPERTY_MEDIA_CAPABILITIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_MEDIA_CAPABILITIES`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get PROPERTY_MEDIA_CAPABILITIES =>
      _id_PROPERTY_MEDIA_CAPABILITIES.get(_class, const _$jni.JStringType());

  static final _id_PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES =
      _class.staticFieldId(
    r'PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES =>
      _id_PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES.get(
          _class, const _$jni.JStringType());

  static final _id_PROPERTY_SPECIAL_USE_FGS_SUBTYPE = _class.staticFieldId(
    r'PROPERTY_SPECIAL_USE_FGS_SUBTYPE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PROPERTY_SPECIAL_USE_FGS_SUBTYPE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get PROPERTY_SPECIAL_USE_FGS_SUBTYPE =>
      _id_PROPERTY_SPECIAL_USE_FGS_SUBTYPE.get(
          _class, const _$jni.JStringType());

  /// from: `static public final int SIGNATURE_FIRST_NOT_SIGNED`
  static const SIGNATURE_FIRST_NOT_SIGNED = -1;

  /// from: `static public final int SIGNATURE_MATCH`
  static const SIGNATURE_MATCH = 0;

  /// from: `static public final int SIGNATURE_NEITHER_SIGNED`
  static const SIGNATURE_NEITHER_SIGNED = 1;

  /// from: `static public final int SIGNATURE_NO_MATCH`
  static const SIGNATURE_NO_MATCH = -3;

  /// from: `static public final int SIGNATURE_SECOND_NOT_SIGNED`
  static const SIGNATURE_SECOND_NOT_SIGNED = -2;

  /// from: `static public final int SIGNATURE_UNKNOWN_PACKAGE`
  static const SIGNATURE_UNKNOWN_PACKAGE = -4;

  /// from: `static public final int SYNCHRONOUS`
  static const SYNCHRONOUS = 2;
  static final _id_TRUST_ALL = _class.staticFieldId(
    r'TRUST_ALL',
    r'Ljava/util/List;',
  );

  /// from: `static public final java.util.List TRUST_ALL`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JList<_$jni.JObject> get TRUST_ALL =>
      _id_TRUST_ALL.get(_class, const _$jni.JListType(_$jni.JObjectType()));

  static final _id_TRUST_NONE = _class.staticFieldId(
    r'TRUST_NONE',
    r'Ljava/util/List;',
  );

  /// from: `static public final java.util.List TRUST_NONE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JList<_$jni.JObject> get TRUST_NONE =>
      _id_TRUST_NONE.get(_class, const _$jni.JListType(_$jni.JObjectType()));

  /// from: `static public final int VERIFICATION_ALLOW`
  static const VERIFICATION_ALLOW = 1;

  /// from: `static public final int VERIFICATION_REJECT`
  static const VERIFICATION_REJECT = -1;

  /// from: `static public final int VERSION_CODE_HIGHEST`
  static const VERSION_CODE_HIGHEST = -1;
  static final _id_getPackageInfo = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getPackageInfo(
            reference.pointer,
            _id_getPackageInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageInfo$1 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.PackageInfo getPackageInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageInfo$1(
    _$jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageInfo$1(
            reference.pointer,
            _id_getPackageInfo$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageInfo$2 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Landroid/content/pm/VersionedPackage;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo$2 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageInfo$2(
    _$jni.JObject versionedPackage,
    int i,
  ) {
    return _getPackageInfo$2(
            reference.pointer,
            _id_getPackageInfo$2 as _$jni.JMethodIDPtr,
            versionedPackage.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageInfo$3 = _class.instanceMethodId(
    r'getPackageInfo',
    r'(Landroid/content/pm/VersionedPackage;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageInfo$3 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage versionedPackage, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageInfo$3(
    _$jni.JObject versionedPackage,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageInfo$3(
            reference.pointer,
            _id_getPackageInfo$3 as _$jni.JMethodIDPtr,
            versionedPackage.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_currentToCanonicalPackageNames = _class.instanceMethodId(
    r'currentToCanonicalPackageNames',
    r'([Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _currentToCanonicalPackageNames =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.String[] currentToCanonicalPackageNames(java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> currentToCanonicalPackageNames(
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _currentToCanonicalPackageNames(
            reference.pointer,
            _id_currentToCanonicalPackageNames as _$jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_canonicalToCurrentPackageNames = _class.instanceMethodId(
    r'canonicalToCurrentPackageNames',
    r'([Ljava/lang/String;)[Ljava/lang/String;',
  );

  static final _canonicalToCurrentPackageNames =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> canonicalToCurrentPackageNames(
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _canonicalToCurrentPackageNames(
            reference.pointer,
            _id_canonicalToCurrentPackageNames as _$jni.JMethodIDPtr,
            strings.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_getLaunchIntentForPackage = _class.instanceMethodId(
    r'getLaunchIntentForPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getLaunchIntentForPackage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.Intent getLaunchIntentForPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  intent_.Intent getLaunchIntentForPackage(
    _$jni.JString string,
  ) {
    return _getLaunchIntentForPackage(
            reference.pointer,
            _id_getLaunchIntentForPackage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const intent_.$Intent$Type());
  }

  static final _id_getLeanbackLaunchIntentForPackage = _class.instanceMethodId(
    r'getLeanbackLaunchIntentForPackage',
    r'(Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getLeanbackLaunchIntentForPackage =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  intent_.Intent getLeanbackLaunchIntentForPackage(
    _$jni.JString string,
  ) {
    return _getLeanbackLaunchIntentForPackage(
            reference.pointer,
            _id_getLeanbackLaunchIntentForPackage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const intent_.$Intent$Type());
  }

  static final _id_getLaunchIntentSenderForPackage = _class.instanceMethodId(
    r'getLaunchIntentSenderForPackage',
    r'(Ljava/lang/String;)Landroid/content/IntentSender;',
  );

  static final _getLaunchIntentSenderForPackage =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getLaunchIntentSenderForPackage(
    _$jni.JString string,
  ) {
    return _getLaunchIntentSenderForPackage(
            reference.pointer,
            _id_getLaunchIntentSenderForPackage as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageGids = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;)[I',
  );

  static final _getPackageGids = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int[] getPackageGids(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jint> getPackageGids(
    _$jni.JString string,
  ) {
    return _getPackageGids(reference.pointer,
            _id_getPackageGids as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.jintType()));
  }

  static final _id_getPackageGids$1 = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;I)[I',
  );

  static final _getPackageGids$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract int[] getPackageGids(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jint> getPackageGids$1(
    _$jni.JString string,
    int i,
  ) {
    return _getPackageGids$1(
            reference.pointer,
            _id_getPackageGids$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JArrayType(_$jni.jintType()));
  }

  static final _id_getPackageGids$2 = _class.instanceMethodId(
    r'getPackageGids',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)[I',
  );

  static final _getPackageGids$2 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int[] getPackageGids(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jint> getPackageGids$2(
    _$jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageGids$2(
            reference.pointer,
            _id_getPackageGids$2 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.jintType()));
  }

  static final _id_getPackageUid = _class.instanceMethodId(
    r'getPackageUid',
    r'(Ljava/lang/String;I)I',
  );

  static final _getPackageUid = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract int getPackageUid(java.lang.String string, int i)`
  int getPackageUid(
    _$jni.JString string,
    int i,
  ) {
    return _getPackageUid(
            reference.pointer,
            _id_getPackageUid as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .integer;
  }

  static final _id_getPackageUid$1 = _class.instanceMethodId(
    r'getPackageUid',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)I',
  );

  static final _getPackageUid$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int getPackageUid(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  int getPackageUid$1(
    _$jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageUid$1(
            reference.pointer,
            _id_getPackageUid$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .integer;
  }

  static final _id_getPermissionInfo = _class.instanceMethodId(
    r'getPermissionInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;',
  );

  static final _getPermissionInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.PermissionInfo getPermissionInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPermissionInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getPermissionInfo(
            reference.pointer,
            _id_getPermissionInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_queryPermissionsByGroup = _class.instanceMethodId(
    r'queryPermissionsByGroup',
    r'(Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _queryPermissionsByGroup = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryPermissionsByGroup(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryPermissionsByGroup(
    _$jni.JString string,
    int i,
  ) {
    return _queryPermissionsByGroup(
            reference.pointer,
            _id_queryPermissionsByGroup as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getPermissionGroupInfo = _class.instanceMethodId(
    r'getPermissionGroupInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;',
  );

  static final _getPermissionGroupInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPermissionGroupInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getPermissionGroupInfo(
            reference.pointer,
            _id_getPermissionGroupInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getAllPermissionGroups = _class.instanceMethodId(
    r'getAllPermissionGroups',
    r'(I)Ljava/util/List;',
  );

  static final _getAllPermissionGroups = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.util.List getAllPermissionGroups(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAllPermissionGroups(
    int i,
  ) {
    return _getAllPermissionGroups(reference.pointer,
            _id_getAllPermissionGroups as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getPlatformPermissionsForGroup = _class.instanceMethodId(
    r'getPlatformPermissionsForGroup',
    r'(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getPlatformPermissionsForGroup =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getPlatformPermissionsForGroup(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void getPlatformPermissionsForGroup(
    _$jni.JString string,
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _getPlatformPermissionsForGroup(
            reference.pointer,
            _id_getPlatformPermissionsForGroup as _$jni.JMethodIDPtr,
            string.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getGroupOfPlatformPermission = _class.instanceMethodId(
    r'getGroupOfPlatformPermission',
    r'(Ljava/lang/String;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getGroupOfPlatformPermission =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getGroupOfPlatformPermission(java.lang.String string, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void getGroupOfPlatformPermission(
    _$jni.JString string,
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _getGroupOfPlatformPermission(
            reference.pointer,
            _id_getGroupOfPlatformPermission as _$jni.JMethodIDPtr,
            string.reference.pointer,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r'getApplicationInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getApplicationInfo(
            reference.pointer,
            _id_getApplicationInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationInfo$1 = _class.instanceMethodId(
    r'getApplicationInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Landroid/content/pm/ApplicationInfo;',
  );

  static final _getApplicationInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String string, android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationInfo$1(
    _$jni.JString string,
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return _getApplicationInfo$1(
            reference.pointer,
            _id_getApplicationInfo$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            applicationInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getTargetSdkVersion = _class.instanceMethodId(
    r'getTargetSdkVersion',
    r'(Ljava/lang/String;)I',
  );

  static final _getTargetSdkVersion = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int getTargetSdkVersion(java.lang.String string)`
  int getTargetSdkVersion(
    _$jni.JString string,
  ) {
    return _getTargetSdkVersion(
            reference.pointer,
            _id_getTargetSdkVersion as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_getActivityInfo = _class.instanceMethodId(
    r'getActivityInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _getActivityInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityInfo(
    _$jni.JObject componentName,
    int i,
  ) {
    return _getActivityInfo(
            reference.pointer,
            _id_getActivityInfo as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityInfo$1 = _class.instanceMethodId(
    r'getActivityInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;',
  );

  static final _getActivityInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityInfo$1(
    _$jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getActivityInfo$1(
            reference.pointer,
            _id_getActivityInfo$1 as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getReceiverInfo = _class.instanceMethodId(
    r'getReceiverInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;',
  );

  static final _getReceiverInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getReceiverInfo(
    _$jni.JObject componentName,
    int i,
  ) {
    return _getReceiverInfo(
            reference.pointer,
            _id_getReceiverInfo as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getReceiverInfo$1 = _class.instanceMethodId(
    r'getReceiverInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ActivityInfo;',
  );

  static final _getReceiverInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getReceiverInfo$1(
    _$jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getReceiverInfo$1(
            reference.pointer,
            _id_getReceiverInfo$1 as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getServiceInfo = _class.instanceMethodId(
    r'getServiceInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ServiceInfo;',
  );

  static final _getServiceInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getServiceInfo(
    _$jni.JObject componentName,
    int i,
  ) {
    return _getServiceInfo(
            reference.pointer,
            _id_getServiceInfo as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getServiceInfo$1 = _class.instanceMethodId(
    r'getServiceInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ServiceInfo;',
  );

  static final _getServiceInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getServiceInfo$1(
    _$jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getServiceInfo$1(
            reference.pointer,
            _id_getServiceInfo$1 as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getProviderInfo = _class.instanceMethodId(
    r'getProviderInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/ProviderInfo;',
  );

  static final _getProviderInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getProviderInfo(
    _$jni.JObject componentName,
    int i,
  ) {
    return _getProviderInfo(
            reference.pointer,
            _id_getProviderInfo as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getProviderInfo$1 = _class.instanceMethodId(
    r'getProviderInfo',
    r'(Landroid/content/ComponentName;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;',
  );

  static final _getProviderInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName componentName, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getProviderInfo$1(
    _$jni.JObject componentName,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _getProviderInfo$1(
            reference.pointer,
            _id_getProviderInfo$1 as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getModuleInfo = _class.instanceMethodId(
    r'getModuleInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;',
  );

  static final _getModuleInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public android.content.pm.ModuleInfo getModuleInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getModuleInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getModuleInfo(
            reference.pointer,
            _id_getModuleInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getInstalledModules = _class.instanceMethodId(
    r'getInstalledModules',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledModules = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public java.util.List getInstalledModules(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getInstalledModules(
    int i,
  ) {
    return _getInstalledModules(
            reference.pointer, _id_getInstalledModules as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getInstalledPackages = _class.instanceMethodId(
    r'getInstalledPackages',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledPackages = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.util.List getInstalledPackages(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getInstalledPackages(
    int i,
  ) {
    return _getInstalledPackages(reference.pointer,
            _id_getInstalledPackages as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getInstalledPackages$1 = _class.instanceMethodId(
    r'getInstalledPackages',
    r'(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getInstalledPackages$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getInstalledPackages$1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getInstalledPackages$1(
            reference.pointer,
            _id_getInstalledPackages$1 as _$jni.JMethodIDPtr,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getPackagesHoldingPermissions = _class.instanceMethodId(
    r'getPackagesHoldingPermissions',
    r'([Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _getPackagesHoldingPermissions =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<
                              (_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getPackagesHoldingPermissions(
    _$jni.JArray<_$jni.JString> strings,
    int i,
  ) {
    return _getPackagesHoldingPermissions(
            reference.pointer,
            _id_getPackagesHoldingPermissions as _$jni.JMethodIDPtr,
            strings.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getPackagesHoldingPermissions$1 = _class.instanceMethodId(
    r'getPackagesHoldingPermissions',
    r'([Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getPackagesHoldingPermissions$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List getPackagesHoldingPermissions(java.lang.Object[] strings, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getPackagesHoldingPermissions$1(
    _$jni.JArray<_$jni.JString> strings,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackagesHoldingPermissions$1(
            reference.pointer,
            _id_getPackagesHoldingPermissions$1 as _$jni.JMethodIDPtr,
            strings.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r'checkPermission',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _checkPermission = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int checkPermission(java.lang.String string, java.lang.String string1)`
  int checkPermission(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .integer;
  }

  static final _id_isPermissionRevokedByPolicy = _class.instanceMethodId(
    r'isPermissionRevokedByPolicy',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _isPermissionRevokedByPolicy =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean isPermissionRevokedByPolicy(java.lang.String string, java.lang.String string1)`
  bool isPermissionRevokedByPolicy(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _isPermissionRevokedByPolicy(
            reference.pointer,
            _id_isPermissionRevokedByPolicy as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .boolean;
  }

  static final _id_addPermission = _class.instanceMethodId(
    r'addPermission',
    r'(Landroid/content/pm/PermissionInfo;)Z',
  );

  static final _addPermission = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean addPermission(android.content.pm.PermissionInfo permissionInfo)`
  bool addPermission(
    _$jni.JObject permissionInfo,
  ) {
    return _addPermission(
            reference.pointer,
            _id_addPermission as _$jni.JMethodIDPtr,
            permissionInfo.reference.pointer)
        .boolean;
  }

  static final _id_addPermissionAsync = _class.instanceMethodId(
    r'addPermissionAsync',
    r'(Landroid/content/pm/PermissionInfo;)Z',
  );

  static final _addPermissionAsync = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean addPermissionAsync(android.content.pm.PermissionInfo permissionInfo)`
  bool addPermissionAsync(
    _$jni.JObject permissionInfo,
  ) {
    return _addPermissionAsync(
            reference.pointer,
            _id_addPermissionAsync as _$jni.JMethodIDPtr,
            permissionInfo.reference.pointer)
        .boolean;
  }

  static final _id_removePermission = _class.instanceMethodId(
    r'removePermission',
    r'(Ljava/lang/String;)V',
  );

  static final _removePermission = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removePermission(java.lang.String string)`
  void removePermission(
    _$jni.JString string,
  ) {
    _removePermission(
            reference.pointer,
            _id_removePermission as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getWhitelistedRestrictedPermissions =
      _class.instanceMethodId(
    r'getWhitelistedRestrictedPermissions',
    r'(Ljava/lang/String;I)Ljava/util/Set;',
  );

  static final _getWhitelistedRestrictedPermissions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public java.util.Set getWhitelistedRestrictedPermissions(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JSet<_$jni.JString> getWhitelistedRestrictedPermissions(
    _$jni.JString string,
    int i,
  ) {
    return _getWhitelistedRestrictedPermissions(
            reference.pointer,
            _id_getWhitelistedRestrictedPermissions as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JSetType(_$jni.JStringType()));
  }

  static final _id_addWhitelistedRestrictedPermission = _class.instanceMethodId(
    r'addWhitelistedRestrictedPermission',
    r'(Ljava/lang/String;Ljava/lang/String;I)Z',
  );

  static final _addWhitelistedRestrictedPermission =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public boolean addWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)`
  bool addWhitelistedRestrictedPermission(
    _$jni.JString string,
    _$jni.JString string1,
    int i,
  ) {
    return _addWhitelistedRestrictedPermission(
            reference.pointer,
            _id_addWhitelistedRestrictedPermission as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i)
        .boolean;
  }

  static final _id_removeWhitelistedRestrictedPermission =
      _class.instanceMethodId(
    r'removeWhitelistedRestrictedPermission',
    r'(Ljava/lang/String;Ljava/lang/String;I)Z',
  );

  static final _removeWhitelistedRestrictedPermission =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public boolean removeWhitelistedRestrictedPermission(java.lang.String string, java.lang.String string1, int i)`
  bool removeWhitelistedRestrictedPermission(
    _$jni.JString string,
    _$jni.JString string1,
    int i,
  ) {
    return _removeWhitelistedRestrictedPermission(
            reference.pointer,
            _id_removeWhitelistedRestrictedPermission as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer,
            i)
        .boolean;
  }

  static final _id_setAutoRevokeWhitelisted = _class.instanceMethodId(
    r'setAutoRevokeWhitelisted',
    r'(Ljava/lang/String;Z)Z',
  );

  static final _setAutoRevokeWhitelisted = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public boolean setAutoRevokeWhitelisted(java.lang.String string, boolean z)`
  bool setAutoRevokeWhitelisted(
    _$jni.JString string,
    bool z,
  ) {
    return _setAutoRevokeWhitelisted(
            reference.pointer,
            _id_setAutoRevokeWhitelisted as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_isAutoRevokeWhitelisted = _class.instanceMethodId(
    r'isAutoRevokeWhitelisted',
    r'(Ljava/lang/String;)Z',
  );

  static final _isAutoRevokeWhitelisted = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean isAutoRevokeWhitelisted(java.lang.String string)`
  bool isAutoRevokeWhitelisted(
    _$jni.JString string,
  ) {
    return _isAutoRevokeWhitelisted(
            reference.pointer,
            _id_isAutoRevokeWhitelisted as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getBackgroundPermissionOptionLabel = _class.instanceMethodId(
    r'getBackgroundPermissionOptionLabel',
    r'()Ljava/lang/CharSequence;',
  );

  static final _getBackgroundPermissionOptionLabel =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.lang.CharSequence getBackgroundPermissionOptionLabel()`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getBackgroundPermissionOptionLabel() {
    return _getBackgroundPermissionOptionLabel(reference.pointer,
            _id_getBackgroundPermissionOptionLabel as _$jni.JMethodIDPtr)
        .object(const charsequence_.$CharSequence$Type());
  }

  static final _id_checkSignatures = _class.instanceMethodId(
    r'checkSignatures',
    r'(Ljava/lang/String;Ljava/lang/String;)I',
  );

  static final _checkSignatures = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int checkSignatures(java.lang.String string, java.lang.String string1)`
  int checkSignatures(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _checkSignatures(
            reference.pointer,
            _id_checkSignatures as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .integer;
  }

  static final _id_checkSignatures$1 = _class.instanceMethodId(
    r'checkSignatures',
    r'(II)I',
  );

  static final _checkSignatures$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public abstract int checkSignatures(int i, int i1)`
  int checkSignatures$1(
    int i,
    int i1,
  ) {
    return _checkSignatures$1(reference.pointer,
            _id_checkSignatures$1 as _$jni.JMethodIDPtr, i, i1)
        .integer;
  }

  static final _id_getPackagesForUid = _class.instanceMethodId(
    r'getPackagesForUid',
    r'(I)[Ljava/lang/String;',
  );

  static final _getPackagesForUid = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.lang.String[] getPackagesForUid(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> getPackagesForUid(
    int i,
  ) {
    return _getPackagesForUid(
            reference.pointer, _id_getPackagesForUid as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_getNameForUid = _class.instanceMethodId(
    r'getNameForUid',
    r'(I)Ljava/lang/String;',
  );

  static final _getNameForUid = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.lang.String getNameForUid(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getNameForUid(
    int i,
  ) {
    return _getNameForUid(
            reference.pointer, _id_getNameForUid as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JStringType());
  }

  static final _id_getInstalledApplications = _class.instanceMethodId(
    r'getInstalledApplications',
    r'(I)Ljava/util/List;',
  );

  static final _getInstalledApplications = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.util.List getInstalledApplications(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getInstalledApplications(
    int i,
  ) {
    return _getInstalledApplications(reference.pointer,
            _id_getInstalledApplications as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getInstalledApplications$1 = _class.instanceMethodId(
    r'getInstalledApplications',
    r'(Landroid/content/pm/PackageManager$ApplicationInfoFlags;)Ljava/util/List;',
  );

  static final _getInstalledApplications$1 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags applicationInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getInstalledApplications$1(
    PackageManager_ApplicationInfoFlags applicationInfoFlags,
  ) {
    return _getInstalledApplications$1(
            reference.pointer,
            _id_getInstalledApplications$1 as _$jni.JMethodIDPtr,
            applicationInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_isInstantApp = _class.instanceMethodId(
    r'isInstantApp',
    r'()Z',
  );

  static final _isInstantApp = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isInstantApp()`
  bool isInstantApp() {
    return _isInstantApp(
            reference.pointer, _id_isInstantApp as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isInstantApp$1 = _class.instanceMethodId(
    r'isInstantApp',
    r'(Ljava/lang/String;)Z',
  );

  static final _isInstantApp$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean isInstantApp(java.lang.String string)`
  bool isInstantApp$1(
    _$jni.JString string,
  ) {
    return _isInstantApp$1(reference.pointer,
            _id_isInstantApp$1 as _$jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getInstantAppCookieMaxBytes = _class.instanceMethodId(
    r'getInstantAppCookieMaxBytes',
    r'()I',
  );

  static final _getInstantAppCookieMaxBytes =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract int getInstantAppCookieMaxBytes()`
  int getInstantAppCookieMaxBytes() {
    return _getInstantAppCookieMaxBytes(reference.pointer,
            _id_getInstantAppCookieMaxBytes as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getInstantAppCookie = _class.instanceMethodId(
    r'getInstantAppCookie',
    r'()[B',
  );

  static final _getInstantAppCookie = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract byte[] getInstantAppCookie()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jbyte> getInstantAppCookie() {
    return _getInstantAppCookie(
            reference.pointer, _id_getInstantAppCookie as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.jbyteType()));
  }

  static final _id_clearInstantAppCookie = _class.instanceMethodId(
    r'clearInstantAppCookie',
    r'()V',
  );

  static final _clearInstantAppCookie = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void clearInstantAppCookie()`
  void clearInstantAppCookie() {
    _clearInstantAppCookie(
            reference.pointer, _id_clearInstantAppCookie as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_updateInstantAppCookie = _class.instanceMethodId(
    r'updateInstantAppCookie',
    r'([B)V',
  );

  static final _updateInstantAppCookie = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void updateInstantAppCookie(byte[] bs)`
  void updateInstantAppCookie(
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    _updateInstantAppCookie(
            reference.pointer,
            _id_updateInstantAppCookie as _$jni.JMethodIDPtr,
            bs.reference.pointer)
        .check();
  }

  static final _id_getSystemSharedLibraryNames = _class.instanceMethodId(
    r'getSystemSharedLibraryNames',
    r'()[Ljava/lang/String;',
  );

  static final _getSystemSharedLibraryNames =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract java.lang.String[] getSystemSharedLibraryNames()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> getSystemSharedLibraryNames() {
    return _getSystemSharedLibraryNames(reference.pointer,
            _id_getSystemSharedLibraryNames as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.JStringType()));
  }

  static final _id_getSharedLibraries = _class.instanceMethodId(
    r'getSharedLibraries',
    r'(I)Ljava/util/List;',
  );

  static final _getSharedLibraries = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.util.List getSharedLibraries(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getSharedLibraries(
    int i,
  ) {
    return _getSharedLibraries(
            reference.pointer, _id_getSharedLibraries as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getSharedLibraries$1 = _class.instanceMethodId(
    r'getSharedLibraries',
    r'(Landroid/content/pm/PackageManager$PackageInfoFlags;)Ljava/util/List;',
  );

  static final _getSharedLibraries$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getSharedLibraries$1(
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getSharedLibraries$1(
            reference.pointer,
            _id_getSharedLibraries$1 as _$jni.JMethodIDPtr,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getChangedPackages = _class.instanceMethodId(
    r'getChangedPackages',
    r'(I)Landroid/content/pm/ChangedPackages;',
  );

  static final _getChangedPackages = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract android.content.pm.ChangedPackages getChangedPackages(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getChangedPackages(
    int i,
  ) {
    return _getChangedPackages(
            reference.pointer, _id_getChangedPackages as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getSystemAvailableFeatures = _class.instanceMethodId(
    r'getSystemAvailableFeatures',
    r'()[Landroid/content/pm/FeatureInfo;',
  );

  static final _getSystemAvailableFeatures =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public abstract android.content.pm.FeatureInfo[] getSystemAvailableFeatures()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JObject> getSystemAvailableFeatures() {
    return _getSystemAvailableFeatures(reference.pointer,
            _id_getSystemAvailableFeatures as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_hasSystemFeature = _class.instanceMethodId(
    r'hasSystemFeature',
    r'(Ljava/lang/String;)Z',
  );

  static final _hasSystemFeature = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean hasSystemFeature(java.lang.String string)`
  bool hasSystemFeature(
    _$jni.JString string,
  ) {
    return _hasSystemFeature(
            reference.pointer,
            _id_hasSystemFeature as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_hasSystemFeature$1 = _class.instanceMethodId(
    r'hasSystemFeature',
    r'(Ljava/lang/String;I)Z',
  );

  static final _hasSystemFeature$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract boolean hasSystemFeature(java.lang.String string, int i)`
  bool hasSystemFeature$1(
    _$jni.JString string,
    int i,
  ) {
    return _hasSystemFeature$1(
            reference.pointer,
            _id_hasSystemFeature$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .boolean;
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveActivity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveActivity(
    intent_.Intent intent,
    int i,
  ) {
    return _resolveActivity(
            reference.pointer,
            _id_resolveActivity as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_resolveActivity$1 = _class.instanceMethodId(
    r'resolveActivity',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveActivity$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ResolveInfo resolveActivity(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveActivity$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _resolveActivity$1(
            reference.pointer,
            _id_resolveActivity$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_queryIntentActivities = _class.instanceMethodId(
    r'queryIntentActivities',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentActivities = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryIntentActivities(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentActivities(
    intent_.Intent intent,
    int i,
  ) {
    return _queryIntentActivities(
            reference.pointer,
            _id_queryIntentActivities as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentActivities$1 = _class.instanceMethodId(
    r'queryIntentActivities',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentActivities$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryIntentActivities(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentActivities$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentActivities$1(
            reference.pointer,
            _id_queryIntentActivities$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentActivityOptions = _class.instanceMethodId(
    r'queryIntentActivityOptions',
    r'(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentActivityOptions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public abstract java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.lang.Object[] intents, android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentActivityOptions(
    _$jni.JObject componentName,
    _$jni.JArray<intent_.Intent> intents,
    intent_.Intent intent,
    int i,
  ) {
    return _queryIntentActivityOptions(
            reference.pointer,
            _id_queryIntentActivityOptions as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            intents.reference.pointer,
            intent.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentActivityOptions$1 = _class.instanceMethodId(
    r'queryIntentActivityOptions',
    r'(Landroid/content/ComponentName;Ljava/util/List;Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentActivityOptions$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryIntentActivityOptions(android.content.ComponentName componentName, java.util.List list, android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentActivityOptions$1(
    _$jni.JObject componentName,
    _$jni.JList<intent_.Intent> list,
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentActivityOptions$1(
            reference.pointer,
            _id_queryIntentActivityOptions$1 as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            list.reference.pointer,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryBroadcastReceivers = _class.instanceMethodId(
    r'queryBroadcastReceivers',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryBroadcastReceivers = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryBroadcastReceivers(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryBroadcastReceivers(
    intent_.Intent intent,
    int i,
  ) {
    return _queryBroadcastReceivers(
            reference.pointer,
            _id_queryBroadcastReceivers as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryBroadcastReceivers$1 = _class.instanceMethodId(
    r'queryBroadcastReceivers',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryBroadcastReceivers$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryBroadcastReceivers(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryBroadcastReceivers$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryBroadcastReceivers$1(
            reference.pointer,
            _id_queryBroadcastReceivers$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_resolveService = _class.instanceMethodId(
    r'resolveService',
    r'(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveService = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ResolveInfo resolveService(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveService(
    intent_.Intent intent,
    int i,
  ) {
    return _resolveService(
            reference.pointer,
            _id_resolveService as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_resolveService$1 = _class.instanceMethodId(
    r'resolveService',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Landroid/content/pm/ResolveInfo;',
  );

  static final _resolveService$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ResolveInfo resolveService(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveService$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _resolveService$1(
            reference.pointer,
            _id_resolveService$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_queryIntentServices = _class.instanceMethodId(
    r'queryIntentServices',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentServices = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryIntentServices(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentServices(
    intent_.Intent intent,
    int i,
  ) {
    return _queryIntentServices(
            reference.pointer,
            _id_queryIntentServices as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentServices$1 = _class.instanceMethodId(
    r'queryIntentServices',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentServices$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryIntentServices(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentServices$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentServices$1(
            reference.pointer,
            _id_queryIntentServices$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentContentProviders = _class.instanceMethodId(
    r'queryIntentContentProviders',
    r'(Landroid/content/Intent;I)Ljava/util/List;',
  );

  static final _queryIntentContentProviders =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryIntentContentProviders(android.content.Intent intent, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentContentProviders(
    intent_.Intent intent,
    int i,
  ) {
    return _queryIntentContentProviders(
            reference.pointer,
            _id_queryIntentContentProviders as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryIntentContentProviders$1 = _class.instanceMethodId(
    r'queryIntentContentProviders',
    r'(Landroid/content/Intent;Landroid/content/pm/PackageManager$ResolveInfoFlags;)Ljava/util/List;',
  );

  static final _queryIntentContentProviders$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryIntentContentProviders(android.content.Intent intent, android.content.pm.PackageManager$ResolveInfoFlags resolveInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryIntentContentProviders$1(
    intent_.Intent intent,
    PackageManager_ResolveInfoFlags resolveInfoFlags,
  ) {
    return _queryIntentContentProviders$1(
            reference.pointer,
            _id_queryIntentContentProviders$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer,
            resolveInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_resolveContentProvider = _class.instanceMethodId(
    r'resolveContentProvider',
    r'(Ljava/lang/String;I)Landroid/content/pm/ProviderInfo;',
  );

  static final _resolveContentProvider = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveContentProvider(
    _$jni.JString string,
    int i,
  ) {
    return _resolveContentProvider(
            reference.pointer,
            _id_resolveContentProvider as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_resolveContentProvider$1 = _class.instanceMethodId(
    r'resolveContentProvider',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$ComponentInfoFlags;)Landroid/content/pm/ProviderInfo;',
  );

  static final _resolveContentProvider$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String string, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject resolveContentProvider$1(
    _$jni.JString string,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _resolveContentProvider$1(
            reference.pointer,
            _id_resolveContentProvider$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_queryContentProviders = _class.instanceMethodId(
    r'queryContentProviders',
    r'(Ljava/lang/String;II)Ljava/util/List;',
  );

  static final _queryContentProviders = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract java.util.List queryContentProviders(java.lang.String string, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryContentProviders(
    _$jni.JString string,
    int i,
    int i1,
  ) {
    return _queryContentProviders(
            reference.pointer,
            _id_queryContentProviders as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_queryContentProviders$1 = _class.instanceMethodId(
    r'queryContentProviders',
    r'(Ljava/lang/String;ILandroid/content/pm/PackageManager$ComponentInfoFlags;)Ljava/util/List;',
  );

  static final _queryContentProviders$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryContentProviders(java.lang.String string, int i, android.content.pm.PackageManager$ComponentInfoFlags componentInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryContentProviders$1(
    _$jni.JString string,
    int i,
    PackageManager_ComponentInfoFlags componentInfoFlags,
  ) {
    return _queryContentProviders$1(
            reference.pointer,
            _id_queryContentProviders$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            componentInfoFlags.reference.pointer)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getInstrumentationInfo = _class.instanceMethodId(
    r'getInstrumentationInfo',
    r'(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;',
  );

  static final _getInstrumentationInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName componentName, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getInstrumentationInfo(
    _$jni.JObject componentName,
    int i,
  ) {
    return _getInstrumentationInfo(
            reference.pointer,
            _id_getInstrumentationInfo as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_queryInstrumentation = _class.instanceMethodId(
    r'queryInstrumentation',
    r'(Ljava/lang/String;I)Ljava/util/List;',
  );

  static final _queryInstrumentation = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract java.util.List queryInstrumentation(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> queryInstrumentation(
    _$jni.JString string,
    int i,
  ) {
    return _queryInstrumentation(
            reference.pointer,
            _id_queryInstrumentation as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r'getDrawable',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getDrawable(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getDrawable(
    _$jni.JString string,
    int i,
    _$jni.JObject applicationInfo,
  ) {
    return _getDrawable(
            reference.pointer,
            _id_getDrawable as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityIcon = _class.instanceMethodId(
    r'getActivityIcon',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityIcon = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityIcon(
    _$jni.JObject componentName,
  ) {
    return _getActivityIcon(
            reference.pointer,
            _id_getActivityIcon as _$jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityIcon$1 = _class.instanceMethodId(
    r'getActivityIcon',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityIcon$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityIcon(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityIcon$1(
    intent_.Intent intent,
  ) {
    return _getActivityIcon$1(
            reference.pointer,
            _id_getActivityIcon$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityBanner = _class.instanceMethodId(
    r'getActivityBanner',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityBanner = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityBanner(
    _$jni.JObject componentName,
  ) {
    return _getActivityBanner(
            reference.pointer,
            _id_getActivityBanner as _$jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityBanner$1 = _class.instanceMethodId(
    r'getActivityBanner',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityBanner$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityBanner(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityBanner$1(
    intent_.Intent intent,
  ) {
    return _getActivityBanner$1(
            reference.pointer,
            _id_getActivityBanner$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getDefaultActivityIcon = _class.instanceMethodId(
    r'getDefaultActivityIcon',
    r'()Landroid/graphics/drawable/Drawable;',
  );

  static final _getDefaultActivityIcon = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.graphics.drawable.Drawable getDefaultActivityIcon()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getDefaultActivityIcon() {
    return _getDefaultActivityIcon(
            reference.pointer, _id_getDefaultActivityIcon as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationIcon = _class.instanceMethodId(
    r'getApplicationIcon',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationIcon = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationIcon(
    _$jni.JObject applicationInfo,
  ) {
    return _getApplicationIcon(
            reference.pointer,
            _id_getApplicationIcon as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationIcon$1 = _class.instanceMethodId(
    r'getApplicationIcon',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationIcon$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationIcon(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationIcon$1(
    _$jni.JString string,
  ) {
    return _getApplicationIcon$1(
            reference.pointer,
            _id_getApplicationIcon$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationBanner = _class.instanceMethodId(
    r'getApplicationBanner',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationBanner = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationBanner(
    _$jni.JObject applicationInfo,
  ) {
    return _getApplicationBanner(
            reference.pointer,
            _id_getApplicationBanner as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationBanner$1 = _class.instanceMethodId(
    r'getApplicationBanner',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationBanner$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationBanner(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationBanner$1(
    _$jni.JString string,
  ) {
    return _getApplicationBanner$1(
            reference.pointer,
            _id_getApplicationBanner$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityLogo = _class.instanceMethodId(
    r'getActivityLogo',
    r'(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityLogo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityLogo(
    _$jni.JObject componentName,
  ) {
    return _getActivityLogo(
            reference.pointer,
            _id_getActivityLogo as _$jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getActivityLogo$1 = _class.instanceMethodId(
    r'getActivityLogo',
    r'(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getActivityLogo$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getActivityLogo(android.content.Intent intent)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getActivityLogo$1(
    intent_.Intent intent,
  ) {
    return _getActivityLogo$1(
            reference.pointer,
            _id_getActivityLogo$1 as _$jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationLogo = _class.instanceMethodId(
    r'getApplicationLogo',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationLogo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationLogo(
    _$jni.JObject applicationInfo,
  ) {
    return _getApplicationLogo(
            reference.pointer,
            _id_getApplicationLogo as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationLogo$1 = _class.instanceMethodId(
    r'getApplicationLogo',
    r'(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getApplicationLogo$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getApplicationLogo(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApplicationLogo$1(
    _$jni.JString string,
  ) {
    return _getApplicationLogo$1(
            reference.pointer,
            _id_getApplicationLogo$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getUserBadgedIcon = _class.instanceMethodId(
    r'getUserBadgedIcon',
    r'(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;',
  );

  static final _getUserBadgedIcon = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getUserBadgedIcon(
    _$jni.JObject drawable,
    _$jni.JObject userHandle,
  ) {
    return _getUserBadgedIcon(
            reference.pointer,
            _id_getUserBadgedIcon as _$jni.JMethodIDPtr,
            drawable.reference.pointer,
            userHandle.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getUserBadgedDrawableForDensity = _class.instanceMethodId(
    r'getUserBadgedDrawableForDensity',
    r'(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getUserBadgedDrawableForDensity =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int)>();

  /// from: `public abstract android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable drawable, android.os.UserHandle userHandle, android.graphics.Rect rect, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getUserBadgedDrawableForDensity(
    _$jni.JObject drawable,
    _$jni.JObject userHandle,
    _$jni.JObject rect,
    int i,
  ) {
    return _getUserBadgedDrawableForDensity(
            reference.pointer,
            _id_getUserBadgedDrawableForDensity as _$jni.JMethodIDPtr,
            drawable.reference.pointer,
            userHandle.reference.pointer,
            rect.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getUserBadgedLabel = _class.instanceMethodId(
    r'getUserBadgedLabel',
    r'(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;',
  );

  static final _getUserBadgedLabel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence charSequence, android.os.UserHandle userHandle)`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getUserBadgedLabel(
    charsequence_.CharSequence charSequence,
    _$jni.JObject userHandle,
  ) {
    return _getUserBadgedLabel(
            reference.pointer,
            _id_getUserBadgedLabel as _$jni.JMethodIDPtr,
            charSequence.reference.pointer,
            userHandle.reference.pointer)
        .object(const charsequence_.$CharSequence$Type());
  }

  static final _id_getText = _class.instanceMethodId(
    r'getText',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;',
  );

  static final _getText = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.CharSequence getText(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getText(
    _$jni.JString string,
    int i,
    _$jni.JObject applicationInfo,
  ) {
    return _getText(reference.pointer, _id_getText as _$jni.JMethodIDPtr,
            string.reference.pointer, i, applicationInfo.reference.pointer)
        .object(const charsequence_.$CharSequence$Type());
  }

  static final _id_getXml = _class.instanceMethodId(
    r'getXml',
    r'(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/content/res/XmlResourceParser;',
  );

  static final _getXml = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.res.XmlResourceParser getXml(java.lang.String string, int i, android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getXml(
    _$jni.JString string,
    int i,
    _$jni.JObject applicationInfo,
  ) {
    return _getXml(reference.pointer, _id_getXml as _$jni.JMethodIDPtr,
            string.reference.pointer, i, applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApplicationLabel = _class.instanceMethodId(
    r'getApplicationLabel',
    r'(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;',
  );

  static final _getApplicationLabel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence getApplicationLabel(
    _$jni.JObject applicationInfo,
  ) {
    return _getApplicationLabel(
            reference.pointer,
            _id_getApplicationLabel as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const charsequence_.$CharSequence$Type());
  }

  static final _id_getResourcesForActivity = _class.instanceMethodId(
    r'getResourcesForActivity',
    r'(Landroid/content/ComponentName;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForActivity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.res.Resources getResourcesForActivity(android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getResourcesForActivity(
    _$jni.JObject componentName,
  ) {
    return _getResourcesForActivity(
            reference.pointer,
            _id_getResourcesForActivity as _$jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getResourcesForApplication = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getResourcesForApplication(
    _$jni.JObject applicationInfo,
  ) {
    return _getResourcesForApplication(
            reference.pointer,
            _id_getResourcesForApplication as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getResourcesForApplication$1 = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Landroid/content/pm/ApplicationInfo;Landroid/content/res/Configuration;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo applicationInfo, android.content.res.Configuration configuration)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getResourcesForApplication$1(
    _$jni.JObject applicationInfo,
    _$jni.JObject configuration,
  ) {
    return _getResourcesForApplication$1(
            reference.pointer,
            _id_getResourcesForApplication$1 as _$jni.JMethodIDPtr,
            applicationInfo.reference.pointer,
            configuration.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getResourcesForApplication$2 = _class.instanceMethodId(
    r'getResourcesForApplication',
    r'(Ljava/lang/String;)Landroid/content/res/Resources;',
  );

  static final _getResourcesForApplication$2 =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract android.content.res.Resources getResourcesForApplication(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getResourcesForApplication$2(
    _$jni.JString string,
  ) {
    return _getResourcesForApplication$2(
            reference.pointer,
            _id_getResourcesForApplication$2 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageArchiveInfo = _class.instanceMethodId(
    r'getPackageArchiveInfo',
    r'(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageArchiveInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageArchiveInfo(
    _$jni.JString string,
    int i,
  ) {
    return _getPackageArchiveInfo(
            reference.pointer,
            _id_getPackageArchiveInfo as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getPackageArchiveInfo$1 = _class.instanceMethodId(
    r'getPackageArchiveInfo',
    r'(Ljava/lang/String;Landroid/content/pm/PackageManager$PackageInfoFlags;)Landroid/content/pm/PackageInfo;',
  );

  static final _getPackageArchiveInfo$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String string, android.content.pm.PackageManager$PackageInfoFlags packageInfoFlags)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageArchiveInfo$1(
    _$jni.JString string,
    PackageManager_PackageInfoFlags packageInfoFlags,
  ) {
    return _getPackageArchiveInfo$1(
            reference.pointer,
            _id_getPackageArchiveInfo$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            packageInfoFlags.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_verifyPendingInstall = _class.instanceMethodId(
    r'verifyPendingInstall',
    r'(II)V',
  );

  static final _verifyPendingInstall = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public abstract void verifyPendingInstall(int i, int i1)`
  void verifyPendingInstall(
    int i,
    int i1,
  ) {
    _verifyPendingInstall(reference.pointer,
            _id_verifyPendingInstall as _$jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_extendVerificationTimeout = _class.instanceMethodId(
    r'extendVerificationTimeout',
    r'(IIJ)V',
  );

  static final _extendVerificationTimeout = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32, _$jni.Int64)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int, int)>();

  /// from: `public abstract void extendVerificationTimeout(int i, int i1, long j)`
  void extendVerificationTimeout(
    int i,
    int i1,
    int j,
  ) {
    _extendVerificationTimeout(reference.pointer,
            _id_extendVerificationTimeout as _$jni.JMethodIDPtr, i, i1, j)
        .check();
  }

  static final _id_setInstallerPackageName = _class.instanceMethodId(
    r'setInstallerPackageName',
    r'(Ljava/lang/String;Ljava/lang/String;)V',
  );

  static final _setInstallerPackageName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void setInstallerPackageName(java.lang.String string, java.lang.String string1)`
  void setInstallerPackageName(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    _setInstallerPackageName(
            reference.pointer,
            _id_setInstallerPackageName as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_getInstallerPackageName = _class.instanceMethodId(
    r'getInstallerPackageName',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _getInstallerPackageName = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract java.lang.String getInstallerPackageName(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getInstallerPackageName(
    _$jni.JString string,
  ) {
    return _getInstallerPackageName(
            reference.pointer,
            _id_getInstallerPackageName as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_getInstallSourceInfo = _class.instanceMethodId(
    r'getInstallSourceInfo',
    r'(Ljava/lang/String;)Landroid/content/pm/InstallSourceInfo;',
  );

  static final _getInstallSourceInfo = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getInstallSourceInfo(
    _$jni.JString string,
  ) {
    return _getInstallSourceInfo(
            reference.pointer,
            _id_getInstallSourceInfo as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_addPackageToPreferred = _class.instanceMethodId(
    r'addPackageToPreferred',
    r'(Ljava/lang/String;)V',
  );

  static final _addPackageToPreferred = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addPackageToPreferred(java.lang.String string)`
  void addPackageToPreferred(
    _$jni.JString string,
  ) {
    _addPackageToPreferred(
            reference.pointer,
            _id_addPackageToPreferred as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_removePackageFromPreferred = _class.instanceMethodId(
    r'removePackageFromPreferred',
    r'(Ljava/lang/String;)V',
  );

  static final _removePackageFromPreferred =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void removePackageFromPreferred(java.lang.String string)`
  void removePackageFromPreferred(
    _$jni.JString string,
  ) {
    _removePackageFromPreferred(
            reference.pointer,
            _id_removePackageFromPreferred as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getPreferredPackages = _class.instanceMethodId(
    r'getPreferredPackages',
    r'(I)Ljava/util/List;',
  );

  static final _getPreferredPackages = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract java.util.List getPreferredPackages(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getPreferredPackages(
    int i,
  ) {
    return _getPreferredPackages(reference.pointer,
            _id_getPreferredPackages as _$jni.JMethodIDPtr, i)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_addPreferredActivity = _class.instanceMethodId(
    r'addPreferredActivity',
    r'(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V',
  );

  static final _addPreferredActivity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void addPreferredActivity(android.content.IntentFilter intentFilter, int i, android.content.ComponentName[] componentNames, android.content.ComponentName componentName)`
  void addPreferredActivity(
    intentfilter_.IntentFilter intentFilter,
    int i,
    _$jni.JArray<_$jni.JObject> componentNames,
    _$jni.JObject componentName,
  ) {
    _addPreferredActivity(
            reference.pointer,
            _id_addPreferredActivity as _$jni.JMethodIDPtr,
            intentFilter.reference.pointer,
            i,
            componentNames.reference.pointer,
            componentName.reference.pointer)
        .check();
  }

  static final _id_clearPackagePreferredActivities = _class.instanceMethodId(
    r'clearPackagePreferredActivities',
    r'(Ljava/lang/String;)V',
  );

  static final _clearPackagePreferredActivities =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void clearPackagePreferredActivities(java.lang.String string)`
  void clearPackagePreferredActivities(
    _$jni.JString string,
  ) {
    _clearPackagePreferredActivities(
            reference.pointer,
            _id_clearPackagePreferredActivities as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getPreferredActivities = _class.instanceMethodId(
    r'getPreferredActivities',
    r'(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I',
  );

  static final _getPreferredActivities = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int getPreferredActivities(java.util.List list, java.util.List list1, java.lang.String string)`
  int getPreferredActivities(
    _$jni.JList<intentfilter_.IntentFilter> list,
    _$jni.JList<_$jni.JObject> list1,
    _$jni.JString string,
  ) {
    return _getPreferredActivities(
            reference.pointer,
            _id_getPreferredActivities as _$jni.JMethodIDPtr,
            list.reference.pointer,
            list1.reference.pointer,
            string.reference.pointer)
        .integer;
  }

  static final _id_setComponentEnabledSetting = _class.instanceMethodId(
    r'setComponentEnabledSetting',
    r'(Landroid/content/ComponentName;II)V',
  );

  static final _setComponentEnabledSetting =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract void setComponentEnabledSetting(android.content.ComponentName componentName, int i, int i1)`
  void setComponentEnabledSetting(
    _$jni.JObject componentName,
    int i,
    int i1,
  ) {
    _setComponentEnabledSetting(
            reference.pointer,
            _id_setComponentEnabledSetting as _$jni.JMethodIDPtr,
            componentName.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_setComponentEnabledSettings = _class.instanceMethodId(
    r'setComponentEnabledSettings',
    r'(Ljava/util/List;)V',
  );

  static final _setComponentEnabledSettings =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setComponentEnabledSettings(java.util.List list)`
  void setComponentEnabledSettings(
    _$jni.JList<PackageManager_ComponentEnabledSetting> list,
  ) {
    _setComponentEnabledSettings(
            reference.pointer,
            _id_setComponentEnabledSettings as _$jni.JMethodIDPtr,
            list.reference.pointer)
        .check();
  }

  static final _id_getComponentEnabledSetting = _class.instanceMethodId(
    r'getComponentEnabledSetting',
    r'(Landroid/content/ComponentName;)I',
  );

  static final _getComponentEnabledSetting =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int getComponentEnabledSetting(android.content.ComponentName componentName)`
  int getComponentEnabledSetting(
    _$jni.JObject componentName,
  ) {
    return _getComponentEnabledSetting(
            reference.pointer,
            _id_getComponentEnabledSetting as _$jni.JMethodIDPtr,
            componentName.reference.pointer)
        .integer;
  }

  static final _id_getSyntheticAppDetailsActivityEnabled =
      _class.instanceMethodId(
    r'getSyntheticAppDetailsActivityEnabled',
    r'(Ljava/lang/String;)Z',
  );

  static final _getSyntheticAppDetailsActivityEnabled =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean getSyntheticAppDetailsActivityEnabled(java.lang.String string)`
  bool getSyntheticAppDetailsActivityEnabled(
    _$jni.JString string,
  ) {
    return _getSyntheticAppDetailsActivityEnabled(
            reference.pointer,
            _id_getSyntheticAppDetailsActivityEnabled as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_setApplicationEnabledSetting = _class.instanceMethodId(
    r'setApplicationEnabledSetting',
    r'(Ljava/lang/String;II)V',
  );

  static final _setApplicationEnabledSetting =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `public abstract void setApplicationEnabledSetting(java.lang.String string, int i, int i1)`
  void setApplicationEnabledSetting(
    _$jni.JString string,
    int i,
    int i1,
  ) {
    _setApplicationEnabledSetting(
            reference.pointer,
            _id_setApplicationEnabledSetting as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_getApplicationEnabledSetting = _class.instanceMethodId(
    r'getApplicationEnabledSetting',
    r'(Ljava/lang/String;)I',
  );

  static final _getApplicationEnabledSetting =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract int getApplicationEnabledSetting(java.lang.String string)`
  int getApplicationEnabledSetting(
    _$jni.JString string,
  ) {
    return _getApplicationEnabledSetting(
            reference.pointer,
            _id_getApplicationEnabledSetting as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_isSafeMode = _class.instanceMethodId(
    r'isSafeMode',
    r'()Z',
  );

  static final _isSafeMode = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean isSafeMode()`
  bool isSafeMode() {
    return _isSafeMode(reference.pointer, _id_isSafeMode as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPackageSuspended = _class.instanceMethodId(
    r'isPackageSuspended',
    r'(Ljava/lang/String;)Z',
  );

  static final _isPackageSuspended = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean isPackageSuspended(java.lang.String string)`
  bool isPackageSuspended(
    _$jni.JString string,
  ) {
    return _isPackageSuspended(
            reference.pointer,
            _id_isPackageSuspended as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_isPackageSuspended$1 = _class.instanceMethodId(
    r'isPackageSuspended',
    r'()Z',
  );

  static final _isPackageSuspended$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isPackageSuspended()`
  bool isPackageSuspended$1() {
    return _isPackageSuspended$1(
            reference.pointer, _id_isPackageSuspended$1 as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSuspendedPackageAppExtras = _class.instanceMethodId(
    r'getSuspendedPackageAppExtras',
    r'()Landroid/os/Bundle;',
  );

  static final _getSuspendedPackageAppExtras =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public android.os.Bundle getSuspendedPackageAppExtras()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getSuspendedPackageAppExtras() {
    return _getSuspendedPackageAppExtras(reference.pointer,
            _id_getSuspendedPackageAppExtras as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setApplicationCategoryHint = _class.instanceMethodId(
    r'setApplicationCategoryHint',
    r'(Ljava/lang/String;I)V',
  );

  static final _setApplicationCategoryHint =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract void setApplicationCategoryHint(java.lang.String string, int i)`
  void setApplicationCategoryHint(
    _$jni.JString string,
    int i,
  ) {
    _setApplicationCategoryHint(
            reference.pointer,
            _id_setApplicationCategoryHint as _$jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .check();
  }

  static final _id_isDeviceUpgrading = _class.instanceMethodId(
    r'isDeviceUpgrading',
    r'()Z',
  );

  static final _isDeviceUpgrading = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDeviceUpgrading()`
  bool isDeviceUpgrading() {
    return _isDeviceUpgrading(
            reference.pointer, _id_isDeviceUpgrading as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPackageInstaller = _class.instanceMethodId(
    r'getPackageInstaller',
    r'()Landroid/content/pm/PackageInstaller;',
  );

  static final _getPackageInstaller = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract android.content.pm.PackageInstaller getPackageInstaller()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getPackageInstaller() {
    return _getPackageInstaller(
            reference.pointer, _id_getPackageInstaller as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_canRequestPackageInstalls = _class.instanceMethodId(
    r'canRequestPackageInstalls',
    r'()Z',
  );

  static final _canRequestPackageInstalls = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract boolean canRequestPackageInstalls()`
  bool canRequestPackageInstalls() {
    return _canRequestPackageInstalls(reference.pointer,
            _id_canRequestPackageInstalls as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_hasSigningCertificate = _class.instanceMethodId(
    r'hasSigningCertificate',
    r'(Ljava/lang/String;[BI)Z',
  );

  static final _hasSigningCertificate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public boolean hasSigningCertificate(java.lang.String string, byte[] bs, int i)`
  bool hasSigningCertificate(
    _$jni.JString string,
    _$jni.JArray<_$jni.jbyte> bs,
    int i,
  ) {
    return _hasSigningCertificate(
            reference.pointer,
            _id_hasSigningCertificate as _$jni.JMethodIDPtr,
            string.reference.pointer,
            bs.reference.pointer,
            i)
        .boolean;
  }

  static final _id_hasSigningCertificate$1 = _class.instanceMethodId(
    r'hasSigningCertificate',
    r'(I[BI)Z',
  );

  static final _hasSigningCertificate$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public boolean hasSigningCertificate(int i, byte[] bs, int i1)`
  bool hasSigningCertificate$1(
    int i,
    _$jni.JArray<_$jni.jbyte> bs,
    int i1,
  ) {
    return _hasSigningCertificate$1(
            reference.pointer,
            _id_hasSigningCertificate$1 as _$jni.JMethodIDPtr,
            i,
            bs.reference.pointer,
            i1)
        .boolean;
  }

  static final _id_requestChecksums = _class.instanceMethodId(
    r'requestChecksums',
    r'(Ljava/lang/String;ZILjava/util/List;Landroid/content/pm/PackageManager$OnChecksumsReadyListener;)V',
  );

  static final _requestChecksums = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestChecksums(java.lang.String string, boolean z, int i, java.util.List list, android.content.pm.PackageManager$OnChecksumsReadyListener onChecksumsReadyListener)`
  void requestChecksums(
    _$jni.JString string,
    bool z,
    int i,
    _$jni.JList<_$jni.JObject> list,
    PackageManager_OnChecksumsReadyListener onChecksumsReadyListener,
  ) {
    _requestChecksums(
            reference.pointer,
            _id_requestChecksums as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            i,
            list.reference.pointer,
            onChecksumsReadyListener.reference.pointer)
        .check();
  }

  static final _id_isAutoRevokeWhitelisted$1 = _class.instanceMethodId(
    r'isAutoRevokeWhitelisted',
    r'()Z',
  );

  static final _isAutoRevokeWhitelisted$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isAutoRevokeWhitelisted()`
  bool isAutoRevokeWhitelisted$1() {
    return _isAutoRevokeWhitelisted$1(reference.pointer,
            _id_isAutoRevokeWhitelisted$1 as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDefaultApplicationIcon = _class.instanceMethodId(
    r'isDefaultApplicationIcon',
    r'(Landroid/graphics/drawable/Drawable;)Z',
  );

  static final _isDefaultApplicationIcon = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable drawable)`
  bool isDefaultApplicationIcon(
    _$jni.JObject drawable,
  ) {
    return _isDefaultApplicationIcon(
            reference.pointer,
            _id_isDefaultApplicationIcon as _$jni.JMethodIDPtr,
            drawable.reference.pointer)
        .boolean;
  }

  static final _id_setMimeGroup = _class.instanceMethodId(
    r'setMimeGroup',
    r'(Ljava/lang/String;Ljava/util/Set;)V',
  );

  static final _setMimeGroup = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setMimeGroup(java.lang.String string, java.util.Set set)`
  void setMimeGroup(
    _$jni.JString string,
    _$jni.JSet<_$jni.JString> set,
  ) {
    _setMimeGroup(reference.pointer, _id_setMimeGroup as _$jni.JMethodIDPtr,
            string.reference.pointer, set.reference.pointer)
        .check();
  }

  static final _id_getMimeGroup = _class.instanceMethodId(
    r'getMimeGroup',
    r'(Ljava/lang/String;)Ljava/util/Set;',
  );

  static final _getMimeGroup = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.Set getMimeGroup(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JSet<_$jni.JString> getMimeGroup(
    _$jni.JString string,
  ) {
    return _getMimeGroup(reference.pointer,
            _id_getMimeGroup as _$jni.JMethodIDPtr, string.reference.pointer)
        .object(const _$jni.JSetType(_$jni.JStringType()));
  }

  static final _id_getProperty = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;Ljava/lang/String;)Landroid/content/pm/PackageManager$Property;',
  );

  static final _getProperty = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.PackageManager$Property getProperty(java.lang.String string, java.lang.String string1)`
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _getProperty(
            reference.pointer,
            _id_getProperty as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $PackageManager_Property$Type());
  }

  static final _id_getProperty$1 = _class.instanceMethodId(
    r'getProperty',
    r'(Ljava/lang/String;Landroid/content/ComponentName;)Landroid/content/pm/PackageManager$Property;',
  );

  static final _getProperty$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.content.pm.PackageManager$Property getProperty(java.lang.String string, android.content.ComponentName componentName)`
  /// The returned object must be released after use, by calling the [release] method.
  PackageManager_Property getProperty$1(
    _$jni.JString string,
    _$jni.JObject componentName,
  ) {
    return _getProperty$1(
            reference.pointer,
            _id_getProperty$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            componentName.reference.pointer)
        .object(const $PackageManager_Property$Type());
  }

  static final _id_queryApplicationProperty = _class.instanceMethodId(
    r'queryApplicationProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryApplicationProperty = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryApplicationProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PackageManager_Property> queryApplicationProperty(
    _$jni.JString string,
  ) {
    return _queryApplicationProperty(
            reference.pointer,
            _id_queryApplicationProperty as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JListType($PackageManager_Property$Type()));
  }

  static final _id_queryActivityProperty = _class.instanceMethodId(
    r'queryActivityProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryActivityProperty = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryActivityProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PackageManager_Property> queryActivityProperty(
    _$jni.JString string,
  ) {
    return _queryActivityProperty(
            reference.pointer,
            _id_queryActivityProperty as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JListType($PackageManager_Property$Type()));
  }

  static final _id_queryProviderProperty = _class.instanceMethodId(
    r'queryProviderProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryProviderProperty = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryProviderProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PackageManager_Property> queryProviderProperty(
    _$jni.JString string,
  ) {
    return _queryProviderProperty(
            reference.pointer,
            _id_queryProviderProperty as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JListType($PackageManager_Property$Type()));
  }

  static final _id_queryReceiverProperty = _class.instanceMethodId(
    r'queryReceiverProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryReceiverProperty = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryReceiverProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PackageManager_Property> queryReceiverProperty(
    _$jni.JString string,
  ) {
    return _queryReceiverProperty(
            reference.pointer,
            _id_queryReceiverProperty as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JListType($PackageManager_Property$Type()));
  }

  static final _id_queryServiceProperty = _class.instanceMethodId(
    r'queryServiceProperty',
    r'(Ljava/lang/String;)Ljava/util/List;',
  );

  static final _queryServiceProperty = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public java.util.List queryServiceProperty(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<PackageManager_Property> queryServiceProperty(
    _$jni.JString string,
  ) {
    return _queryServiceProperty(
            reference.pointer,
            _id_queryServiceProperty as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const _$jni.JListType($PackageManager_Property$Type()));
  }

  static final _id_canPackageQuery = _class.instanceMethodId(
    r'canPackageQuery',
    r'(Ljava/lang/String;Ljava/lang/String;)Z',
  );

  static final _canPackageQuery = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean canPackageQuery(java.lang.String string, java.lang.String string1)`
  bool canPackageQuery(
    _$jni.JString string,
    _$jni.JString string1,
  ) {
    return _canPackageQuery(
            reference.pointer,
            _id_canPackageQuery as _$jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .boolean;
  }

  static final _id_canPackageQuery$1 = _class.instanceMethodId(
    r'canPackageQuery',
    r'(Ljava/lang/String;[Ljava/lang/String;)[Z',
  );

  static final _canPackageQuery$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean[] canPackageQuery(java.lang.String string, java.lang.String[] strings)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jboolean> canPackageQuery$1(
    _$jni.JString string,
    _$jni.JArray<_$jni.JString> strings,
  ) {
    return _canPackageQuery$1(
            reference.pointer,
            _id_canPackageQuery$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            strings.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.jbooleanType()));
  }

  static final _id_relinquishUpdateOwnership = _class.instanceMethodId(
    r'relinquishUpdateOwnership',
    r'(Ljava/lang/String;)V',
  );

  static final _relinquishUpdateOwnership = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void relinquishUpdateOwnership(java.lang.String string)`
  void relinquishUpdateOwnership(
    _$jni.JString string,
  ) {
    _relinquishUpdateOwnership(
            reference.pointer,
            _id_relinquishUpdateOwnership as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }
}

final class $PackageManager$Type extends _$jni.JObjType<PackageManager> {
  @_$jni.internal
  const $PackageManager$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/content/pm/PackageManager;';

  @_$jni.internal
  @_$core.override
  PackageManager fromReference(_$jni.JReference reference) =>
      PackageManager.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($PackageManager$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PackageManager$Type) &&
        other is $PackageManager$Type;
  }
}
