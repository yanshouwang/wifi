// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../DhcpInfo.dart' as dhcpinfo_;

import 'ScanResult.dart' as scanresult_;

import 'WifiConfiguration.dart' as wificonfiguration_;

import 'WifiInfo.dart' as wifiinfo_;

/// from: `android.net.wifi.WifiManager$AddNetworkResult`
class WifiManager_AddNetworkResult extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_AddNetworkResult> $type;

  @_$jni.internal
  WifiManager_AddNetworkResult.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiManager$AddNetworkResult');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_AddNetworkResult$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  /// from: `static public final int STATUS_ADD_PASSPOINT_FAILURE`
  static const STATUS_ADD_PASSPOINT_FAILURE = 3;

  /// from: `static public final int STATUS_ADD_WIFI_CONFIG_FAILURE`
  static const STATUS_ADD_WIFI_CONFIG_FAILURE = 4;

  /// from: `static public final int STATUS_FAILURE_UNKNOWN`
  static const STATUS_FAILURE_UNKNOWN = 1;

  /// from: `static public final int STATUS_FAILURE_UPDATE_NETWORK_KEYS`
  static const STATUS_FAILURE_UPDATE_NETWORK_KEYS = 9;

  /// from: `static public final int STATUS_INVALID_CONFIGURATION`
  static const STATUS_INVALID_CONFIGURATION = 5;

  /// from: `static public final int STATUS_INVALID_CONFIGURATION_ENTERPRISE`
  static const STATUS_INVALID_CONFIGURATION_ENTERPRISE = 10;

  /// from: `static public final int STATUS_NO_PERMISSION`
  static const STATUS_NO_PERMISSION = 2;

  /// from: `static public final int STATUS_NO_PERMISSION_MODIFY_CONFIG`
  static const STATUS_NO_PERMISSION_MODIFY_CONFIG = 6;

  /// from: `static public final int STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION`
  static const STATUS_NO_PERMISSION_MODIFY_MAC_RANDOMIZATION = 8;

  /// from: `static public final int STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING`
  static const STATUS_NO_PERMISSION_MODIFY_PROXY_SETTING = 7;

  /// from: `static public final int STATUS_SUCCESS`
  static const STATUS_SUCCESS = 0;
  static final _id_networkId = _class.instanceFieldId(
    r'networkId',
    r'I',
  );

  /// from: `public final int networkId`
  int get networkId => _id_networkId.get(this, const _$jni.jintType());

  static final _id_statusCode = _class.instanceFieldId(
    r'statusCode',
    r'I',
  );

  /// from: `public final int statusCode`
  int get statusCode => _id_statusCode.get(this, const _$jni.jintType());

  static final _id_new$ = _class.constructorId(
    r'(II)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public void <init>(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiManager_AddNetworkResult(
    int i,
    int i1,
  ) {
    return WifiManager_AddNetworkResult.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr, i, i1)
            .reference);
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $WifiManager_AddNetworkResult$Type
    extends _$jni.JObjType<WifiManager_AddNetworkResult> {
  @_$jni.internal
  const $WifiManager_AddNetworkResult$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager$AddNetworkResult;';

  @_$jni.internal
  @_$core.override
  WifiManager_AddNetworkResult fromReference(_$jni.JReference reference) =>
      WifiManager_AddNetworkResult.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_AddNetworkResult$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_AddNetworkResult$Type) &&
        other is $WifiManager_AddNetworkResult$Type;
  }
}

/// from: `android.net.wifi.WifiManager$InterfaceCreationImpact`
class WifiManager_InterfaceCreationImpact extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_InterfaceCreationImpact> $type;

  @_$jni.internal
  WifiManager_InterfaceCreationImpact.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$InterfaceCreationImpact');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_InterfaceCreationImpact$Type();
  static final _id_new$ = _class.constructorId(
    r'(ILjava/util/Set;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(int i, java.util.Set set)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiManager_InterfaceCreationImpact(
    int i,
    _$jni.JSet<_$jni.JString> set,
  ) {
    return WifiManager_InterfaceCreationImpact.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            i,
            set.reference.pointer)
        .reference);
  }

  static final _id_getInterfaceType = _class.instanceMethodId(
    r'getInterfaceType',
    r'()I',
  );

  static final _getInterfaceType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getInterfaceType()`
  int getInterfaceType() {
    return _getInterfaceType(
            reference.pointer, _id_getInterfaceType as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPackages = _class.instanceMethodId(
    r'getPackages',
    r'()Ljava/util/Set;',
  );

  static final _getPackages = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.Set getPackages()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JSet<_$jni.JString> getPackages() {
    return _getPackages(
            reference.pointer, _id_getPackages as _$jni.JMethodIDPtr)
        .object(const _$jni.JSetType(_$jni.JStringType()));
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }
}

final class $WifiManager_InterfaceCreationImpact$Type
    extends _$jni.JObjType<WifiManager_InterfaceCreationImpact> {
  @_$jni.internal
  const $WifiManager_InterfaceCreationImpact$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$InterfaceCreationImpact;';

  @_$jni.internal
  @_$core.override
  WifiManager_InterfaceCreationImpact fromReference(
          _$jni.JReference reference) =>
      WifiManager_InterfaceCreationImpact.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_InterfaceCreationImpact$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_InterfaceCreationImpact$Type) &&
        other is $WifiManager_InterfaceCreationImpact$Type;
  }
}

/// from: `android.net.wifi.WifiManager$LocalOnlyConnectionFailureListener`
class WifiManager_LocalOnlyConnectionFailureListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_LocalOnlyConnectionFailureListener> $type;

  @_$jni.internal
  WifiManager_LocalOnlyConnectionFailureListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$LocalOnlyConnectionFailureListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_LocalOnlyConnectionFailureListener$Type();
  static final _id_onConnectionFailed = _class.instanceMethodId(
    r'onConnectionFailed',
    r'(Landroid/net/wifi/WifiNetworkSpecifier;I)V',
  );

  static final _onConnectionFailed = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract void onConnectionFailed(android.net.wifi.WifiNetworkSpecifier wifiNetworkSpecifier, int i)`
  void onConnectionFailed(
    _$jni.JObject wifiNetworkSpecifier,
    int i,
  ) {
    _onConnectionFailed(
            reference.pointer,
            _id_onConnectionFailed as _$jni.JMethodIDPtr,
            wifiNetworkSpecifier.reference.pointer,
            i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WifiManager_LocalOnlyConnectionFailureListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onConnectionFailed(Landroid/net/wifi/WifiNetworkSpecifier;I)V') {
        _$impls[$p]!.onConnectionFailed(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WifiManager_LocalOnlyConnectionFailureListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.net.wifi.WifiManager$LocalOnlyConnectionFailureListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onConnectionFailed$async)
          r'onConnectionFailed(Landroid/net/wifi/WifiNetworkSpecifier;I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WifiManager_LocalOnlyConnectionFailureListener.implement(
    $WifiManager_LocalOnlyConnectionFailureListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WifiManager_LocalOnlyConnectionFailureListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WifiManager_LocalOnlyConnectionFailureListener {
  factory $WifiManager_LocalOnlyConnectionFailureListener({
    required void Function(_$jni.JObject wifiNetworkSpecifier, int i)
        onConnectionFailed,
    bool onConnectionFailed$async,
  }) = _$WifiManager_LocalOnlyConnectionFailureListener;

  void onConnectionFailed(_$jni.JObject wifiNetworkSpecifier, int i);
  bool get onConnectionFailed$async => false;
}

final class _$WifiManager_LocalOnlyConnectionFailureListener
    with $WifiManager_LocalOnlyConnectionFailureListener {
  _$WifiManager_LocalOnlyConnectionFailureListener({
    required void Function(_$jni.JObject wifiNetworkSpecifier, int i)
        onConnectionFailed,
    this.onConnectionFailed$async = false,
  }) : _onConnectionFailed = onConnectionFailed;

  final void Function(_$jni.JObject wifiNetworkSpecifier, int i)
      _onConnectionFailed;
  final bool onConnectionFailed$async;

  void onConnectionFailed(_$jni.JObject wifiNetworkSpecifier, int i) {
    return _onConnectionFailed(wifiNetworkSpecifier, i);
  }
}

final class $WifiManager_LocalOnlyConnectionFailureListener$Type
    extends _$jni.JObjType<WifiManager_LocalOnlyConnectionFailureListener> {
  @_$jni.internal
  const $WifiManager_LocalOnlyConnectionFailureListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$LocalOnlyConnectionFailureListener;';

  @_$jni.internal
  @_$core.override
  WifiManager_LocalOnlyConnectionFailureListener fromReference(
          _$jni.JReference reference) =>
      WifiManager_LocalOnlyConnectionFailureListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($WifiManager_LocalOnlyConnectionFailureListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($WifiManager_LocalOnlyConnectionFailureListener$Type) &&
        other is $WifiManager_LocalOnlyConnectionFailureListener$Type;
  }
}

/// from: `android.net.wifi.WifiManager$LocalOnlyHotspotCallback`
class WifiManager_LocalOnlyHotspotCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_LocalOnlyHotspotCallback> $type;

  @_$jni.internal
  WifiManager_LocalOnlyHotspotCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$LocalOnlyHotspotCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_LocalOnlyHotspotCallback$Type();

  /// from: `static public final int ERROR_GENERIC`
  static const ERROR_GENERIC = 2;

  /// from: `static public final int ERROR_INCOMPATIBLE_MODE`
  static const ERROR_INCOMPATIBLE_MODE = 3;

  /// from: `static public final int ERROR_NO_CHANNEL`
  static const ERROR_NO_CHANNEL = 1;

  /// from: `static public final int ERROR_TETHERING_DISALLOWED`
  static const ERROR_TETHERING_DISALLOWED = 4;
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiManager_LocalOnlyHotspotCallback() {
    return WifiManager_LocalOnlyHotspotCallback.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_onStarted = _class.instanceMethodId(
    r'onStarted',
    r'(Landroid/net/wifi/WifiManager$LocalOnlyHotspotReservation;)V',
  );

  static final _onStarted = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void onStarted(android.net.wifi.WifiManager$LocalOnlyHotspotReservation localOnlyHotspotReservation)`
  void onStarted(
    WifiManager_LocalOnlyHotspotReservation localOnlyHotspotReservation,
  ) {
    _onStarted(reference.pointer, _id_onStarted as _$jni.JMethodIDPtr,
            localOnlyHotspotReservation.reference.pointer)
        .check();
  }

  static final _id_onStopped = _class.instanceMethodId(
    r'onStopped',
    r'()V',
  );

  static final _onStopped = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void onStopped()`
  void onStopped() {
    _onStopped(reference.pointer, _id_onStopped as _$jni.JMethodIDPtr).check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(I)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void onFailed(int i)`
  void onFailed(
    int i,
  ) {
    _onFailed(reference.pointer, _id_onFailed as _$jni.JMethodIDPtr, i).check();
  }
}

final class $WifiManager_LocalOnlyHotspotCallback$Type
    extends _$jni.JObjType<WifiManager_LocalOnlyHotspotCallback> {
  @_$jni.internal
  const $WifiManager_LocalOnlyHotspotCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$LocalOnlyHotspotCallback;';

  @_$jni.internal
  @_$core.override
  WifiManager_LocalOnlyHotspotCallback fromReference(
          _$jni.JReference reference) =>
      WifiManager_LocalOnlyHotspotCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_LocalOnlyHotspotCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_LocalOnlyHotspotCallback$Type) &&
        other is $WifiManager_LocalOnlyHotspotCallback$Type;
  }
}

/// from: `android.net.wifi.WifiManager$LocalOnlyHotspotReservation`
class WifiManager_LocalOnlyHotspotReservation extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_LocalOnlyHotspotReservation> $type;

  @_$jni.internal
  WifiManager_LocalOnlyHotspotReservation.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$LocalOnlyHotspotReservation');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_LocalOnlyHotspotReservation$Type();
  static final _id_getWifiConfiguration = _class.instanceMethodId(
    r'getWifiConfiguration',
    r'()Landroid/net/wifi/WifiConfiguration;',
  );

  static final _getWifiConfiguration = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.WifiConfiguration getWifiConfiguration()`
  /// The returned object must be released after use, by calling the [release] method.
  wificonfiguration_.WifiConfiguration getWifiConfiguration() {
    return _getWifiConfiguration(
            reference.pointer, _id_getWifiConfiguration as _$jni.JMethodIDPtr)
        .object(const wificonfiguration_.$WifiConfiguration$Type());
  }

  static final _id_getSoftApConfiguration = _class.instanceMethodId(
    r'getSoftApConfiguration',
    r'()Landroid/net/wifi/SoftApConfiguration;',
  );

  static final _getSoftApConfiguration = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.SoftApConfiguration getSoftApConfiguration()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getSoftApConfiguration() {
    return _getSoftApConfiguration(
            reference.pointer, _id_getSoftApConfiguration as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_close = _class.instanceMethodId(
    r'close',
    r'()V',
  );

  static final _close = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void close()`
  void close() {
    _close(reference.pointer, _id_close as _$jni.JMethodIDPtr).check();
  }
}

final class $WifiManager_LocalOnlyHotspotReservation$Type
    extends _$jni.JObjType<WifiManager_LocalOnlyHotspotReservation> {
  @_$jni.internal
  const $WifiManager_LocalOnlyHotspotReservation$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$LocalOnlyHotspotReservation;';

  @_$jni.internal
  @_$core.override
  WifiManager_LocalOnlyHotspotReservation fromReference(
          _$jni.JReference reference) =>
      WifiManager_LocalOnlyHotspotReservation.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_LocalOnlyHotspotReservation$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($WifiManager_LocalOnlyHotspotReservation$Type) &&
        other is $WifiManager_LocalOnlyHotspotReservation$Type;
  }
}

/// from: `android.net.wifi.WifiManager$MulticastLock`
class WifiManager_MulticastLock extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_MulticastLock> $type;

  @_$jni.internal
  WifiManager_MulticastLock.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiManager$MulticastLock');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_MulticastLock$Type();
  static final _id_acquire = _class.instanceMethodId(
    r'acquire',
    r'()V',
  );

  static final _acquire = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void acquire()`
  void acquire() {
    _acquire(reference.pointer, _id_acquire as _$jni.JMethodIDPtr).check();
  }

  static final _id_release$1 = _class.instanceMethodId(
    r'release',
    r'()V',
  );

  static final _release$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void release()`
  void release$1() {
    _release$1(reference.pointer, _id_release$1 as _$jni.JMethodIDPtr).check();
  }

  static final _id_setReferenceCounted = _class.instanceMethodId(
    r'setReferenceCounted',
    r'(Z)V',
  );

  static final _setReferenceCounted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setReferenceCounted(boolean z)`
  void setReferenceCounted(
    bool z,
  ) {
    _setReferenceCounted(reference.pointer,
            _id_setReferenceCounted as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isHeld = _class.instanceMethodId(
    r'isHeld',
    r'()Z',
  );

  static final _isHeld = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isHeld()`
  bool isHeld() {
    return _isHeld(reference.pointer, _id_isHeld as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $WifiManager_MulticastLock$Type
    extends _$jni.JObjType<WifiManager_MulticastLock> {
  @_$jni.internal
  const $WifiManager_MulticastLock$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager$MulticastLock;';

  @_$jni.internal
  @_$core.override
  WifiManager_MulticastLock fromReference(_$jni.JReference reference) =>
      WifiManager_MulticastLock.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_MulticastLock$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_MulticastLock$Type) &&
        other is $WifiManager_MulticastLock$Type;
  }
}

/// from: `android.net.wifi.WifiManager$ScanResultsCallback`
class WifiManager_ScanResultsCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_ScanResultsCallback> $type;

  @_$jni.internal
  WifiManager_ScanResultsCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiManager$ScanResultsCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_ScanResultsCallback$Type();
  static final _id_onScanResultsAvailable = _class.instanceMethodId(
    r'onScanResultsAvailable',
    r'()V',
  );

  static final _onScanResultsAvailable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onScanResultsAvailable()`
  void onScanResultsAvailable() {
    _onScanResultsAvailable(
            reference.pointer, _id_onScanResultsAvailable as _$jni.JMethodIDPtr)
        .check();
  }
}

final class $WifiManager_ScanResultsCallback$Type
    extends _$jni.JObjType<WifiManager_ScanResultsCallback> {
  @_$jni.internal
  const $WifiManager_ScanResultsCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager$ScanResultsCallback;';

  @_$jni.internal
  @_$core.override
  WifiManager_ScanResultsCallback fromReference(_$jni.JReference reference) =>
      WifiManager_ScanResultsCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_ScanResultsCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_ScanResultsCallback$Type) &&
        other is $WifiManager_ScanResultsCallback$Type;
  }
}

/// from: `android.net.wifi.WifiManager$SubsystemRestartTrackingCallback`
class WifiManager_SubsystemRestartTrackingCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_SubsystemRestartTrackingCallback> $type;

  @_$jni.internal
  WifiManager_SubsystemRestartTrackingCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$SubsystemRestartTrackingCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_SubsystemRestartTrackingCallback$Type();
  static final _id_onSubsystemRestarting = _class.instanceMethodId(
    r'onSubsystemRestarting',
    r'()V',
  );

  static final _onSubsystemRestarting = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSubsystemRestarting()`
  void onSubsystemRestarting() {
    _onSubsystemRestarting(
            reference.pointer, _id_onSubsystemRestarting as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onSubsystemRestarted = _class.instanceMethodId(
    r'onSubsystemRestarted',
    r'()V',
  );

  static final _onSubsystemRestarted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSubsystemRestarted()`
  void onSubsystemRestarted() {
    _onSubsystemRestarted(
            reference.pointer, _id_onSubsystemRestarted as _$jni.JMethodIDPtr)
        .check();
  }
}

final class $WifiManager_SubsystemRestartTrackingCallback$Type
    extends _$jni.JObjType<WifiManager_SubsystemRestartTrackingCallback> {
  @_$jni.internal
  const $WifiManager_SubsystemRestartTrackingCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$SubsystemRestartTrackingCallback;';

  @_$jni.internal
  @_$core.override
  WifiManager_SubsystemRestartTrackingCallback fromReference(
          _$jni.JReference reference) =>
      WifiManager_SubsystemRestartTrackingCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($WifiManager_SubsystemRestartTrackingCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($WifiManager_SubsystemRestartTrackingCallback$Type) &&
        other is $WifiManager_SubsystemRestartTrackingCallback$Type;
  }
}

/// from: `android.net.wifi.WifiManager$SuggestionConnectionStatusListener`
class WifiManager_SuggestionConnectionStatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_SuggestionConnectionStatusListener> $type;

  @_$jni.internal
  WifiManager_SuggestionConnectionStatusListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$SuggestionConnectionStatusListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_SuggestionConnectionStatusListener$Type();
  static final _id_onConnectionStatus = _class.instanceMethodId(
    r'onConnectionStatus',
    r'(Landroid/net/wifi/WifiNetworkSuggestion;I)V',
  );

  static final _onConnectionStatus = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public abstract void onConnectionStatus(android.net.wifi.WifiNetworkSuggestion wifiNetworkSuggestion, int i)`
  void onConnectionStatus(
    _$jni.JObject wifiNetworkSuggestion,
    int i,
  ) {
    _onConnectionStatus(
            reference.pointer,
            _id_onConnectionStatus as _$jni.JMethodIDPtr,
            wifiNetworkSuggestion.reference.pointer,
            i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $WifiManager_SuggestionConnectionStatusListener>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onConnectionStatus(Landroid/net/wifi/WifiNetworkSuggestion;I)V') {
        _$impls[$p]!.onConnectionStatus(
          $a[0].as(const _$jni.JObjectType(), releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WifiManager_SuggestionConnectionStatusListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.net.wifi.WifiManager$SuggestionConnectionStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onConnectionStatus$async)
          r'onConnectionStatus(Landroid/net/wifi/WifiNetworkSuggestion;I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WifiManager_SuggestionConnectionStatusListener.implement(
    $WifiManager_SuggestionConnectionStatusListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WifiManager_SuggestionConnectionStatusListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WifiManager_SuggestionConnectionStatusListener {
  factory $WifiManager_SuggestionConnectionStatusListener({
    required void Function(_$jni.JObject wifiNetworkSuggestion, int i)
        onConnectionStatus,
    bool onConnectionStatus$async,
  }) = _$WifiManager_SuggestionConnectionStatusListener;

  void onConnectionStatus(_$jni.JObject wifiNetworkSuggestion, int i);
  bool get onConnectionStatus$async => false;
}

final class _$WifiManager_SuggestionConnectionStatusListener
    with $WifiManager_SuggestionConnectionStatusListener {
  _$WifiManager_SuggestionConnectionStatusListener({
    required void Function(_$jni.JObject wifiNetworkSuggestion, int i)
        onConnectionStatus,
    this.onConnectionStatus$async = false,
  }) : _onConnectionStatus = onConnectionStatus;

  final void Function(_$jni.JObject wifiNetworkSuggestion, int i)
      _onConnectionStatus;
  final bool onConnectionStatus$async;

  void onConnectionStatus(_$jni.JObject wifiNetworkSuggestion, int i) {
    return _onConnectionStatus(wifiNetworkSuggestion, i);
  }
}

final class $WifiManager_SuggestionConnectionStatusListener$Type
    extends _$jni.JObjType<WifiManager_SuggestionConnectionStatusListener> {
  @_$jni.internal
  const $WifiManager_SuggestionConnectionStatusListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$SuggestionConnectionStatusListener;';

  @_$jni.internal
  @_$core.override
  WifiManager_SuggestionConnectionStatusListener fromReference(
          _$jni.JReference reference) =>
      WifiManager_SuggestionConnectionStatusListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($WifiManager_SuggestionConnectionStatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($WifiManager_SuggestionConnectionStatusListener$Type) &&
        other is $WifiManager_SuggestionConnectionStatusListener$Type;
  }
}

/// from: `android.net.wifi.WifiManager$SuggestionUserApprovalStatusListener`
class WifiManager_SuggestionUserApprovalStatusListener extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_SuggestionUserApprovalStatusListener> $type;

  @_$jni.internal
  WifiManager_SuggestionUserApprovalStatusListener.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiManager$SuggestionUserApprovalStatusListener');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_SuggestionUserApprovalStatusListener$Type();
  static final _id_onUserApprovalStatusChange = _class.instanceMethodId(
    r'onUserApprovalStatusChange',
    r'(I)V',
  );

  static final _onUserApprovalStatusChange =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onUserApprovalStatusChange(int i)`
  void onUserApprovalStatusChange(
    int i,
  ) {
    _onUserApprovalStatusChange(reference.pointer,
            _id_onUserApprovalStatusChange as _$jni.JMethodIDPtr, i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $WifiManager_SuggestionUserApprovalStatusListener> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onUserApprovalStatusChange(I)V') {
        _$impls[$p]!.onUserApprovalStatusChange(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $WifiManager_SuggestionUserApprovalStatusListener $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.net.wifi.WifiManager$SuggestionUserApprovalStatusListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onUserApprovalStatusChange$async)
          r'onUserApprovalStatusChange(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory WifiManager_SuggestionUserApprovalStatusListener.implement(
    $WifiManager_SuggestionUserApprovalStatusListener $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return WifiManager_SuggestionUserApprovalStatusListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $WifiManager_SuggestionUserApprovalStatusListener {
  factory $WifiManager_SuggestionUserApprovalStatusListener({
    required void Function(int i) onUserApprovalStatusChange,
    bool onUserApprovalStatusChange$async,
  }) = _$WifiManager_SuggestionUserApprovalStatusListener;

  void onUserApprovalStatusChange(int i);
  bool get onUserApprovalStatusChange$async => false;
}

final class _$WifiManager_SuggestionUserApprovalStatusListener
    with $WifiManager_SuggestionUserApprovalStatusListener {
  _$WifiManager_SuggestionUserApprovalStatusListener({
    required void Function(int i) onUserApprovalStatusChange,
    this.onUserApprovalStatusChange$async = false,
  }) : _onUserApprovalStatusChange = onUserApprovalStatusChange;

  final void Function(int i) _onUserApprovalStatusChange;
  final bool onUserApprovalStatusChange$async;

  void onUserApprovalStatusChange(int i) {
    return _onUserApprovalStatusChange(i);
  }
}

final class $WifiManager_SuggestionUserApprovalStatusListener$Type
    extends _$jni.JObjType<WifiManager_SuggestionUserApprovalStatusListener> {
  @_$jni.internal
  const $WifiManager_SuggestionUserApprovalStatusListener$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiManager$SuggestionUserApprovalStatusListener;';

  @_$jni.internal
  @_$core.override
  WifiManager_SuggestionUserApprovalStatusListener fromReference(
          _$jni.JReference reference) =>
      WifiManager_SuggestionUserApprovalStatusListener.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($WifiManager_SuggestionUserApprovalStatusListener$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($WifiManager_SuggestionUserApprovalStatusListener$Type) &&
        other is $WifiManager_SuggestionUserApprovalStatusListener$Type;
  }
}

/// from: `android.net.wifi.WifiManager$WifiLock`
class WifiManager_WifiLock extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_WifiLock> $type;

  @_$jni.internal
  WifiManager_WifiLock.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiManager$WifiLock');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_WifiLock$Type();
  static final _id_acquire = _class.instanceMethodId(
    r'acquire',
    r'()V',
  );

  static final _acquire = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void acquire()`
  void acquire() {
    _acquire(reference.pointer, _id_acquire as _$jni.JMethodIDPtr).check();
  }

  static final _id_release$1 = _class.instanceMethodId(
    r'release',
    r'()V',
  );

  static final _release$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void release()`
  void release$1() {
    _release$1(reference.pointer, _id_release$1 as _$jni.JMethodIDPtr).check();
  }

  static final _id_setReferenceCounted = _class.instanceMethodId(
    r'setReferenceCounted',
    r'(Z)V',
  );

  static final _setReferenceCounted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setReferenceCounted(boolean z)`
  void setReferenceCounted(
    bool z,
  ) {
    _setReferenceCounted(reference.pointer,
            _id_setReferenceCounted as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isHeld = _class.instanceMethodId(
    r'isHeld',
    r'()Z',
  );

  static final _isHeld = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isHeld()`
  bool isHeld() {
    return _isHeld(reference.pointer, _id_isHeld as _$jni.JMethodIDPtr).boolean;
  }

  static final _id_setWorkSource = _class.instanceMethodId(
    r'setWorkSource',
    r'(Landroid/os/WorkSource;)V',
  );

  static final _setWorkSource = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setWorkSource(android.os.WorkSource workSource)`
  void setWorkSource(
    _$jni.JObject workSource,
  ) {
    _setWorkSource(reference.pointer, _id_setWorkSource as _$jni.JMethodIDPtr,
            workSource.reference.pointer)
        .check();
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }
}

final class $WifiManager_WifiLock$Type
    extends _$jni.JObjType<WifiManager_WifiLock> {
  @_$jni.internal
  const $WifiManager_WifiLock$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager$WifiLock;';

  @_$jni.internal
  @_$core.override
  WifiManager_WifiLock fromReference(_$jni.JReference reference) =>
      WifiManager_WifiLock.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_WifiLock$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_WifiLock$Type) &&
        other is $WifiManager_WifiLock$Type;
  }
}

/// from: `android.net.wifi.WifiManager$WpsCallback`
class WifiManager_WpsCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager_WpsCallback> $type;

  @_$jni.internal
  WifiManager_WpsCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiManager$WpsCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager_WpsCallback$Type();
  static final _id_onStarted = _class.instanceMethodId(
    r'onStarted',
    r'(Ljava/lang/String;)V',
  );

  static final _onStarted = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onStarted(java.lang.String string)`
  void onStarted(
    _$jni.JString string,
  ) {
    _onStarted(reference.pointer, _id_onStarted as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_onSucceeded = _class.instanceMethodId(
    r'onSucceeded',
    r'()V',
  );

  static final _onSucceeded = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract void onSucceeded()`
  void onSucceeded() {
    _onSucceeded(reference.pointer, _id_onSucceeded as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_onFailed = _class.instanceMethodId(
    r'onFailed',
    r'(I)V',
  );

  static final _onFailed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void onFailed(int i)`
  void onFailed(
    int i,
  ) {
    _onFailed(reference.pointer, _id_onFailed as _$jni.JMethodIDPtr, i).check();
  }
}

final class $WifiManager_WpsCallback$Type
    extends _$jni.JObjType<WifiManager_WpsCallback> {
  @_$jni.internal
  const $WifiManager_WpsCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager$WpsCallback;';

  @_$jni.internal
  @_$core.override
  WifiManager_WpsCallback fromReference(_$jni.JReference reference) =>
      WifiManager_WpsCallback.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager_WpsCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager_WpsCallback$Type) &&
        other is $WifiManager_WpsCallback$Type;
  }
}

/// from: `android.net.wifi.WifiManager`
class WifiManager extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiManager> $type;

  @_$jni.internal
  WifiManager.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/net/wifi/WifiManager');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiManager$Type();
  static final _id_ACTION_PICK_WIFI_NETWORK = _class.staticFieldId(
    r'ACTION_PICK_WIFI_NETWORK',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_PICK_WIFI_NETWORK`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get ACTION_PICK_WIFI_NETWORK =>
      _id_ACTION_PICK_WIFI_NETWORK.get(_class, const _$jni.JStringType());

  /// from: `static public final int ACTION_REMOVE_SUGGESTION_DISCONNECT`
  static const ACTION_REMOVE_SUGGESTION_DISCONNECT = 2;

  /// from: `static public final int ACTION_REMOVE_SUGGESTION_LINGER`
  static const ACTION_REMOVE_SUGGESTION_LINGER = 1;
  static final _id_ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE = _class.staticFieldId(
    r'ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE =>
      _id_ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE.get(
          _class, const _$jni.JStringType());

  static final _id_ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION =
      _class.staticFieldId(
    r'ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION =>
      _id_ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION.get(
          _class, const _$jni.JStringType());

  static final _id_ACTION_WIFI_SCAN_AVAILABILITY_CHANGED = _class.staticFieldId(
    r'ACTION_WIFI_SCAN_AVAILABILITY_CHANGED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String ACTION_WIFI_SCAN_AVAILABILITY_CHANGED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get ACTION_WIFI_SCAN_AVAILABILITY_CHANGED =>
      _id_ACTION_WIFI_SCAN_AVAILABILITY_CHANGED.get(
          _class, const _$jni.JStringType());

  static final _id_CHANNEL_DATA_KEY_FREQUENCY_MHZ = _class.staticFieldId(
    r'CHANNEL_DATA_KEY_FREQUENCY_MHZ',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANNEL_DATA_KEY_FREQUENCY_MHZ`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get CHANNEL_DATA_KEY_FREQUENCY_MHZ =>
      _id_CHANNEL_DATA_KEY_FREQUENCY_MHZ.get(_class, const _$jni.JStringType());

  static final _id_CHANNEL_DATA_KEY_NUM_AP = _class.staticFieldId(
    r'CHANNEL_DATA_KEY_NUM_AP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String CHANNEL_DATA_KEY_NUM_AP`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get CHANNEL_DATA_KEY_NUM_AP =>
      _id_CHANNEL_DATA_KEY_NUM_AP.get(_class, const _$jni.JStringType());

  /// from: `static public final int ERROR_AUTHENTICATING`
  static const ERROR_AUTHENTICATING = 1;
  static final _id_EXTRA_BSSID = _class.staticFieldId(
    r'EXTRA_BSSID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_BSSID`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_BSSID =>
      _id_EXTRA_BSSID.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_NETWORK_INFO = _class.staticFieldId(
    r'EXTRA_NETWORK_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NETWORK_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_NETWORK_INFO =>
      _id_EXTRA_NETWORK_INFO.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_NETWORK_SUGGESTION = _class.staticFieldId(
    r'EXTRA_NETWORK_SUGGESTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NETWORK_SUGGESTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_NETWORK_SUGGESTION =>
      _id_EXTRA_NETWORK_SUGGESTION.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_NEW_RSSI = _class.staticFieldId(
    r'EXTRA_NEW_RSSI',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NEW_RSSI`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_NEW_RSSI =>
      _id_EXTRA_NEW_RSSI.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_NEW_STATE = _class.staticFieldId(
    r'EXTRA_NEW_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_NEW_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_NEW_STATE =>
      _id_EXTRA_NEW_STATE.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_PREVIOUS_WIFI_STATE = _class.staticFieldId(
    r'EXTRA_PREVIOUS_WIFI_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_PREVIOUS_WIFI_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_PREVIOUS_WIFI_STATE =>
      _id_EXTRA_PREVIOUS_WIFI_STATE.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_RESULTS_UPDATED = _class.staticFieldId(
    r'EXTRA_RESULTS_UPDATED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_RESULTS_UPDATED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_RESULTS_UPDATED =>
      _id_EXTRA_RESULTS_UPDATED.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_SCAN_AVAILABLE = _class.staticFieldId(
    r'EXTRA_SCAN_AVAILABLE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SCAN_AVAILABLE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_SCAN_AVAILABLE =>
      _id_EXTRA_SCAN_AVAILABLE.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_SUPPLICANT_CONNECTED = _class.staticFieldId(
    r'EXTRA_SUPPLICANT_CONNECTED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUPPLICANT_CONNECTED`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_SUPPLICANT_CONNECTED =>
      _id_EXTRA_SUPPLICANT_CONNECTED.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_SUPPLICANT_ERROR = _class.staticFieldId(
    r'EXTRA_SUPPLICANT_ERROR',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_SUPPLICANT_ERROR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_SUPPLICANT_ERROR =>
      _id_EXTRA_SUPPLICANT_ERROR.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_WIFI_INFO = _class.staticFieldId(
    r'EXTRA_WIFI_INFO',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_WIFI_INFO`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_WIFI_INFO =>
      _id_EXTRA_WIFI_INFO.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_WIFI_STATE = _class.staticFieldId(
    r'EXTRA_WIFI_STATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_WIFI_STATE`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_WIFI_STATE =>
      _id_EXTRA_WIFI_STATE.get(_class, const _$jni.JStringType());

  static final _id_NETWORK_IDS_CHANGED_ACTION = _class.staticFieldId(
    r'NETWORK_IDS_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_IDS_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get NETWORK_IDS_CHANGED_ACTION =>
      _id_NETWORK_IDS_CHANGED_ACTION.get(_class, const _$jni.JStringType());

  static final _id_NETWORK_STATE_CHANGED_ACTION = _class.staticFieldId(
    r'NETWORK_STATE_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String NETWORK_STATE_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get NETWORK_STATE_CHANGED_ACTION =>
      _id_NETWORK_STATE_CHANGED_ACTION.get(_class, const _$jni.JStringType());

  static final _id_RSSI_CHANGED_ACTION = _class.staticFieldId(
    r'RSSI_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RSSI_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get RSSI_CHANGED_ACTION =>
      _id_RSSI_CHANGED_ACTION.get(_class, const _$jni.JStringType());

  static final _id_SCAN_RESULTS_AVAILABLE_ACTION = _class.staticFieldId(
    r'SCAN_RESULTS_AVAILABLE_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SCAN_RESULTS_AVAILABLE_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SCAN_RESULTS_AVAILABLE_ACTION =>
      _id_SCAN_RESULTS_AVAILABLE_ACTION.get(_class, const _$jni.JStringType());

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_ASSOCIATION = 1;

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_AUTHENTICATION = 2;

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_IP_PROVISIONING = 3;

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NOT_FOUND = 4;

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_NO_RESPONSE = 5;

  /// from: `static public final int STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN`
  static const STATUS_LOCAL_ONLY_CONNECTION_FAILURE_UNKNOWN = 0;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE = 3;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP = 4;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_INVALID = 7;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_NOT_ALLOWED = 6;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED = 2;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL = 1;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID = 5;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN`
  static const STATUS_NETWORK_SUGGESTIONS_ERROR_RESTRICTED_BY_ADMIN = 8;

  /// from: `static public final int STATUS_NETWORK_SUGGESTIONS_SUCCESS`
  static const STATUS_NETWORK_SUGGESTIONS_SUCCESS = 0;

  /// from: `static public final int STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE`
  static const STATUS_SUGGESTION_APPROVAL_APPROVED_BY_CARRIER_PRIVILEGE = 4;

  /// from: `static public final int STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER`
  static const STATUS_SUGGESTION_APPROVAL_APPROVED_BY_USER = 2;

  /// from: `static public final int STATUS_SUGGESTION_APPROVAL_PENDING`
  static const STATUS_SUGGESTION_APPROVAL_PENDING = 1;

  /// from: `static public final int STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER`
  static const STATUS_SUGGESTION_APPROVAL_REJECTED_BY_USER = 3;

  /// from: `static public final int STATUS_SUGGESTION_APPROVAL_UNKNOWN`
  static const STATUS_SUGGESTION_APPROVAL_UNKNOWN = 0;

  /// from: `static public final int STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION`
  static const STATUS_SUGGESTION_CONNECTION_FAILURE_ASSOCIATION = 1;

  /// from: `static public final int STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION`
  static const STATUS_SUGGESTION_CONNECTION_FAILURE_AUTHENTICATION = 2;

  /// from: `static public final int STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING`
  static const STATUS_SUGGESTION_CONNECTION_FAILURE_IP_PROVISIONING = 3;

  /// from: `static public final int STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN`
  static const STATUS_SUGGESTION_CONNECTION_FAILURE_UNKNOWN = 0;
  static final _id_SUPPLICANT_CONNECTION_CHANGE_ACTION = _class.staticFieldId(
    r'SUPPLICANT_CONNECTION_CHANGE_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SUPPLICANT_CONNECTION_CHANGE_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SUPPLICANT_CONNECTION_CHANGE_ACTION =>
      _id_SUPPLICANT_CONNECTION_CHANGE_ACTION.get(
          _class, const _$jni.JStringType());

  static final _id_SUPPLICANT_STATE_CHANGED_ACTION = _class.staticFieldId(
    r'SUPPLICANT_STATE_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SUPPLICANT_STATE_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get SUPPLICANT_STATE_CHANGED_ACTION =>
      _id_SUPPLICANT_STATE_CHANGED_ACTION.get(
          _class, const _$jni.JStringType());

  static final _id_UNKNOWN_SSID = _class.staticFieldId(
    r'UNKNOWN_SSID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String UNKNOWN_SSID`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get UNKNOWN_SSID =>
      _id_UNKNOWN_SSID.get(_class, const _$jni.JStringType());

  /// from: `static public final int WIFI_INTERFACE_TYPE_AP`
  static const WIFI_INTERFACE_TYPE_AP = 1;

  /// from: `static public final int WIFI_INTERFACE_TYPE_AWARE`
  static const WIFI_INTERFACE_TYPE_AWARE = 2;

  /// from: `static public final int WIFI_INTERFACE_TYPE_DIRECT`
  static const WIFI_INTERFACE_TYPE_DIRECT = 3;

  /// from: `static public final int WIFI_INTERFACE_TYPE_STA`
  static const WIFI_INTERFACE_TYPE_STA = 0;

  /// from: `static public final int WIFI_MODE_FULL`
  static const WIFI_MODE_FULL = 1;

  /// from: `static public final int WIFI_MODE_FULL_HIGH_PERF`
  static const WIFI_MODE_FULL_HIGH_PERF = 3;

  /// from: `static public final int WIFI_MODE_FULL_LOW_LATENCY`
  static const WIFI_MODE_FULL_LOW_LATENCY = 4;

  /// from: `static public final int WIFI_MODE_SCAN_ONLY`
  static const WIFI_MODE_SCAN_ONLY = 2;

  /// from: `static public final int WIFI_MULTI_INTERNET_MODE_DBS_AP`
  static const WIFI_MULTI_INTERNET_MODE_DBS_AP = 1;

  /// from: `static public final int WIFI_MULTI_INTERNET_MODE_DISABLED`
  static const WIFI_MULTI_INTERNET_MODE_DISABLED = 0;

  /// from: `static public final int WIFI_MULTI_INTERNET_MODE_MULTI_AP`
  static const WIFI_MULTI_INTERNET_MODE_MULTI_AP = 2;
  static final _id_WIFI_STATE_CHANGED_ACTION = _class.staticFieldId(
    r'WIFI_STATE_CHANGED_ACTION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WIFI_STATE_CHANGED_ACTION`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get WIFI_STATE_CHANGED_ACTION =>
      _id_WIFI_STATE_CHANGED_ACTION.get(_class, const _$jni.JStringType());

  /// from: `static public final int WIFI_STATE_DISABLED`
  static const WIFI_STATE_DISABLED = 1;

  /// from: `static public final int WIFI_STATE_DISABLING`
  static const WIFI_STATE_DISABLING = 0;

  /// from: `static public final int WIFI_STATE_ENABLED`
  static const WIFI_STATE_ENABLED = 3;

  /// from: `static public final int WIFI_STATE_ENABLING`
  static const WIFI_STATE_ENABLING = 2;

  /// from: `static public final int WIFI_STATE_UNKNOWN`
  static const WIFI_STATE_UNKNOWN = 4;

  /// from: `static public final int WPS_AUTH_FAILURE`
  static const WPS_AUTH_FAILURE = 6;

  /// from: `static public final int WPS_OVERLAP_ERROR`
  static const WPS_OVERLAP_ERROR = 3;

  /// from: `static public final int WPS_TIMED_OUT`
  static const WPS_TIMED_OUT = 7;

  /// from: `static public final int WPS_TKIP_ONLY_PROHIBITED`
  static const WPS_TKIP_ONLY_PROHIBITED = 5;

  /// from: `static public final int WPS_WEP_PROHIBITED`
  static const WPS_WEP_PROHIBITED = 4;
  static final _id_getConfiguredNetworks = _class.instanceMethodId(
    r'getConfiguredNetworks',
    r'()Ljava/util/List;',
  );

  static final _getConfiguredNetworks = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getConfiguredNetworks()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<wificonfiguration_.WifiConfiguration> getConfiguredNetworks() {
    return _getConfiguredNetworks(
            reference.pointer, _id_getConfiguredNetworks as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(
            wificonfiguration_.$WifiConfiguration$Type()));
  }

  static final _id_getCallerConfiguredNetworks = _class.instanceMethodId(
    r'getCallerConfiguredNetworks',
    r'()Ljava/util/List;',
  );

  static final _getCallerConfiguredNetworks =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getCallerConfiguredNetworks()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<wificonfiguration_.WifiConfiguration>
      getCallerConfiguredNetworks() {
    return _getCallerConfiguredNetworks(reference.pointer,
            _id_getCallerConfiguredNetworks as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(
            wificonfiguration_.$WifiConfiguration$Type()));
  }

  static final _id_addNetwork = _class.instanceMethodId(
    r'addNetwork',
    r'(Landroid/net/wifi/WifiConfiguration;)I',
  );

  static final _addNetwork = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int addNetwork(android.net.wifi.WifiConfiguration wifiConfiguration)`
  int addNetwork(
    wificonfiguration_.WifiConfiguration wifiConfiguration,
  ) {
    return _addNetwork(reference.pointer, _id_addNetwork as _$jni.JMethodIDPtr,
            wifiConfiguration.reference.pointer)
        .integer;
  }

  static final _id_addNetworkPrivileged = _class.instanceMethodId(
    r'addNetworkPrivileged',
    r'(Landroid/net/wifi/WifiConfiguration;)Landroid/net/wifi/WifiManager$AddNetworkResult;',
  );

  static final _addNetworkPrivileged = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiManager$AddNetworkResult addNetworkPrivileged(android.net.wifi.WifiConfiguration wifiConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiManager_AddNetworkResult addNetworkPrivileged(
    wificonfiguration_.WifiConfiguration wifiConfiguration,
  ) {
    return _addNetworkPrivileged(
            reference.pointer,
            _id_addNetworkPrivileged as _$jni.JMethodIDPtr,
            wifiConfiguration.reference.pointer)
        .object(const $WifiManager_AddNetworkResult$Type());
  }

  static final _id_updateNetwork = _class.instanceMethodId(
    r'updateNetwork',
    r'(Landroid/net/wifi/WifiConfiguration;)I',
  );

  static final _updateNetwork = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int updateNetwork(android.net.wifi.WifiConfiguration wifiConfiguration)`
  int updateNetwork(
    wificonfiguration_.WifiConfiguration wifiConfiguration,
  ) {
    return _updateNetwork(
            reference.pointer,
            _id_updateNetwork as _$jni.JMethodIDPtr,
            wifiConfiguration.reference.pointer)
        .integer;
  }

  static final _id_addNetworkSuggestions = _class.instanceMethodId(
    r'addNetworkSuggestions',
    r'(Ljava/util/List;)I',
  );

  static final _addNetworkSuggestions = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int addNetworkSuggestions(java.util.List list)`
  int addNetworkSuggestions(
    _$jni.JList<_$jni.JObject> list,
  ) {
    return _addNetworkSuggestions(
            reference.pointer,
            _id_addNetworkSuggestions as _$jni.JMethodIDPtr,
            list.reference.pointer)
        .integer;
  }

  static final _id_removeNetworkSuggestions = _class.instanceMethodId(
    r'removeNetworkSuggestions',
    r'(Ljava/util/List;)I',
  );

  static final _removeNetworkSuggestions = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public int removeNetworkSuggestions(java.util.List list)`
  int removeNetworkSuggestions(
    _$jni.JList<_$jni.JObject> list,
  ) {
    return _removeNetworkSuggestions(
            reference.pointer,
            _id_removeNetworkSuggestions as _$jni.JMethodIDPtr,
            list.reference.pointer)
        .integer;
  }

  static final _id_removeNetworkSuggestions$1 = _class.instanceMethodId(
    r'removeNetworkSuggestions',
    r'(Ljava/util/List;I)I',
  );

  static final _removeNetworkSuggestions$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public int removeNetworkSuggestions(java.util.List list, int i)`
  int removeNetworkSuggestions$1(
    _$jni.JList<_$jni.JObject> list,
    int i,
  ) {
    return _removeNetworkSuggestions$1(
            reference.pointer,
            _id_removeNetworkSuggestions$1 as _$jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .integer;
  }

  static final _id_getNetworkSuggestions = _class.instanceMethodId(
    r'getNetworkSuggestions',
    r'()Ljava/util/List;',
  );

  static final _getNetworkSuggestions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getNetworkSuggestions()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getNetworkSuggestions() {
    return _getNetworkSuggestions(
            reference.pointer, _id_getNetworkSuggestions as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getMaxNumberOfNetworkSuggestionsPerApp =
      _class.instanceMethodId(
    r'getMaxNumberOfNetworkSuggestionsPerApp',
    r'()I',
  );

  static final _getMaxNumberOfNetworkSuggestionsPerApp =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getMaxNumberOfNetworkSuggestionsPerApp()`
  int getMaxNumberOfNetworkSuggestionsPerApp() {
    return _getMaxNumberOfNetworkSuggestionsPerApp(reference.pointer,
            _id_getMaxNumberOfNetworkSuggestionsPerApp as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_addOrUpdatePasspointConfiguration = _class.instanceMethodId(
    r'addOrUpdatePasspointConfiguration',
    r'(Landroid/net/wifi/hotspot2/PasspointConfiguration;)V',
  );

  static final _addOrUpdatePasspointConfiguration =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration passpointConfiguration)`
  void addOrUpdatePasspointConfiguration(
    _$jni.JObject passpointConfiguration,
  ) {
    _addOrUpdatePasspointConfiguration(
            reference.pointer,
            _id_addOrUpdatePasspointConfiguration as _$jni.JMethodIDPtr,
            passpointConfiguration.reference.pointer)
        .check();
  }

  static final _id_removePasspointConfiguration = _class.instanceMethodId(
    r'removePasspointConfiguration',
    r'(Ljava/lang/String;)V',
  );

  static final _removePasspointConfiguration =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removePasspointConfiguration(java.lang.String string)`
  void removePasspointConfiguration(
    _$jni.JString string,
  ) {
    _removePasspointConfiguration(
            reference.pointer,
            _id_removePasspointConfiguration as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_getPasspointConfigurations = _class.instanceMethodId(
    r'getPasspointConfigurations',
    r'()Ljava/util/List;',
  );

  static final _getPasspointConfigurations =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.util.List getPasspointConfigurations()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getPasspointConfigurations() {
    return _getPasspointConfigurations(reference.pointer,
            _id_getPasspointConfigurations as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_removeNetwork = _class.instanceMethodId(
    r'removeNetwork',
    r'(I)Z',
  );

  static final _removeNetwork = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean removeNetwork(int i)`
  bool removeNetwork(
    int i,
  ) {
    return _removeNetwork(
            reference.pointer, _id_removeNetwork as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_removeNonCallerConfiguredNetworks = _class.instanceMethodId(
    r'removeNonCallerConfiguredNetworks',
    r'()Z',
  );

  static final _removeNonCallerConfiguredNetworks =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean removeNonCallerConfiguredNetworks()`
  bool removeNonCallerConfiguredNetworks() {
    return _removeNonCallerConfiguredNetworks(reference.pointer,
            _id_removeNonCallerConfiguredNetworks as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_enableNetwork = _class.instanceMethodId(
    r'enableNetwork',
    r'(IZ)Z',
  );

  static final _enableNetwork = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public boolean enableNetwork(int i, boolean z)`
  bool enableNetwork(
    int i,
    bool z,
  ) {
    return _enableNetwork(reference.pointer,
            _id_enableNetwork as _$jni.JMethodIDPtr, i, z ? 1 : 0)
        .boolean;
  }

  static final _id_disableNetwork = _class.instanceMethodId(
    r'disableNetwork',
    r'(I)Z',
  );

  static final _disableNetwork = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean disableNetwork(int i)`
  bool disableNetwork(
    int i,
  ) {
    return _disableNetwork(
            reference.pointer, _id_disableNetwork as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_disconnect = _class.instanceMethodId(
    r'disconnect',
    r'()Z',
  );

  static final _disconnect = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean disconnect()`
  bool disconnect() {
    return _disconnect(reference.pointer, _id_disconnect as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_reconnect = _class.instanceMethodId(
    r'reconnect',
    r'()Z',
  );

  static final _reconnect = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean reconnect()`
  bool reconnect() {
    return _reconnect(reference.pointer, _id_reconnect as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_reassociate = _class.instanceMethodId(
    r'reassociate',
    r'()Z',
  );

  static final _reassociate = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean reassociate()`
  bool reassociate() {
    return _reassociate(
            reference.pointer, _id_reassociate as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_pingSupplicant = _class.instanceMethodId(
    r'pingSupplicant',
    r'()Z',
  );

  static final _pingSupplicant = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean pingSupplicant()`
  bool pingSupplicant() {
    return _pingSupplicant(
            reference.pointer, _id_pingSupplicant as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isP2pSupported = _class.instanceMethodId(
    r'isP2pSupported',
    r'()Z',
  );

  static final _isP2pSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isP2pSupported()`
  bool isP2pSupported() {
    return _isP2pSupported(
            reference.pointer, _id_isP2pSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isStaApConcurrencySupported = _class.instanceMethodId(
    r'isStaApConcurrencySupported',
    r'()Z',
  );

  static final _isStaApConcurrencySupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isStaApConcurrencySupported()`
  bool isStaApConcurrencySupported() {
    return _isStaApConcurrencySupported(reference.pointer,
            _id_isStaApConcurrencySupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isStaConcurrencyForLocalOnlyConnectionsSupported =
      _class.instanceMethodId(
    r'isStaConcurrencyForLocalOnlyConnectionsSupported',
    r'()Z',
  );

  static final _isStaConcurrencyForLocalOnlyConnectionsSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isStaConcurrencyForLocalOnlyConnectionsSupported()`
  bool isStaConcurrencyForLocalOnlyConnectionsSupported() {
    return _isStaConcurrencyForLocalOnlyConnectionsSupported(
            reference.pointer,
            _id_isStaConcurrencyForLocalOnlyConnectionsSupported
                as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isMakeBeforeBreakWifiSwitchingSupported =
      _class.instanceMethodId(
    r'isMakeBeforeBreakWifiSwitchingSupported',
    r'()Z',
  );

  static final _isMakeBeforeBreakWifiSwitchingSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isMakeBeforeBreakWifiSwitchingSupported()`
  bool isMakeBeforeBreakWifiSwitchingSupported() {
    return _isMakeBeforeBreakWifiSwitchingSupported(reference.pointer,
            _id_isMakeBeforeBreakWifiSwitchingSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isStaConcurrencyForMultiInternetSupported =
      _class.instanceMethodId(
    r'isStaConcurrencyForMultiInternetSupported',
    r'()Z',
  );

  static final _isStaConcurrencyForMultiInternetSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isStaConcurrencyForMultiInternetSupported()`
  bool isStaConcurrencyForMultiInternetSupported() {
    return _isStaConcurrencyForMultiInternetSupported(reference.pointer,
            _id_isStaConcurrencyForMultiInternetSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceToApRttSupported = _class.instanceMethodId(
    r'isDeviceToApRttSupported',
    r'()Z',
  );

  static final _isDeviceToApRttSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDeviceToApRttSupported()`
  bool isDeviceToApRttSupported() {
    return _isDeviceToApRttSupported(reference.pointer,
            _id_isDeviceToApRttSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPreferredNetworkOffloadSupported = _class.instanceMethodId(
    r'isPreferredNetworkOffloadSupported',
    r'()Z',
  );

  static final _isPreferredNetworkOffloadSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isPreferredNetworkOffloadSupported()`
  bool isPreferredNetworkOffloadSupported() {
    return _isPreferredNetworkOffloadSupported(reference.pointer,
            _id_isPreferredNetworkOffloadSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isTdlsSupported = _class.instanceMethodId(
    r'isTdlsSupported',
    r'()Z',
  );

  static final _isTdlsSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isTdlsSupported()`
  bool isTdlsSupported() {
    return _isTdlsSupported(
            reference.pointer, _id_isTdlsSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isEnhancedPowerReportingSupported = _class.instanceMethodId(
    r'isEnhancedPowerReportingSupported',
    r'()Z',
  );

  static final _isEnhancedPowerReportingSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isEnhancedPowerReportingSupported()`
  bool isEnhancedPowerReportingSupported() {
    return _isEnhancedPowerReportingSupported(reference.pointer,
            _id_isEnhancedPowerReportingSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_is24GHzBandSupported = _class.instanceMethodId(
    r'is24GHzBandSupported',
    r'()Z',
  );

  static final _is24GHzBandSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean is24GHzBandSupported()`
  bool is24GHzBandSupported() {
    return _is24GHzBandSupported(
            reference.pointer, _id_is24GHzBandSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_is5GHzBandSupported = _class.instanceMethodId(
    r'is5GHzBandSupported',
    r'()Z',
  );

  static final _is5GHzBandSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean is5GHzBandSupported()`
  bool is5GHzBandSupported() {
    return _is5GHzBandSupported(
            reference.pointer, _id_is5GHzBandSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_is60GHzBandSupported = _class.instanceMethodId(
    r'is60GHzBandSupported',
    r'()Z',
  );

  static final _is60GHzBandSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean is60GHzBandSupported()`
  bool is60GHzBandSupported() {
    return _is60GHzBandSupported(
            reference.pointer, _id_is60GHzBandSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_is6GHzBandSupported = _class.instanceMethodId(
    r'is6GHzBandSupported',
    r'()Z',
  );

  static final _is6GHzBandSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean is6GHzBandSupported()`
  bool is6GHzBandSupported() {
    return _is6GHzBandSupported(
            reference.pointer, _id_is6GHzBandSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWifiStandardSupported = _class.instanceMethodId(
    r'isWifiStandardSupported',
    r'(I)Z',
  );

  static final _isWifiStandardSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean isWifiStandardSupported(int i)`
  bool isWifiStandardSupported(
    int i,
  ) {
    return _isWifiStandardSupported(reference.pointer,
            _id_isWifiStandardSupported as _$jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_isStaBridgedApConcurrencySupported = _class.instanceMethodId(
    r'isStaBridgedApConcurrencySupported',
    r'()Z',
  );

  static final _isStaBridgedApConcurrencySupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isStaBridgedApConcurrencySupported()`
  bool isStaBridgedApConcurrencySupported() {
    return _isStaBridgedApConcurrencySupported(reference.pointer,
            _id_isStaBridgedApConcurrencySupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isBridgedApConcurrencySupported = _class.instanceMethodId(
    r'isBridgedApConcurrencySupported',
    r'()Z',
  );

  static final _isBridgedApConcurrencySupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isBridgedApConcurrencySupported()`
  bool isBridgedApConcurrencySupported() {
    return _isBridgedApConcurrencySupported(reference.pointer,
            _id_isBridgedApConcurrencySupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startScan = _class.instanceMethodId(
    r'startScan',
    r'()Z',
  );

  static final _startScan = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean startScan()`
  bool startScan() {
    return _startScan(reference.pointer, _id_startScan as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getConnectionInfo = _class.instanceMethodId(
    r'getConnectionInfo',
    r'()Landroid/net/wifi/WifiInfo;',
  );

  static final _getConnectionInfo = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.WifiInfo getConnectionInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  wifiinfo_.WifiInfo getConnectionInfo() {
    return _getConnectionInfo(
            reference.pointer, _id_getConnectionInfo as _$jni.JMethodIDPtr)
        .object(const wifiinfo_.$WifiInfo$Type());
  }

  static final _id_getScanResults = _class.instanceMethodId(
    r'getScanResults',
    r'()Ljava/util/List;',
  );

  static final _getScanResults = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getScanResults()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<scanresult_.ScanResult> getScanResults() {
    return _getScanResults(
            reference.pointer, _id_getScanResults as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(scanresult_.$ScanResult$Type()));
  }

  static final _id_isScanAlwaysAvailable = _class.instanceMethodId(
    r'isScanAlwaysAvailable',
    r'()Z',
  );

  static final _isScanAlwaysAvailable = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isScanAlwaysAvailable()`
  bool isScanAlwaysAvailable() {
    return _isScanAlwaysAvailable(
            reference.pointer, _id_isScanAlwaysAvailable as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getChannelData = _class.instanceMethodId(
    r'getChannelData',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getChannelData = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getChannelData(java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void getChannelData(
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _getChannelData(reference.pointer, _id_getChannelData as _$jni.JMethodIDPtr,
            executor.reference.pointer, consumer.reference.pointer)
        .check();
  }

  static final _id_saveConfiguration = _class.instanceMethodId(
    r'saveConfiguration',
    r'()Z',
  );

  static final _saveConfiguration = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean saveConfiguration()`
  bool saveConfiguration() {
    return _saveConfiguration(
            reference.pointer, _id_saveConfiguration as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getDhcpInfo = _class.instanceMethodId(
    r'getDhcpInfo',
    r'()Landroid/net/DhcpInfo;',
  );

  static final _getDhcpInfo = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.DhcpInfo getDhcpInfo()`
  /// The returned object must be released after use, by calling the [release] method.
  dhcpinfo_.DhcpInfo getDhcpInfo() {
    return _getDhcpInfo(
            reference.pointer, _id_getDhcpInfo as _$jni.JMethodIDPtr)
        .object(const dhcpinfo_.$DhcpInfo$Type());
  }

  static final _id_setWifiEnabled = _class.instanceMethodId(
    r'setWifiEnabled',
    r'(Z)Z',
  );

  static final _setWifiEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni
                      .VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public boolean setWifiEnabled(boolean z)`
  bool setWifiEnabled(
    bool z,
  ) {
    return _setWifiEnabled(reference.pointer,
            _id_setWifiEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_registerSubsystemRestartTrackingCallback =
      _class.instanceMethodId(
    r'registerSubsystemRestartTrackingCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$SubsystemRestartTrackingCallback;)V',
  );

  static final _registerSubsystemRestartTrackingCallback =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void registerSubsystemRestartTrackingCallback(java.util.concurrent.Executor executor, android.net.wifi.WifiManager$SubsystemRestartTrackingCallback subsystemRestartTrackingCallback)`
  void registerSubsystemRestartTrackingCallback(
    _$jni.JObject executor,
    WifiManager_SubsystemRestartTrackingCallback
        subsystemRestartTrackingCallback,
  ) {
    _registerSubsystemRestartTrackingCallback(
            reference.pointer,
            _id_registerSubsystemRestartTrackingCallback as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            subsystemRestartTrackingCallback.reference.pointer)
        .check();
  }

  static final _id_unregisterSubsystemRestartTrackingCallback =
      _class.instanceMethodId(
    r'unregisterSubsystemRestartTrackingCallback',
    r'(Landroid/net/wifi/WifiManager$SubsystemRestartTrackingCallback;)V',
  );

  static final _unregisterSubsystemRestartTrackingCallback =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void unregisterSubsystemRestartTrackingCallback(android.net.wifi.WifiManager$SubsystemRestartTrackingCallback subsystemRestartTrackingCallback)`
  void unregisterSubsystemRestartTrackingCallback(
    WifiManager_SubsystemRestartTrackingCallback
        subsystemRestartTrackingCallback,
  ) {
    _unregisterSubsystemRestartTrackingCallback(
            reference.pointer,
            _id_unregisterSubsystemRestartTrackingCallback
                as _$jni.JMethodIDPtr,
            subsystemRestartTrackingCallback.reference.pointer)
        .check();
  }

  static final _id_getWifiState = _class.instanceMethodId(
    r'getWifiState',
    r'()I',
  );

  static final _getWifiState = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getWifiState()`
  int getWifiState() {
    return _getWifiState(
            reference.pointer, _id_getWifiState as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isWifiEnabled = _class.instanceMethodId(
    r'isWifiEnabled',
    r'()Z',
  );

  static final _isWifiEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWifiEnabled()`
  bool isWifiEnabled() {
    return _isWifiEnabled(
            reference.pointer, _id_isWifiEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_calculateSignalLevel = _class.staticMethodId(
    r'calculateSignalLevel',
    r'(II)I',
  );

  static final _calculateSignalLevel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `static public int calculateSignalLevel(int i, int i1)`
  static int calculateSignalLevel(
    int i,
    int i1,
  ) {
    return _calculateSignalLevel(_class.reference.pointer,
            _id_calculateSignalLevel as _$jni.JMethodIDPtr, i, i1)
        .integer;
  }

  static final _id_calculateSignalLevel$1 = _class.instanceMethodId(
    r'calculateSignalLevel',
    r'(I)I',
  );

  static final _calculateSignalLevel$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public int calculateSignalLevel(int i)`
  int calculateSignalLevel$1(
    int i,
  ) {
    return _calculateSignalLevel$1(reference.pointer,
            _id_calculateSignalLevel$1 as _$jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getMaxSignalLevel = _class.instanceMethodId(
    r'getMaxSignalLevel',
    r'()I',
  );

  static final _getMaxSignalLevel = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getMaxSignalLevel()`
  int getMaxSignalLevel() {
    return _getMaxSignalLevel(
            reference.pointer, _id_getMaxSignalLevel as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_compareSignalLevel = _class.staticMethodId(
    r'compareSignalLevel',
    r'(II)I',
  );

  static final _compareSignalLevel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `static public int compareSignalLevel(int i, int i1)`
  static int compareSignalLevel(
    int i,
    int i1,
  ) {
    return _compareSignalLevel(_class.reference.pointer,
            _id_compareSignalLevel as _$jni.JMethodIDPtr, i, i1)
        .integer;
  }

  static final _id_validateSoftApConfiguration = _class.instanceMethodId(
    r'validateSoftApConfiguration',
    r'(Landroid/net/wifi/SoftApConfiguration;)Z',
  );

  static final _validateSoftApConfiguration =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean validateSoftApConfiguration(android.net.wifi.SoftApConfiguration softApConfiguration)`
  bool validateSoftApConfiguration(
    _$jni.JObject softApConfiguration,
  ) {
    return _validateSoftApConfiguration(
            reference.pointer,
            _id_validateSoftApConfiguration as _$jni.JMethodIDPtr,
            softApConfiguration.reference.pointer)
        .boolean;
  }

  static final _id_startLocalOnlyHotspot = _class.instanceMethodId(
    r'startLocalOnlyHotspot',
    r'(Landroid/net/wifi/WifiManager$LocalOnlyHotspotCallback;Landroid/os/Handler;)V',
  );

  static final _startLocalOnlyHotspot = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void startLocalOnlyHotspot(android.net.wifi.WifiManager$LocalOnlyHotspotCallback localOnlyHotspotCallback, android.os.Handler handler)`
  void startLocalOnlyHotspot(
    WifiManager_LocalOnlyHotspotCallback localOnlyHotspotCallback,
    _$jni.JObject handler,
  ) {
    _startLocalOnlyHotspot(
            reference.pointer,
            _id_startLocalOnlyHotspot as _$jni.JMethodIDPtr,
            localOnlyHotspotCallback.reference.pointer,
            handler.reference.pointer)
        .check();
  }

  static final _id_setTdlsEnabled = _class.instanceMethodId(
    r'setTdlsEnabled',
    r'(Ljava/net/InetAddress;Z)V',
  );

  static final _setTdlsEnabled = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void setTdlsEnabled(java.net.InetAddress inetAddress, boolean z)`
  void setTdlsEnabled(
    _$jni.JObject inetAddress,
    bool z,
  ) {
    _setTdlsEnabled(reference.pointer, _id_setTdlsEnabled as _$jni.JMethodIDPtr,
            inetAddress.reference.pointer, z ? 1 : 0)
        .check();
  }

  static final _id_setTdlsEnabled$1 = _class.instanceMethodId(
    r'setTdlsEnabled',
    r'(Ljava/net/InetAddress;ZLjava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _setTdlsEnabled$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTdlsEnabled(java.net.InetAddress inetAddress, boolean z, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void setTdlsEnabled$1(
    _$jni.JObject inetAddress,
    bool z,
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _setTdlsEnabled$1(
            reference.pointer,
            _id_setTdlsEnabled$1 as _$jni.JMethodIDPtr,
            inetAddress.reference.pointer,
            z ? 1 : 0,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_setTdlsEnabledWithMacAddress = _class.instanceMethodId(
    r'setTdlsEnabledWithMacAddress',
    r'(Ljava/lang/String;Z)V',
  );

  static final _setTdlsEnabledWithMacAddress =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void setTdlsEnabledWithMacAddress(java.lang.String string, boolean z)`
  void setTdlsEnabledWithMacAddress(
    _$jni.JString string,
    bool z,
  ) {
    _setTdlsEnabledWithMacAddress(
            reference.pointer,
            _id_setTdlsEnabledWithMacAddress as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .check();
  }

  static final _id_setTdlsEnabledWithMacAddress$1 = _class.instanceMethodId(
    r'setTdlsEnabledWithMacAddress',
    r'(Ljava/lang/String;ZLjava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _setTdlsEnabledWithMacAddress$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setTdlsEnabledWithMacAddress(java.lang.String string, boolean z, java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void setTdlsEnabledWithMacAddress$1(
    _$jni.JString string,
    bool z,
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _setTdlsEnabledWithMacAddress$1(
            reference.pointer,
            _id_setTdlsEnabledWithMacAddress$1 as _$jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_isTdlsOperationCurrentlyAvailable = _class.instanceMethodId(
    r'isTdlsOperationCurrentlyAvailable',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _isTdlsOperationCurrentlyAvailable =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void isTdlsOperationCurrentlyAvailable(java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void isTdlsOperationCurrentlyAvailable(
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _isTdlsOperationCurrentlyAvailable(
            reference.pointer,
            _id_isTdlsOperationCurrentlyAvailable as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getMaxSupportedConcurrentTdlsSessions =
      _class.instanceMethodId(
    r'getMaxSupportedConcurrentTdlsSessions',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getMaxSupportedConcurrentTdlsSessions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getMaxSupportedConcurrentTdlsSessions(java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void getMaxSupportedConcurrentTdlsSessions(
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _getMaxSupportedConcurrentTdlsSessions(
            reference.pointer,
            _id_getMaxSupportedConcurrentTdlsSessions as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_getNumberOfEnabledTdlsSessions = _class.instanceMethodId(
    r'getNumberOfEnabledTdlsSessions',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _getNumberOfEnabledTdlsSessions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void getNumberOfEnabledTdlsSessions(java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void getNumberOfEnabledTdlsSessions(
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _getNumberOfEnabledTdlsSessions(
            reference.pointer,
            _id_getNumberOfEnabledTdlsSessions as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_allowAutojoinGlobal = _class.instanceMethodId(
    r'allowAutojoinGlobal',
    r'(Z)V',
  );

  static final _allowAutojoinGlobal = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void allowAutojoinGlobal(boolean z)`
  void allowAutojoinGlobal(
    bool z,
  ) {
    _allowAutojoinGlobal(reference.pointer,
            _id_allowAutojoinGlobal as _$jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_queryAutojoinGlobal = _class.instanceMethodId(
    r'queryAutojoinGlobal',
    r'(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V',
  );

  static final _queryAutojoinGlobal = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void queryAutojoinGlobal(java.util.concurrent.Executor executor, java.util.function.Consumer consumer)`
  void queryAutojoinGlobal(
    _$jni.JObject executor,
    _$jni.JObject consumer,
  ) {
    _queryAutojoinGlobal(
            reference.pointer,
            _id_queryAutojoinGlobal as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_startWps = _class.instanceMethodId(
    r'startWps',
    r'(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V',
  );

  static final _startWps = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void startWps(android.net.wifi.WpsInfo wpsInfo, android.net.wifi.WifiManager$WpsCallback wpsCallback)`
  void startWps(
    _$jni.JObject wpsInfo,
    WifiManager_WpsCallback wpsCallback,
  ) {
    _startWps(reference.pointer, _id_startWps as _$jni.JMethodIDPtr,
            wpsInfo.reference.pointer, wpsCallback.reference.pointer)
        .check();
  }

  static final _id_cancelWps = _class.instanceMethodId(
    r'cancelWps',
    r'(Landroid/net/wifi/WifiManager$WpsCallback;)V',
  );

  static final _cancelWps = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void cancelWps(android.net.wifi.WifiManager$WpsCallback wpsCallback)`
  void cancelWps(
    WifiManager_WpsCallback wpsCallback,
  ) {
    _cancelWps(reference.pointer, _id_cancelWps as _$jni.JMethodIDPtr,
            wpsCallback.reference.pointer)
        .check();
  }

  static final _id_createWifiLock = _class.instanceMethodId(
    r'createWifiLock',
    r'(ILjava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;',
  );

  static final _createWifiLock = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Int32, _$jni.Pointer<_$jni.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiManager$WifiLock createWifiLock(int i, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiManager_WifiLock createWifiLock(
    int i,
    _$jni.JString string,
  ) {
    return _createWifiLock(
            reference.pointer,
            _id_createWifiLock as _$jni.JMethodIDPtr,
            i,
            string.reference.pointer)
        .object(const $WifiManager_WifiLock$Type());
  }

  static final _id_createWifiLock$1 = _class.instanceMethodId(
    r'createWifiLock',
    r'(Ljava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;',
  );

  static final _createWifiLock$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiManager_WifiLock createWifiLock$1(
    _$jni.JString string,
  ) {
    return _createWifiLock$1(
            reference.pointer,
            _id_createWifiLock$1 as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WifiManager_WifiLock$Type());
  }

  static final _id_createMulticastLock = _class.instanceMethodId(
    r'createMulticastLock',
    r'(Ljava/lang/String;)Landroid/net/wifi/WifiManager$MulticastLock;',
  );

  static final _createMulticastLock = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiManager_MulticastLock createMulticastLock(
    _$jni.JString string,
  ) {
    return _createMulticastLock(
            reference.pointer,
            _id_createMulticastLock as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WifiManager_MulticastLock$Type());
  }

  static final _id_isWpa3SaeSupported = _class.instanceMethodId(
    r'isWpa3SaeSupported',
    r'()Z',
  );

  static final _isWpa3SaeSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWpa3SaeSupported()`
  bool isWpa3SaeSupported() {
    return _isWpa3SaeSupported(
            reference.pointer, _id_isWpa3SaeSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWpa3SuiteBSupported = _class.instanceMethodId(
    r'isWpa3SuiteBSupported',
    r'()Z',
  );

  static final _isWpa3SuiteBSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWpa3SuiteBSupported()`
  bool isWpa3SuiteBSupported() {
    return _isWpa3SuiteBSupported(
            reference.pointer, _id_isWpa3SuiteBSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isEnhancedOpenSupported = _class.instanceMethodId(
    r'isEnhancedOpenSupported',
    r'()Z',
  );

  static final _isEnhancedOpenSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isEnhancedOpenSupported()`
  bool isEnhancedOpenSupported() {
    return _isEnhancedOpenSupported(reference.pointer,
            _id_isEnhancedOpenSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isEasyConnectSupported = _class.instanceMethodId(
    r'isEasyConnectSupported',
    r'()Z',
  );

  static final _isEasyConnectSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isEasyConnectSupported()`
  bool isEasyConnectSupported() {
    return _isEasyConnectSupported(
            reference.pointer, _id_isEasyConnectSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isEasyConnectEnrolleeResponderModeSupported =
      _class.instanceMethodId(
    r'isEasyConnectEnrolleeResponderModeSupported',
    r'()Z',
  );

  static final _isEasyConnectEnrolleeResponderModeSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isEasyConnectEnrolleeResponderModeSupported()`
  bool isEasyConnectEnrolleeResponderModeSupported() {
    return _isEasyConnectEnrolleeResponderModeSupported(
            reference.pointer,
            _id_isEasyConnectEnrolleeResponderModeSupported
                as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWapiSupported = _class.instanceMethodId(
    r'isWapiSupported',
    r'()Z',
  );

  static final _isWapiSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWapiSupported()`
  bool isWapiSupported() {
    return _isWapiSupported(
            reference.pointer, _id_isWapiSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWpa3SaePublicKeySupported = _class.instanceMethodId(
    r'isWpa3SaePublicKeySupported',
    r'()Z',
  );

  static final _isWpa3SaePublicKeySupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isWpa3SaePublicKeySupported()`
  bool isWpa3SaePublicKeySupported() {
    return _isWpa3SaePublicKeySupported(reference.pointer,
            _id_isWpa3SaePublicKeySupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPasspointTermsAndConditionsSupported =
      _class.instanceMethodId(
    r'isPasspointTermsAndConditionsSupported',
    r'()Z',
  );

  static final _isPasspointTermsAndConditionsSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isPasspointTermsAndConditionsSupported()`
  bool isPasspointTermsAndConditionsSupported() {
    return _isPasspointTermsAndConditionsSupported(reference.pointer,
            _id_isPasspointTermsAndConditionsSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWpa3SaeH2eSupported = _class.instanceMethodId(
    r'isWpa3SaeH2eSupported',
    r'()Z',
  );

  static final _isWpa3SaeH2eSupported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWpa3SaeH2eSupported()`
  bool isWpa3SaeH2eSupported() {
    return _isWpa3SaeH2eSupported(
            reference.pointer, _id_isWpa3SaeH2eSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isWifiDisplayR2Supported = _class.instanceMethodId(
    r'isWifiDisplayR2Supported',
    r'()Z',
  );

  static final _isWifiDisplayR2Supported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWifiDisplayR2Supported()`
  bool isWifiDisplayR2Supported() {
    return _isWifiDisplayR2Supported(reference.pointer,
            _id_isWifiDisplayR2Supported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDecoratedIdentitySupported = _class.instanceMethodId(
    r'isDecoratedIdentitySupported',
    r'()Z',
  );

  static final _isDecoratedIdentitySupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isDecoratedIdentitySupported()`
  bool isDecoratedIdentitySupported() {
    return _isDecoratedIdentitySupported(reference.pointer,
            _id_isDecoratedIdentitySupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isTrustOnFirstUseSupported = _class.instanceMethodId(
    r'isTrustOnFirstUseSupported',
    r'()Z',
  );

  static final _isTrustOnFirstUseSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isTrustOnFirstUseSupported()`
  bool isTrustOnFirstUseSupported() {
    return _isTrustOnFirstUseSupported(reference.pointer,
            _id_isTrustOnFirstUseSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isEasyConnectDppAkmSupported = _class.instanceMethodId(
    r'isEasyConnectDppAkmSupported',
    r'()Z',
  );

  static final _isEasyConnectDppAkmSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isEasyConnectDppAkmSupported()`
  bool isEasyConnectDppAkmSupported() {
    return _isEasyConnectDppAkmSupported(reference.pointer,
            _id_isEasyConnectDppAkmSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isTlsMinimumVersionSupported = _class.instanceMethodId(
    r'isTlsMinimumVersionSupported',
    r'()Z',
  );

  static final _isTlsMinimumVersionSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isTlsMinimumVersionSupported()`
  bool isTlsMinimumVersionSupported() {
    return _isTlsMinimumVersionSupported(reference.pointer,
            _id_isTlsMinimumVersionSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isTlsV13Supported = _class.instanceMethodId(
    r'isTlsV13Supported',
    r'()Z',
  );

  static final _isTlsV13Supported = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isTlsV13Supported()`
  bool isTlsV13Supported() {
    return _isTlsV13Supported(
            reference.pointer, _id_isTlsV13Supported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDualBandSimultaneousSupported = _class.instanceMethodId(
    r'isDualBandSimultaneousSupported',
    r'()Z',
  );

  static final _isDualBandSimultaneousSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isDualBandSimultaneousSupported()`
  bool isDualBandSimultaneousSupported() {
    return _isDualBandSimultaneousSupported(reference.pointer,
            _id_isDualBandSimultaneousSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isTidToLinkMappingNegotiationSupported =
      _class.instanceMethodId(
    r'isTidToLinkMappingNegotiationSupported',
    r'()Z',
  );

  static final _isTidToLinkMappingNegotiationSupported =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public boolean isTidToLinkMappingNegotiationSupported()`
  bool isTidToLinkMappingNegotiationSupported() {
    return _isTidToLinkMappingNegotiationSupported(reference.pointer,
            _id_isTidToLinkMappingNegotiationSupported as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_registerScanResultsCallback = _class.instanceMethodId(
    r'registerScanResultsCallback',
    r'(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$ScanResultsCallback;)V',
  );

  static final _registerScanResultsCallback =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void registerScanResultsCallback(java.util.concurrent.Executor executor, android.net.wifi.WifiManager$ScanResultsCallback scanResultsCallback)`
  void registerScanResultsCallback(
    _$jni.JObject executor,
    WifiManager_ScanResultsCallback scanResultsCallback,
  ) {
    _registerScanResultsCallback(
            reference.pointer,
            _id_registerScanResultsCallback as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            scanResultsCallback.reference.pointer)
        .check();
  }

  static final _id_unregisterScanResultsCallback = _class.instanceMethodId(
    r'unregisterScanResultsCallback',
    r'(Landroid/net/wifi/WifiManager$ScanResultsCallback;)V',
  );

  static final _unregisterScanResultsCallback =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void unregisterScanResultsCallback(android.net.wifi.WifiManager$ScanResultsCallback scanResultsCallback)`
  void unregisterScanResultsCallback(
    WifiManager_ScanResultsCallback scanResultsCallback,
  ) {
    _unregisterScanResultsCallback(
            reference.pointer,
            _id_unregisterScanResultsCallback as _$jni.JMethodIDPtr,
            scanResultsCallback.reference.pointer)
        .check();
  }

  static final _id_addSuggestionConnectionStatusListener =
      _class.instanceMethodId(
    r'addSuggestionConnectionStatusListener',
    r'(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$SuggestionConnectionStatusListener;)V',
  );

  static final _addSuggestionConnectionStatusListener =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addSuggestionConnectionStatusListener(java.util.concurrent.Executor executor, android.net.wifi.WifiManager$SuggestionConnectionStatusListener suggestionConnectionStatusListener)`
  void addSuggestionConnectionStatusListener(
    _$jni.JObject executor,
    WifiManager_SuggestionConnectionStatusListener
        suggestionConnectionStatusListener,
  ) {
    _addSuggestionConnectionStatusListener(
            reference.pointer,
            _id_addSuggestionConnectionStatusListener as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            suggestionConnectionStatusListener.reference.pointer)
        .check();
  }

  static final _id_removeSuggestionConnectionStatusListener =
      _class.instanceMethodId(
    r'removeSuggestionConnectionStatusListener',
    r'(Landroid/net/wifi/WifiManager$SuggestionConnectionStatusListener;)V',
  );

  static final _removeSuggestionConnectionStatusListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeSuggestionConnectionStatusListener(android.net.wifi.WifiManager$SuggestionConnectionStatusListener suggestionConnectionStatusListener)`
  void removeSuggestionConnectionStatusListener(
    WifiManager_SuggestionConnectionStatusListener
        suggestionConnectionStatusListener,
  ) {
    _removeSuggestionConnectionStatusListener(
            reference.pointer,
            _id_removeSuggestionConnectionStatusListener as _$jni.JMethodIDPtr,
            suggestionConnectionStatusListener.reference.pointer)
        .check();
  }

  static final _id_addLocalOnlyConnectionFailureListener =
      _class.instanceMethodId(
    r'addLocalOnlyConnectionFailureListener',
    r'(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$LocalOnlyConnectionFailureListener;)V',
  );

  static final _addLocalOnlyConnectionFailureListener =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addLocalOnlyConnectionFailureListener(java.util.concurrent.Executor executor, android.net.wifi.WifiManager$LocalOnlyConnectionFailureListener localOnlyConnectionFailureListener)`
  void addLocalOnlyConnectionFailureListener(
    _$jni.JObject executor,
    WifiManager_LocalOnlyConnectionFailureListener
        localOnlyConnectionFailureListener,
  ) {
    _addLocalOnlyConnectionFailureListener(
            reference.pointer,
            _id_addLocalOnlyConnectionFailureListener as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            localOnlyConnectionFailureListener.reference.pointer)
        .check();
  }

  static final _id_removeLocalOnlyConnectionFailureListener =
      _class.instanceMethodId(
    r'removeLocalOnlyConnectionFailureListener',
    r'(Landroid/net/wifi/WifiManager$LocalOnlyConnectionFailureListener;)V',
  );

  static final _removeLocalOnlyConnectionFailureListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeLocalOnlyConnectionFailureListener(android.net.wifi.WifiManager$LocalOnlyConnectionFailureListener localOnlyConnectionFailureListener)`
  void removeLocalOnlyConnectionFailureListener(
    WifiManager_LocalOnlyConnectionFailureListener
        localOnlyConnectionFailureListener,
  ) {
    _removeLocalOnlyConnectionFailureListener(
            reference.pointer,
            _id_removeLocalOnlyConnectionFailureListener as _$jni.JMethodIDPtr,
            localOnlyConnectionFailureListener.reference.pointer)
        .check();
  }

  static final _id_isScanThrottleEnabled = _class.instanceMethodId(
    r'isScanThrottleEnabled',
    r'()Z',
  );

  static final _isScanThrottleEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isScanThrottleEnabled()`
  bool isScanThrottleEnabled() {
    return _isScanThrottleEnabled(
            reference.pointer, _id_isScanThrottleEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isAutoWakeupEnabled = _class.instanceMethodId(
    r'isAutoWakeupEnabled',
    r'()Z',
  );

  static final _isAutoWakeupEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isAutoWakeupEnabled()`
  bool isAutoWakeupEnabled() {
    return _isAutoWakeupEnabled(
            reference.pointer, _id_isAutoWakeupEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isCarrierNetworkOffloadEnabled = _class.instanceMethodId(
    r'isCarrierNetworkOffloadEnabled',
    r'(IZ)Z',
  );

  static final _isCarrierNetworkOffloadEnabled =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
              'globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public boolean isCarrierNetworkOffloadEnabled(int i, boolean z)`
  bool isCarrierNetworkOffloadEnabled(
    int i,
    bool z,
  ) {
    return _isCarrierNetworkOffloadEnabled(
            reference.pointer,
            _id_isCarrierNetworkOffloadEnabled as _$jni.JMethodIDPtr,
            i,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_addSuggestionUserApprovalStatusListener =
      _class.instanceMethodId(
    r'addSuggestionUserApprovalStatusListener',
    r'(Ljava/util/concurrent/Executor;Landroid/net/wifi/WifiManager$SuggestionUserApprovalStatusListener;)V',
  );

  static final _addSuggestionUserApprovalStatusListener =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void addSuggestionUserApprovalStatusListener(java.util.concurrent.Executor executor, android.net.wifi.WifiManager$SuggestionUserApprovalStatusListener suggestionUserApprovalStatusListener)`
  void addSuggestionUserApprovalStatusListener(
    _$jni.JObject executor,
    WifiManager_SuggestionUserApprovalStatusListener
        suggestionUserApprovalStatusListener,
  ) {
    _addSuggestionUserApprovalStatusListener(
            reference.pointer,
            _id_addSuggestionUserApprovalStatusListener as _$jni.JMethodIDPtr,
            executor.reference.pointer,
            suggestionUserApprovalStatusListener.reference.pointer)
        .check();
  }

  static final _id_removeSuggestionUserApprovalStatusListener =
      _class.instanceMethodId(
    r'removeSuggestionUserApprovalStatusListener',
    r'(Landroid/net/wifi/WifiManager$SuggestionUserApprovalStatusListener;)V',
  );

  static final _removeSuggestionUserApprovalStatusListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void removeSuggestionUserApprovalStatusListener(android.net.wifi.WifiManager$SuggestionUserApprovalStatusListener suggestionUserApprovalStatusListener)`
  void removeSuggestionUserApprovalStatusListener(
    WifiManager_SuggestionUserApprovalStatusListener
        suggestionUserApprovalStatusListener,
  ) {
    _removeSuggestionUserApprovalStatusListener(
            reference.pointer,
            _id_removeSuggestionUserApprovalStatusListener
                as _$jni.JMethodIDPtr,
            suggestionUserApprovalStatusListener.reference.pointer)
        .check();
  }

  static final _id_flushPasspointAnqpCache = _class.instanceMethodId(
    r'flushPasspointAnqpCache',
    r'()V',
  );

  static final _flushPasspointAnqpCache = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void flushPasspointAnqpCache()`
  void flushPasspointAnqpCache() {
    _flushPasspointAnqpCache(reference.pointer,
            _id_flushPasspointAnqpCache as _$jni.JMethodIDPtr)
        .check();
  }

  static final _id_getAllowedChannels = _class.instanceMethodId(
    r'getAllowedChannels',
    r'(II)Ljava/util/List;',
  );

  static final _getAllowedChannels = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public java.util.List getAllowedChannels(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAllowedChannels(
    int i,
    int i1,
  ) {
    return _getAllowedChannels(reference.pointer,
            _id_getAllowedChannels as _$jni.JMethodIDPtr, i, i1)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getUsableChannels = _class.instanceMethodId(
    r'getUsableChannels',
    r'(II)Ljava/util/List;',
  );

  static final _getUsableChannels = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public java.util.List getUsableChannels(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getUsableChannels(
    int i,
    int i1,
  ) {
    return _getUsableChannels(reference.pointer,
            _id_getUsableChannels as _$jni.JMethodIDPtr, i, i1)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_isWifiPasspointEnabled = _class.instanceMethodId(
    r'isWifiPasspointEnabled',
    r'()Z',
  );

  static final _isWifiPasspointEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isWifiPasspointEnabled()`
  bool isWifiPasspointEnabled() {
    return _isWifiPasspointEnabled(
            reference.pointer, _id_isWifiPasspointEnabled as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getStaConcurrencyForMultiInternetMode =
      _class.instanceMethodId(
    r'getStaConcurrencyForMultiInternetMode',
    r'()I',
  );

  static final _getStaConcurrencyForMultiInternetMode =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getStaConcurrencyForMultiInternetMode()`
  int getStaConcurrencyForMultiInternetMode() {
    return _getStaConcurrencyForMultiInternetMode(reference.pointer,
            _id_getStaConcurrencyForMultiInternetMode as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_reportCreateInterfaceImpact = _class.instanceMethodId(
    r'reportCreateInterfaceImpact',
    r'(IZLjava/util/concurrent/Executor;Ljava/util/function/BiConsumer;)V',
  );

  static final _reportCreateInterfaceImpact =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Int32,
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  int,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void reportCreateInterfaceImpact(int i, boolean z, java.util.concurrent.Executor executor, java.util.function.BiConsumer biConsumer)`
  void reportCreateInterfaceImpact(
    int i,
    bool z,
    _$jni.JObject executor,
    _$jni.JObject biConsumer,
  ) {
    _reportCreateInterfaceImpact(
            reference.pointer,
            _id_reportCreateInterfaceImpact as _$jni.JMethodIDPtr,
            i,
            z ? 1 : 0,
            executor.reference.pointer,
            biConsumer.reference.pointer)
        .check();
  }

  static final _id_getMaxNumberOfChannelsPerNetworkSpecifierRequest =
      _class.instanceMethodId(
    r'getMaxNumberOfChannelsPerNetworkSpecifierRequest',
    r'()I',
  );

  static final _getMaxNumberOfChannelsPerNetworkSpecifierRequest =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getMaxNumberOfChannelsPerNetworkSpecifierRequest()`
  int getMaxNumberOfChannelsPerNetworkSpecifierRequest() {
    return _getMaxNumberOfChannelsPerNetworkSpecifierRequest(
            reference.pointer,
            _id_getMaxNumberOfChannelsPerNetworkSpecifierRequest
                as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $WifiManager$Type extends _$jni.JObjType<WifiManager> {
  @_$jni.internal
  const $WifiManager$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiManager;';

  @_$jni.internal
  @_$core.override
  WifiManager fromReference(_$jni.JReference reference) =>
      WifiManager.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiManager$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiManager$Type) &&
        other is $WifiManager$Type;
  }
}
