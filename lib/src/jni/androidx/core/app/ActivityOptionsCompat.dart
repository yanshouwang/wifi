// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../android/app/Activity.dart' as activity_;

import '../../../android/content/Context.dart' as context_;

/// from: `androidx.core.app.ActivityOptionsCompat`
class ActivityOptionsCompat extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityOptionsCompat> $type;

  @_$jni.internal
  ActivityOptionsCompat.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'androidx/core/app/ActivityOptionsCompat');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityOptionsCompat$Type();
  static final _id_EXTRA_USAGE_TIME_REPORT = _class.staticFieldId(
    r'EXTRA_USAGE_TIME_REPORT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USAGE_TIME_REPORT`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_USAGE_TIME_REPORT =>
      _id_EXTRA_USAGE_TIME_REPORT.get(_class, const _$jni.JStringType());

  static final _id_EXTRA_USAGE_TIME_REPORT_PACKAGES = _class.staticFieldId(
    r'EXTRA_USAGE_TIME_REPORT_PACKAGES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EXTRA_USAGE_TIME_REPORT_PACKAGES`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get EXTRA_USAGE_TIME_REPORT_PACKAGES =>
      _id_EXTRA_USAGE_TIME_REPORT_PACKAGES.get(
          _class, const _$jni.JStringType());

  static final _id_makeCustomAnimation = _class.staticMethodId(
    r'makeCustomAnimation',
    r'(Landroid/content/Context;II)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeCustomAnimation = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int, int)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeCustomAnimation(android.content.Context context, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeCustomAnimation(
    context_.Context context,
    int i,
    int i1,
  ) {
    return _makeCustomAnimation(
            _class.reference.pointer,
            _id_makeCustomAnimation as _$jni.JMethodIDPtr,
            context.reference.pointer,
            i,
            i1)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeScaleUpAnimation = _class.staticMethodId(
    r'makeScaleUpAnimation',
    r'(Landroid/view/View;IIII)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeScaleUpAnimation = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeScaleUpAnimation(android.view.View view, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeScaleUpAnimation(
    _$jni.JObject view,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _makeScaleUpAnimation(
            _class.reference.pointer,
            _id_makeScaleUpAnimation as _$jni.JMethodIDPtr,
            view.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeClipRevealAnimation = _class.staticMethodId(
    r'makeClipRevealAnimation',
    r'(Landroid/view/View;IIII)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeClipRevealAnimation = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              int,
              int)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeClipRevealAnimation(android.view.View view, int i, int i1, int i2, int i3)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeClipRevealAnimation(
    _$jni.JObject view,
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return _makeClipRevealAnimation(
            _class.reference.pointer,
            _id_makeClipRevealAnimation as _$jni.JMethodIDPtr,
            view.reference.pointer,
            i,
            i1,
            i2,
            i3)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeThumbnailScaleUpAnimation = _class.staticMethodId(
    r'makeThumbnailScaleUpAnimation',
    r'(Landroid/view/View;Landroid/graphics/Bitmap;II)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeThumbnailScaleUpAnimation =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Int32
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int,
                  int)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeThumbnailScaleUpAnimation(android.view.View view, android.graphics.Bitmap bitmap, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeThumbnailScaleUpAnimation(
    _$jni.JObject view,
    _$jni.JObject bitmap,
    int i,
    int i1,
  ) {
    return _makeThumbnailScaleUpAnimation(
            _class.reference.pointer,
            _id_makeThumbnailScaleUpAnimation as _$jni.JMethodIDPtr,
            view.reference.pointer,
            bitmap.reference.pointer,
            i,
            i1)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeSceneTransitionAnimation = _class.staticMethodId(
    r'makeSceneTransitionAnimation',
    r'(Landroid/app/Activity;Landroid/view/View;Ljava/lang/String;)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeSceneTransitionAnimation =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity activity, android.view.View view, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeSceneTransitionAnimation(
    activity_.Activity activity,
    _$jni.JObject view,
    _$jni.JString string,
  ) {
    return _makeSceneTransitionAnimation(
            _class.reference.pointer,
            _id_makeSceneTransitionAnimation as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            view.reference.pointer,
            string.reference.pointer)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeSceneTransitionAnimation$1 = _class.staticMethodId(
    r'makeSceneTransitionAnimation',
    r'(Landroid/app/Activity;[Landroidx/core/util/Pair;)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeSceneTransitionAnimation$1 =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeSceneTransitionAnimation(android.app.Activity activity, java.lang.Object[] pairs)`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeSceneTransitionAnimation$1(
    activity_.Activity activity,
    _$jni.JArray<_$jni.JObject> pairs,
  ) {
    return _makeSceneTransitionAnimation$1(
            _class.reference.pointer,
            _id_makeSceneTransitionAnimation$1 as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            pairs.reference.pointer)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeTaskLaunchBehind = _class.staticMethodId(
    r'makeTaskLaunchBehind',
    r'()Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeTaskLaunchBehind = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeTaskLaunchBehind()`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeTaskLaunchBehind() {
    return _makeTaskLaunchBehind(_class.reference.pointer,
            _id_makeTaskLaunchBehind as _$jni.JMethodIDPtr)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_makeBasic = _class.staticMethodId(
    r'makeBasic',
    r'()Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _makeBasic = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `static public androidx.core.app.ActivityOptionsCompat makeBasic()`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityOptionsCompat makeBasic() {
    return _makeBasic(
            _class.reference.pointer, _id_makeBasic as _$jni.JMethodIDPtr)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_setLaunchBounds = _class.instanceMethodId(
    r'setLaunchBounds',
    r'(Landroid/graphics/Rect;)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _setLaunchBounds = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public androidx.core.app.ActivityOptionsCompat setLaunchBounds(android.graphics.Rect rect)`
  /// The returned object must be released after use, by calling the [release] method.
  ActivityOptionsCompat setLaunchBounds(
    _$jni.JObject rect,
  ) {
    return _setLaunchBounds(reference.pointer,
            _id_setLaunchBounds as _$jni.JMethodIDPtr, rect.reference.pointer)
        .object(const $ActivityOptionsCompat$Type());
  }

  static final _id_getLaunchBounds = _class.instanceMethodId(
    r'getLaunchBounds',
    r'()Landroid/graphics/Rect;',
  );

  static final _getLaunchBounds = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.graphics.Rect getLaunchBounds()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getLaunchBounds() {
    return _getLaunchBounds(
            reference.pointer, _id_getLaunchBounds as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_toBundle = _class.instanceMethodId(
    r'toBundle',
    r'()Landroid/os/Bundle;',
  );

  static final _toBundle = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.os.Bundle toBundle()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject toBundle() {
    return _toBundle(reference.pointer, _id_toBundle as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_update = _class.instanceMethodId(
    r'update',
    r'(Landroidx/core/app/ActivityOptionsCompat;)V',
  );

  static final _update = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void update(androidx.core.app.ActivityOptionsCompat activityOptionsCompat)`
  void update(
    ActivityOptionsCompat activityOptionsCompat,
  ) {
    _update(reference.pointer, _id_update as _$jni.JMethodIDPtr,
            activityOptionsCompat.reference.pointer)
        .check();
  }

  static final _id_requestUsageTimeReport = _class.instanceMethodId(
    r'requestUsageTimeReport',
    r'(Landroid/app/PendingIntent;)V',
  );

  static final _requestUsageTimeReport = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void requestUsageTimeReport(android.app.PendingIntent pendingIntent)`
  void requestUsageTimeReport(
    _$jni.JObject pendingIntent,
  ) {
    _requestUsageTimeReport(
            reference.pointer,
            _id_requestUsageTimeReport as _$jni.JMethodIDPtr,
            pendingIntent.reference.pointer)
        .check();
  }

  static final _id_setShareIdentityEnabled = _class.instanceMethodId(
    r'setShareIdentityEnabled',
    r'(Z)Landroidx/core/app/ActivityOptionsCompat;',
  );

  static final _setShareIdentityEnabled = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public androidx.core.app.ActivityOptionsCompat setShareIdentityEnabled(boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  ActivityOptionsCompat setShareIdentityEnabled(
    bool z,
  ) {
    return _setShareIdentityEnabled(reference.pointer,
            _id_setShareIdentityEnabled as _$jni.JMethodIDPtr, z ? 1 : 0)
        .object(const $ActivityOptionsCompat$Type());
  }
}

final class $ActivityOptionsCompat$Type
    extends _$jni.JObjType<ActivityOptionsCompat> {
  @_$jni.internal
  const $ActivityOptionsCompat$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroidx/core/app/ActivityOptionsCompat;';

  @_$jni.internal
  @_$core.override
  ActivityOptionsCompat fromReference(_$jni.JReference reference) =>
      ActivityOptionsCompat.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ActivityOptionsCompat$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityOptionsCompat$Type) &&
        other is $ActivityOptionsCompat$Type;
  }
}
