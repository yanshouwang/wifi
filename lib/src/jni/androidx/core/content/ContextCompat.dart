// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../android/content/Context.dart' as context_;

import '../../../android/content/Intent.dart' as intent_;

import '../../../android/content/IntentFilter.dart' as intentfilter_;

/// from: `androidx.core.content.ContextCompat$RegisterReceiverFlags`
class ContextCompat_RegisterReceiverFlags extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ContextCompat_RegisterReceiverFlags> $type;

  @_$jni.internal
  ContextCompat_RegisterReceiverFlags.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'androidx/core/content/ContextCompat$RegisterReceiverFlags');

  /// The type which includes information such as the signature of this class.
  static const type = $ContextCompat_RegisterReceiverFlags$Type();

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ContextCompat_RegisterReceiverFlags> _$impls =
      {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ContextCompat_RegisterReceiverFlags $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.content.ContextCompat$RegisterReceiverFlags',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ContextCompat_RegisterReceiverFlags.implement(
    $ContextCompat_RegisterReceiverFlags $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ContextCompat_RegisterReceiverFlags.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ContextCompat_RegisterReceiverFlags {
  factory $ContextCompat_RegisterReceiverFlags() =
      _$ContextCompat_RegisterReceiverFlags;
}

final class _$ContextCompat_RegisterReceiverFlags
    with $ContextCompat_RegisterReceiverFlags {
  _$ContextCompat_RegisterReceiverFlags();
}

final class $ContextCompat_RegisterReceiverFlags$Type
    extends _$jni.JObjType<ContextCompat_RegisterReceiverFlags> {
  @_$jni.internal
  const $ContextCompat_RegisterReceiverFlags$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroidx/core/content/ContextCompat$RegisterReceiverFlags;';

  @_$jni.internal
  @_$core.override
  ContextCompat_RegisterReceiverFlags fromReference(
          _$jni.JReference reference) =>
      ContextCompat_RegisterReceiverFlags.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ContextCompat_RegisterReceiverFlags$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextCompat_RegisterReceiverFlags$Type) &&
        other is $ContextCompat_RegisterReceiverFlags$Type;
  }
}

/// from: `androidx.core.content.ContextCompat`
class ContextCompat extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ContextCompat> $type;

  @_$jni.internal
  ContextCompat.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'androidx/core/content/ContextCompat');

  /// The type which includes information such as the signature of this class.
  static const type = $ContextCompat$Type();

  /// from: `static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS`
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;

  /// from: `static public final int RECEIVER_EXPORTED`
  static const RECEIVER_EXPORTED = 2;

  /// from: `static public final int RECEIVER_NOT_EXPORTED`
  static const RECEIVER_NOT_EXPORTED = 4;
  static final _id_startActivities = _class.staticMethodId(
    r'startActivities',
    r'(Landroid/content/Context;[Landroid/content/Intent;)Z',
  );

  static final _startActivities = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean startActivities(android.content.Context context, android.content.Intent[] intents)`
  static bool startActivities(
    context_.Context context,
    _$jni.JArray<intent_.Intent> intents,
  ) {
    return _startActivities(
            _class.reference.pointer,
            _id_startActivities as _$jni.JMethodIDPtr,
            context.reference.pointer,
            intents.reference.pointer)
        .boolean;
  }

  static final _id_startActivities$1 = _class.staticMethodId(
    r'startActivities',
    r'(Landroid/content/Context;[Landroid/content/Intent;Landroid/os/Bundle;)Z',
  );

  static final _startActivities$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean startActivities(android.content.Context context, android.content.Intent[] intents, android.os.Bundle bundle)`
  static bool startActivities$1(
    context_.Context context,
    _$jni.JArray<intent_.Intent> intents,
    _$jni.JObject bundle,
  ) {
    return _startActivities$1(
            _class.reference.pointer,
            _id_startActivities$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            intents.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_startActivity = _class.staticMethodId(
    r'startActivity',
    r'(Landroid/content/Context;Landroid/content/Intent;Landroid/os/Bundle;)V',
  );

  static final _startActivity = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startActivity(android.content.Context context, android.content.Intent intent, android.os.Bundle bundle)`
  static void startActivity(
    context_.Context context,
    intent_.Intent intent,
    _$jni.JObject bundle,
  ) {
    _startActivity(
            _class.reference.pointer,
            _id_startActivity as _$jni.JMethodIDPtr,
            context.reference.pointer,
            intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getDataDir = _class.staticMethodId(
    r'getDataDir',
    r'(Landroid/content/Context;)Ljava/io/File;',
  );

  static final _getDataDir = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File getDataDir(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDataDir(
    context_.Context context,
  ) {
    return _getDataDir(_class.reference.pointer,
            _id_getDataDir as _$jni.JMethodIDPtr, context.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getObbDirs = _class.staticMethodId(
    r'getObbDirs',
    r'(Landroid/content/Context;)[Ljava/io/File;',
  );

  static final _getObbDirs = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File[] getObbDirs(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JObject> getObbDirs(
    context_.Context context,
  ) {
    return _getObbDirs(_class.reference.pointer,
            _id_getObbDirs as _$jni.JMethodIDPtr, context.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_getExternalFilesDirs = _class.staticMethodId(
    r'getExternalFilesDirs',
    r'(Landroid/content/Context;Ljava/lang/String;)[Ljava/io/File;',
  );

  static final _getExternalFilesDirs = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File[] getExternalFilesDirs(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JObject> getExternalFilesDirs(
    context_.Context context,
    _$jni.JString string,
  ) {
    return _getExternalFilesDirs(
            _class.reference.pointer,
            _id_getExternalFilesDirs as _$jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_getExternalCacheDirs = _class.staticMethodId(
    r'getExternalCacheDirs',
    r'(Landroid/content/Context;)[Ljava/io/File;',
  );

  static final _getExternalCacheDirs = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File[] getExternalCacheDirs(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JObject> getExternalCacheDirs(
    context_.Context context,
  ) {
    return _getExternalCacheDirs(
            _class.reference.pointer,
            _id_getExternalCacheDirs as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JArrayType(_$jni.JObjectType()));
  }

  static final _id_getDrawable = _class.staticMethodId(
    r'getDrawable',
    r'(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;',
  );

  static final _getDrawable = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public android.graphics.drawable.Drawable getDrawable(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDrawable(
    context_.Context context,
    int i,
  ) {
    return _getDrawable(_class.reference.pointer,
            _id_getDrawable as _$jni.JMethodIDPtr, context.reference.pointer, i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getColorStateList = _class.staticMethodId(
    r'getColorStateList',
    r'(Landroid/content/Context;I)Landroid/content/res/ColorStateList;',
  );

  static final _getColorStateList = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public android.content.res.ColorStateList getColorStateList(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getColorStateList(
    context_.Context context,
    int i,
  ) {
    return _getColorStateList(
            _class.reference.pointer,
            _id_getColorStateList as _$jni.JMethodIDPtr,
            context.reference.pointer,
            i)
        .object(const _$jni.JObjectType());
  }

  static final _id_getColor = _class.staticMethodId(
    r'getColor',
    r'(Landroid/content/Context;I)I',
  );

  static final _getColor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public int getColor(android.content.Context context, int i)`
  static int getColor(
    context_.Context context,
    int i,
  ) {
    return _getColor(_class.reference.pointer,
            _id_getColor as _$jni.JMethodIDPtr, context.reference.pointer, i)
        .integer;
  }

  static final _id_checkSelfPermission = _class.staticMethodId(
    r'checkSelfPermission',
    r'(Landroid/content/Context;Ljava/lang/String;)I',
  );

  static final _checkSelfPermission = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public int checkSelfPermission(android.content.Context context, java.lang.String string)`
  static int checkSelfPermission(
    context_.Context context,
    _$jni.JString string,
  ) {
    return _checkSelfPermission(
            _class.reference.pointer,
            _id_checkSelfPermission as _$jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .integer;
  }

  static final _id_getNoBackupFilesDir = _class.staticMethodId(
    r'getNoBackupFilesDir',
    r'(Landroid/content/Context;)Ljava/io/File;',
  );

  static final _getNoBackupFilesDir = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File getNoBackupFilesDir(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getNoBackupFilesDir(
    context_.Context context,
  ) {
    return _getNoBackupFilesDir(
            _class.reference.pointer,
            _id_getNoBackupFilesDir as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.staticMethodId(
    r'getCodeCacheDir',
    r'(Landroid/content/Context;)Ljava/io/File;',
  );

  static final _getCodeCacheDir = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.io.File getCodeCacheDir(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getCodeCacheDir(
    context_.Context context,
  ) {
    return _getCodeCacheDir(
            _class.reference.pointer,
            _id_getCodeCacheDir as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_createDeviceProtectedStorageContext = _class.staticMethodId(
    r'createDeviceProtectedStorageContext',
    r'(Landroid/content/Context;)Landroid/content/Context;',
  );

  static final _createDeviceProtectedStorageContext =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.content.Context createDeviceProtectedStorageContext(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static context_.Context createDeviceProtectedStorageContext(
    context_.Context context,
  ) {
    return _createDeviceProtectedStorageContext(
            _class.reference.pointer,
            _id_createDeviceProtectedStorageContext as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const context_.$Context$Type());
  }

  static final _id_isDeviceProtectedStorage = _class.staticMethodId(
    r'isDeviceProtectedStorage',
    r'(Landroid/content/Context;)Z',
  );

  static final _isDeviceProtectedStorage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean isDeviceProtectedStorage(android.content.Context context)`
  static bool isDeviceProtectedStorage(
    context_.Context context,
  ) {
    return _isDeviceProtectedStorage(
            _class.reference.pointer,
            _id_isDeviceProtectedStorage as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .boolean;
  }

  static final _id_getMainExecutor = _class.staticMethodId(
    r'getMainExecutor',
    r'(Landroid/content/Context;)Ljava/util/concurrent/Executor;',
  );

  static final _getMainExecutor = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.util.concurrent.Executor getMainExecutor(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getMainExecutor(
    context_.Context context,
  ) {
    return _getMainExecutor(
            _class.reference.pointer,
            _id_getMainExecutor as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_startForegroundService = _class.staticMethodId(
    r'startForegroundService',
    r'(Landroid/content/Context;Landroid/content/Intent;)V',
  );

  static final _startForegroundService = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startForegroundService(android.content.Context context, android.content.Intent intent)`
  static void startForegroundService(
    context_.Context context,
    intent_.Intent intent,
  ) {
    _startForegroundService(
            _class.reference.pointer,
            _id_startForegroundService as _$jni.JMethodIDPtr,
            context.reference.pointer,
            intent.reference.pointer)
        .check();
  }

  static final _id_getDisplayOrDefault = _class.staticMethodId(
    r'getDisplayOrDefault',
    r'(Landroid/content/Context;)Landroid/view/Display;',
  );

  static final _getDisplayOrDefault = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.view.Display getDisplayOrDefault(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDisplayOrDefault(
    context_.Context context,
  ) {
    return _getDisplayOrDefault(
            _class.reference.pointer,
            _id_getDisplayOrDefault as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_getSystemService = _class.staticMethodId(
    r'getSystemService',
    r'(Landroid/content/Context;Ljava/lang/Class;)Ljava/lang/Object;',
  );

  static final _getSystemService = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public T getSystemService(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  static $T getSystemService<$T extends _$jni.JObject>(
    context_.Context context,
    _$jni.JObject class$, {
    required _$jni.JObjType<$T> T,
  }) {
    return _getSystemService(
            _class.reference.pointer,
            _id_getSystemService as _$jni.JMethodIDPtr,
            context.reference.pointer,
            class$.reference.pointer)
        .object(T);
  }

  static final _id_registerReceiver = _class.staticMethodId(
    r'registerReceiver',
    r'(Landroid/content/Context;Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;',
  );

  static final _registerReceiver = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public android.content.Intent registerReceiver(android.content.Context context, android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static intent_.Intent registerReceiver(
    context_.Context context,
    _$jni.JObject broadcastReceiver,
    intentfilter_.IntentFilter intentFilter,
    int i,
  ) {
    return _registerReceiver(
            _class.reference.pointer,
            _id_registerReceiver as _$jni.JMethodIDPtr,
            context.reference.pointer,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const intent_.$Intent$Type());
  }

  static final _id_registerReceiver$1 = _class.staticMethodId(
    r'registerReceiver',
    r'(Landroid/content/Context;Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;',
  );

  static final _registerReceiver$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public android.content.Intent registerReceiver(android.content.Context context, android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static intent_.Intent registerReceiver$1(
    context_.Context context,
    _$jni.JObject broadcastReceiver,
    intentfilter_.IntentFilter intentFilter,
    _$jni.JString string,
    _$jni.JObject handler,
    int i,
  ) {
    return _registerReceiver$1(
            _class.reference.pointer,
            _id_registerReceiver$1 as _$jni.JMethodIDPtr,
            context.reference.pointer,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const intent_.$Intent$Type());
  }

  static final _id_getSystemServiceName = _class.staticMethodId(
    r'getSystemServiceName',
    r'(Landroid/content/Context;Ljava/lang/Class;)Ljava/lang/String;',
  );

  static final _getSystemServiceName = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String getSystemServiceName(android.content.Context context, java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getSystemServiceName(
    context_.Context context,
    _$jni.JObject class$,
  ) {
    return _getSystemServiceName(
            _class.reference.pointer,
            _id_getSystemServiceName as _$jni.JMethodIDPtr,
            context.reference.pointer,
            class$.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_getString = _class.staticMethodId(
    r'getString',
    r'(Landroid/content/Context;I)Ljava/lang/String;',
  );

  static final _getString = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public java.lang.String getString(android.content.Context context, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getString(
    context_.Context context,
    int i,
  ) {
    return _getString(_class.reference.pointer,
            _id_getString as _$jni.JMethodIDPtr, context.reference.pointer, i)
        .object(const _$jni.JStringType());
  }

  static final _id_getContextForLanguage = _class.staticMethodId(
    r'getContextForLanguage',
    r'(Landroid/content/Context;)Landroid/content/Context;',
  );

  static final _getContextForLanguage = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.content.Context getContextForLanguage(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static context_.Context getContextForLanguage(
    context_.Context context,
  ) {
    return _getContextForLanguage(
            _class.reference.pointer,
            _id_getContextForLanguage as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const context_.$Context$Type());
  }

  static final _id_getAttributionTag = _class.staticMethodId(
    r'getAttributionTag',
    r'(Landroid/content/Context;)Ljava/lang/String;',
  );

  static final _getAttributionTag = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public java.lang.String getAttributionTag(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString getAttributionTag(
    context_.Context context,
  ) {
    return _getAttributionTag(
            _class.reference.pointer,
            _id_getAttributionTag as _$jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const _$jni.JStringType());
  }

  static final _id_createAttributionContext = _class.staticMethodId(
    r'createAttributionContext',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Context;',
  );

  static final _createAttributionContext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.content.Context createAttributionContext(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static context_.Context createAttributionContext(
    context_.Context context,
    _$jni.JString string,
  ) {
    return _createAttributionContext(
            _class.reference.pointer,
            _id_createAttributionContext as _$jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const context_.$Context$Type());
  }
}

final class $ContextCompat$Type extends _$jni.JObjType<ContextCompat> {
  @_$jni.internal
  const $ContextCompat$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroidx/core/content/ContextCompat;';

  @_$jni.internal
  @_$core.override
  ContextCompat fromReference(_$jni.JReference reference) =>
      ContextCompat.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ContextCompat$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextCompat$Type) &&
        other is $ContextCompat$Type;
  }
}
