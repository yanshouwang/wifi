// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../android/content/Intent.dart' as intent_;

import '../../../io/flutter/plugin/common/PluginRegistry.dart'
    as pluginregistry_;

/// from: `dev.hebei.wifi.ActivityX`
class ActivityX extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityX> $type;

  @_$jni.internal
  ActivityX.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'dev/hebei/wifi/ActivityX');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityX$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Ldev/hebei/wifi/ActivityX;',
  );

  /// from: `static public final dev.hebei.wifi.ActivityX INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityX get INSTANCE =>
      _id_INSTANCE.get(_class, const $ActivityX$Type());

  static final _id_addRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'addRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
  );

  static final _addRequestPermissionsResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  void addRequestPermissionsResultListener(
    pluginregistry_.PluginRegistry_RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    _addRequestPermissionsResultListener(
            reference.pointer,
            _id_addRequestPermissionsResultListener as _$jni.JMethodIDPtr,
            requestPermissionsResultListener.reference.pointer)
        .check();
  }

  static final _id_removeRequestPermissionsResultListener =
      _class.instanceMethodId(
    r'removeRequestPermissionsResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$RequestPermissionsResultListener;)V',
  );

  static final _removeRequestPermissionsResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void removeRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener requestPermissionsResultListener)`
  void removeRequestPermissionsResultListener(
    pluginregistry_.PluginRegistry_RequestPermissionsResultListener
        requestPermissionsResultListener,
  ) {
    _removeRequestPermissionsResultListener(
            reference.pointer,
            _id_removeRequestPermissionsResultListener as _$jni.JMethodIDPtr,
            requestPermissionsResultListener.reference.pointer)
        .check();
  }

  static final _id_addActivityResultListener = _class.instanceMethodId(
    r'addActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
  );

  static final _addActivityResultListener = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  void addActivityResultListener(
    pluginregistry_.PluginRegistry_ActivityResultListener
        activityResultListener,
  ) {
    _addActivityResultListener(
            reference.pointer,
            _id_addActivityResultListener as _$jni.JMethodIDPtr,
            activityResultListener.reference.pointer)
        .check();
  }

  static final _id_removeActivityResultListener = _class.instanceMethodId(
    r'removeActivityResultListener',
    r'(Lio/flutter/plugin/common/PluginRegistry$ActivityResultListener;)V',
  );

  static final _removeActivityResultListener =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public final void removeActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener activityResultListener)`
  void removeActivityResultListener(
    pluginregistry_.PluginRegistry_ActivityResultListener
        activityResultListener,
  ) {
    _removeActivityResultListener(
            reference.pointer,
            _id_removeActivityResultListener as _$jni.JMethodIDPtr,
            activityResultListener.reference.pointer)
        .check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)Z',
  );

  static final _onRequestPermissionsResult =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  bool onRequestPermissionsResult(
    int i,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JArray<_$jni.jint> is$,
  ) {
    return _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as _$jni.JMethodIDPtr,
            i,
            strings.reference.pointer,
            is$.reference.pointer)
        .boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean onActivityResult(int i, int i1, android.content.Intent intent)`
  bool onActivityResult(
    int i,
    int i1,
    intent_.Intent intent,
  ) {
    return _onActivityResult(
            reference.pointer,
            _id_onActivityResult as _$jni.JMethodIDPtr,
            i,
            i1,
            intent.reference.pointer)
        .boolean;
  }
}

final class $ActivityX$Type extends _$jni.JObjType<ActivityX> {
  @_$jni.internal
  const $ActivityX$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Ldev/hebei/wifi/ActivityX;';

  @_$jni.internal
  @_$core.override
  ActivityX fromReference(_$jni.JReference reference) =>
      ActivityX.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ActivityX$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityX$Type) && other is $ActivityX$Type;
  }
}
