// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../android/app/Activity.dart' as activity_;

import '../../../android/content/Intent.dart' as intent_;

import '../content/ContextCompat.dart' as contextcompat_;

/// from: `androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback`
class ActivityCompat_OnRequestPermissionsResultCallback extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityCompat_OnRequestPermissionsResultCallback> $type;

  @_$jni.internal
  ActivityCompat_OnRequestPermissionsResultCallback.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'androidx/core/app/ActivityCompat$OnRequestPermissionsResultCallback');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityCompat_OnRequestPermissionsResultCallback$Type();
  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r'onRequestPermissionsResult',
    r'(I[Ljava/lang/String;[I)V',
  );

  static final _onRequestPermissionsResult =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)`
  void onRequestPermissionsResult(
    int i,
    _$jni.JArray<_$jni.JString> strings,
    _$jni.JArray<_$jni.jint> is$,
  ) {
    _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as _$jni.JMethodIDPtr,
            i,
            strings.reference.pointer,
            is$.reference.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $ActivityCompat_OnRequestPermissionsResultCallback>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'onRequestPermissionsResult(I[Ljava/lang/String;[I)V') {
        _$impls[$p]!.onRequestPermissionsResult(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[2].as(const _$jni.JArrayType(_$jni.jintType()),
              releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ActivityCompat_OnRequestPermissionsResultCallback $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$OnRequestPermissionsResultCallback',
      $p,
      _$invokePointer,
      [
        if ($impl.onRequestPermissionsResult$async)
          r'onRequestPermissionsResult(I[Ljava/lang/String;[I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat_OnRequestPermissionsResultCallback.implement(
    $ActivityCompat_OnRequestPermissionsResultCallback $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat_OnRequestPermissionsResultCallback.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat_OnRequestPermissionsResultCallback {
  factory $ActivityCompat_OnRequestPermissionsResultCallback({
    required void Function(int i, _$jni.JArray<_$jni.JString> strings,
            _$jni.JArray<_$jni.jint> is$)
        onRequestPermissionsResult,
    bool onRequestPermissionsResult$async,
  }) = _$ActivityCompat_OnRequestPermissionsResultCallback;

  void onRequestPermissionsResult(
      int i, _$jni.JArray<_$jni.JString> strings, _$jni.JArray<_$jni.jint> is$);
  bool get onRequestPermissionsResult$async => false;
}

final class _$ActivityCompat_OnRequestPermissionsResultCallback
    with $ActivityCompat_OnRequestPermissionsResultCallback {
  _$ActivityCompat_OnRequestPermissionsResultCallback({
    required void Function(int i, _$jni.JArray<_$jni.JString> strings,
            _$jni.JArray<_$jni.jint> is$)
        onRequestPermissionsResult,
    this.onRequestPermissionsResult$async = false,
  }) : _onRequestPermissionsResult = onRequestPermissionsResult;

  final void Function(int i, _$jni.JArray<_$jni.JString> strings,
      _$jni.JArray<_$jni.jint> is$) _onRequestPermissionsResult;
  final bool onRequestPermissionsResult$async;

  void onRequestPermissionsResult(int i, _$jni.JArray<_$jni.JString> strings,
      _$jni.JArray<_$jni.jint> is$) {
    return _onRequestPermissionsResult(i, strings, is$);
  }
}

final class $ActivityCompat_OnRequestPermissionsResultCallback$Type
    extends _$jni.JObjType<ActivityCompat_OnRequestPermissionsResultCallback> {
  @_$jni.internal
  const $ActivityCompat_OnRequestPermissionsResultCallback$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$OnRequestPermissionsResultCallback;';

  @_$jni.internal
  @_$core.override
  ActivityCompat_OnRequestPermissionsResultCallback fromReference(
          _$jni.JReference reference) =>
      ActivityCompat_OnRequestPermissionsResultCallback.fromReference(
          reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($ActivityCompat_OnRequestPermissionsResultCallback$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat_OnRequestPermissionsResultCallback$Type) &&
        other is $ActivityCompat_OnRequestPermissionsResultCallback$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat$PermissionCompatDelegate`
class ActivityCompat_PermissionCompatDelegate extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityCompat_PermissionCompatDelegate> $type;

  @_$jni.internal
  ActivityCompat_PermissionCompatDelegate.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'androidx/core/app/ActivityCompat$PermissionCompatDelegate');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityCompat_PermissionCompatDelegate$Type();
  static final _id_requestPermissions = _class.instanceMethodId(
    r'requestPermissions',
    r'(Landroid/app/Activity;[Ljava/lang/String;I)Z',
  );

  static final _requestPermissions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `public abstract boolean requestPermissions(android.app.Activity activity, java.lang.String[] strings, int i)`
  bool requestPermissions(
    activity_.Activity activity,
    _$jni.JArray<_$jni.JString> strings,
    int i,
  ) {
    return _requestPermissions(
            reference.pointer,
            _id_requestPermissions as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            strings.reference.pointer,
            i)
        .boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r'onActivityResult',
    r'(Landroid/app/Activity;IILandroid/content/Intent;)Z',
  );

  static final _onActivityResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              int,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `public abstract boolean onActivityResult(android.app.Activity activity, int i, int i1, android.content.Intent intent)`
  bool onActivityResult(
    activity_.Activity activity,
    int i,
    int i1,
    intent_.Intent intent,
  ) {
    return _onActivityResult(
            reference.pointer,
            _id_onActivityResult as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            i,
            i1,
            intent.reference.pointer)
        .boolean;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $ActivityCompat_PermissionCompatDelegate>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'requestPermissions(Landroid/app/Activity;[Ljava/lang/String;I)Z') {
        final $r = _$impls[$p]!.requestPermissions(
          $a[0].as(const activity_.$Activity$Type(), releaseOriginal: true),
          $a[1].as(const _$jni.JArrayType(_$jni.JStringType()),
              releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
      if ($d ==
          r'onActivityResult(Landroid/app/Activity;IILandroid/content/Intent;)Z') {
        final $r = _$impls[$p]!.onActivityResult(
          $a[0].as(const activity_.$Activity$Type(), releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[2]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[3].as(const intent_.$Intent$Type(), releaseOriginal: true),
        );
        return _$jni.JBoolean($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ActivityCompat_PermissionCompatDelegate $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$PermissionCompatDelegate',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat_PermissionCompatDelegate.implement(
    $ActivityCompat_PermissionCompatDelegate $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat_PermissionCompatDelegate.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat_PermissionCompatDelegate {
  factory $ActivityCompat_PermissionCompatDelegate({
    required bool Function(activity_.Activity activity,
            _$jni.JArray<_$jni.JString> strings, int i)
        requestPermissions,
    required bool Function(
            activity_.Activity activity, int i, int i1, intent_.Intent intent)
        onActivityResult,
  }) = _$ActivityCompat_PermissionCompatDelegate;

  bool requestPermissions(
      activity_.Activity activity, _$jni.JArray<_$jni.JString> strings, int i);
  bool onActivityResult(
      activity_.Activity activity, int i, int i1, intent_.Intent intent);
}

final class _$ActivityCompat_PermissionCompatDelegate
    with $ActivityCompat_PermissionCompatDelegate {
  _$ActivityCompat_PermissionCompatDelegate({
    required bool Function(activity_.Activity activity,
            _$jni.JArray<_$jni.JString> strings, int i)
        requestPermissions,
    required bool Function(
            activity_.Activity activity, int i, int i1, intent_.Intent intent)
        onActivityResult,
  })  : _requestPermissions = requestPermissions,
        _onActivityResult = onActivityResult;

  final bool Function(activity_.Activity activity,
      _$jni.JArray<_$jni.JString> strings, int i) _requestPermissions;
  final bool Function(
          activity_.Activity activity, int i, int i1, intent_.Intent intent)
      _onActivityResult;

  bool requestPermissions(
      activity_.Activity activity, _$jni.JArray<_$jni.JString> strings, int i) {
    return _requestPermissions(activity, strings, i);
  }

  bool onActivityResult(
      activity_.Activity activity, int i, int i1, intent_.Intent intent) {
    return _onActivityResult(activity, i, i1, intent);
  }
}

final class $ActivityCompat_PermissionCompatDelegate$Type
    extends _$jni.JObjType<ActivityCompat_PermissionCompatDelegate> {
  @_$jni.internal
  const $ActivityCompat_PermissionCompatDelegate$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;';

  @_$jni.internal
  @_$core.override
  ActivityCompat_PermissionCompatDelegate fromReference(
          _$jni.JReference reference) =>
      ActivityCompat_PermissionCompatDelegate.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ActivityCompat_PermissionCompatDelegate$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat_PermissionCompatDelegate$Type) &&
        other is $ActivityCompat_PermissionCompatDelegate$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator`
class ActivityCompat_RequestPermissionsRequestCodeValidator
    extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityCompat_RequestPermissionsRequestCodeValidator>
      $type;

  @_$jni.internal
  ActivityCompat_RequestPermissionsRequestCodeValidator.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'androidx/core/app/ActivityCompat$RequestPermissionsRequestCodeValidator');

  /// The type which includes information such as the signature of this class.
  static const type =
      $ActivityCompat_RequestPermissionsRequestCodeValidator$Type();
  static final _id_validateRequestPermissionsRequestCode =
      _class.instanceMethodId(
    r'validateRequestPermissionsRequestCode',
    r'(I)V',
  );

  static final _validateRequestPermissionsRequestCode =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract void validateRequestPermissionsRequestCode(int i)`
  void validateRequestPermissionsRequestCode(
    int i,
  ) {
    _validateRequestPermissionsRequestCode(reference.pointer,
            _id_validateRequestPermissionsRequestCode as _$jni.JMethodIDPtr, i)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final _$core
      .Map<int, $ActivityCompat_RequestPermissionsRequestCodeValidator>
      _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'validateRequestPermissionsRequestCode(I)V') {
        _$impls[$p]!.validateRequestPermissionsRequestCode(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.nullptr;
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $ActivityCompat_RequestPermissionsRequestCodeValidator $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.core.app.ActivityCompat$RequestPermissionsRequestCodeValidator',
      $p,
      _$invokePointer,
      [
        if ($impl.validateRequestPermissionsRequestCode$async)
          r'validateRequestPermissionsRequestCode(I)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ActivityCompat_RequestPermissionsRequestCodeValidator.implement(
    $ActivityCompat_RequestPermissionsRequestCodeValidator $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return ActivityCompat_RequestPermissionsRequestCodeValidator.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ActivityCompat_RequestPermissionsRequestCodeValidator {
  factory $ActivityCompat_RequestPermissionsRequestCodeValidator({
    required void Function(int i) validateRequestPermissionsRequestCode,
    bool validateRequestPermissionsRequestCode$async,
  }) = _$ActivityCompat_RequestPermissionsRequestCodeValidator;

  void validateRequestPermissionsRequestCode(int i);
  bool get validateRequestPermissionsRequestCode$async => false;
}

final class _$ActivityCompat_RequestPermissionsRequestCodeValidator
    with $ActivityCompat_RequestPermissionsRequestCodeValidator {
  _$ActivityCompat_RequestPermissionsRequestCodeValidator({
    required void Function(int i) validateRequestPermissionsRequestCode,
    this.validateRequestPermissionsRequestCode$async = false,
  }) : _validateRequestPermissionsRequestCode =
            validateRequestPermissionsRequestCode;

  final void Function(int i) _validateRequestPermissionsRequestCode;
  final bool validateRequestPermissionsRequestCode$async;

  void validateRequestPermissionsRequestCode(int i) {
    return _validateRequestPermissionsRequestCode(i);
  }
}

final class $ActivityCompat_RequestPermissionsRequestCodeValidator$Type
    extends _$jni
    .JObjType<ActivityCompat_RequestPermissionsRequestCodeValidator> {
  @_$jni.internal
  const $ActivityCompat_RequestPermissionsRequestCodeValidator$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroidx/core/app/ActivityCompat$RequestPermissionsRequestCodeValidator;';

  @_$jni.internal
  @_$core.override
  ActivityCompat_RequestPermissionsRequestCodeValidator fromReference(
          _$jni.JReference reference) =>
      ActivityCompat_RequestPermissionsRequestCodeValidator.fromReference(
          reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode =>
      ($ActivityCompat_RequestPermissionsRequestCodeValidator$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ActivityCompat_RequestPermissionsRequestCodeValidator$Type) &&
        other is $ActivityCompat_RequestPermissionsRequestCodeValidator$Type;
  }
}

/// from: `androidx.core.app.ActivityCompat`
class ActivityCompat extends contextcompat_.ContextCompat {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ActivityCompat> $type;

  @_$jni.internal
  ActivityCompat.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'androidx/core/app/ActivityCompat');

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityCompat$Type();
  static final _id_setPermissionCompatDelegate = _class.staticMethodId(
    r'setPermissionCompatDelegate',
    r'(Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;)V',
  );

  static final _setPermissionCompatDelegate =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setPermissionCompatDelegate(androidx.core.app.ActivityCompat$PermissionCompatDelegate permissionCompatDelegate)`
  static void setPermissionCompatDelegate(
    ActivityCompat_PermissionCompatDelegate permissionCompatDelegate,
  ) {
    _setPermissionCompatDelegate(
            _class.reference.pointer,
            _id_setPermissionCompatDelegate as _$jni.JMethodIDPtr,
            permissionCompatDelegate.reference.pointer)
        .check();
  }

  static final _id_getPermissionCompatDelegate = _class.staticMethodId(
    r'getPermissionCompatDelegate',
    r'()Landroidx/core/app/ActivityCompat$PermissionCompatDelegate;',
  );

  static final _getPermissionCompatDelegate =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `static public androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate()`
  /// The returned object must be released after use, by calling the [release] method.
  static ActivityCompat_PermissionCompatDelegate getPermissionCompatDelegate() {
    return _getPermissionCompatDelegate(_class.reference.pointer,
            _id_getPermissionCompatDelegate as _$jni.JMethodIDPtr)
        .object(const $ActivityCompat_PermissionCompatDelegate$Type());
  }

  static final _id_invalidateOptionsMenu = _class.staticMethodId(
    r'invalidateOptionsMenu',
    r'(Landroid/app/Activity;)Z',
  );

  static final _invalidateOptionsMenu = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean invalidateOptionsMenu(android.app.Activity activity)`
  static bool invalidateOptionsMenu(
    activity_.Activity activity,
  ) {
    return _invalidateOptionsMenu(
            _class.reference.pointer,
            _id_invalidateOptionsMenu as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .boolean;
  }

  static final _id_startActivityForResult = _class.staticMethodId(
    r'startActivityForResult',
    r'(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V',
  );

  static final _startActivityForResult = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startActivityForResult(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)`
  static void startActivityForResult(
    activity_.Activity activity,
    intent_.Intent intent,
    int i,
    _$jni.JObject bundle,
  ) {
    _startActivityForResult(
            _class.reference.pointer,
            _id_startActivityForResult as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSenderForResult = _class.staticMethodId(
    r'startIntentSenderForResult',
    r'(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V',
  );

  static final _startIntentSenderForResult =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Int32,
                            _$jni.Int32,
                            _$jni.Int32,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>,
                  int,
                  _$jni.Pointer<_$jni.Void>,
                  int,
                  int,
                  int,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startIntentSenderForResult(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)`
  static void startIntentSenderForResult(
    activity_.Activity activity,
    _$jni.JObject intentSender,
    int i,
    intent_.Intent intent,
    int i1,
    int i2,
    int i3,
    _$jni.JObject bundle,
  ) {
    _startIntentSenderForResult(
            _class.reference.pointer,
            _id_startIntentSenderForResult as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _id_finishAffinity = _class.staticMethodId(
    r'finishAffinity',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishAffinity = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void finishAffinity(android.app.Activity activity)`
  static void finishAffinity(
    activity_.Activity activity,
  ) {
    _finishAffinity(
            _class.reference.pointer,
            _id_finishAffinity as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_finishAfterTransition = _class.staticMethodId(
    r'finishAfterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _finishAfterTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void finishAfterTransition(android.app.Activity activity)`
  static void finishAfterTransition(
    activity_.Activity activity,
  ) {
    _finishAfterTransition(
            _class.reference.pointer,
            _id_finishAfterTransition as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_getReferrer = _class.staticMethodId(
    r'getReferrer',
    r'(Landroid/app/Activity;)Landroid/net/Uri;',
  );

  static final _getReferrer = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.net.Uri getReferrer(android.app.Activity activity)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getReferrer(
    activity_.Activity activity,
  ) {
    return _getReferrer(_class.reference.pointer,
            _id_getReferrer as _$jni.JMethodIDPtr, activity.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_requireViewById = _class.staticMethodId(
    r'requireViewById',
    r'(Landroid/app/Activity;I)Landroid/view/View;',
  );

  static final _requireViewById = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `static public T requireViewById(android.app.Activity activity, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static $T requireViewById<$T extends _$jni.JObject>(
    activity_.Activity activity,
    int i, {
    required _$jni.JObjType<$T> T,
  }) {
    return _requireViewById(
            _class.reference.pointer,
            _id_requireViewById as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            i)
        .object(T);
  }

  static final _id_setEnterSharedElementCallback = _class.staticMethodId(
    r'setEnterSharedElementCallback',
    r'(Landroid/app/Activity;Landroidx/core/app/SharedElementCallback;)V',
  );

  static final _setEnterSharedElementCallback =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setEnterSharedElementCallback(android.app.Activity activity, androidx.core.app.SharedElementCallback sharedElementCallback)`
  static void setEnterSharedElementCallback(
    activity_.Activity activity,
    _$jni.JObject sharedElementCallback,
  ) {
    _setEnterSharedElementCallback(
            _class.reference.pointer,
            _id_setEnterSharedElementCallback as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_setExitSharedElementCallback = _class.staticMethodId(
    r'setExitSharedElementCallback',
    r'(Landroid/app/Activity;Landroidx/core/app/SharedElementCallback;)V',
  );

  static final _setExitSharedElementCallback =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setExitSharedElementCallback(android.app.Activity activity, androidx.core.app.SharedElementCallback sharedElementCallback)`
  static void setExitSharedElementCallback(
    activity_.Activity activity,
    _$jni.JObject sharedElementCallback,
  ) {
    _setExitSharedElementCallback(
            _class.reference.pointer,
            _id_setExitSharedElementCallback as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_postponeEnterTransition = _class.staticMethodId(
    r'postponeEnterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _postponeEnterTransition = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void postponeEnterTransition(android.app.Activity activity)`
  static void postponeEnterTransition(
    activity_.Activity activity,
  ) {
    _postponeEnterTransition(
            _class.reference.pointer,
            _id_postponeEnterTransition as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_startPostponedEnterTransition = _class.staticMethodId(
    r'startPostponedEnterTransition',
    r'(Landroid/app/Activity;)V',
  );

  static final _startPostponedEnterTransition =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
              'globalEnv_CallStaticVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void startPostponedEnterTransition(android.app.Activity activity)`
  static void startPostponedEnterTransition(
    activity_.Activity activity,
  ) {
    _startPostponedEnterTransition(
            _class.reference.pointer,
            _id_startPostponedEnterTransition as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_requestPermissions = _class.staticMethodId(
    r'requestPermissions',
    r'(Landroid/app/Activity;[Ljava/lang/String;I)V',
  );

  static final _requestPermissions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Int32
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              int)>();

  /// from: `static public void requestPermissions(android.app.Activity activity, java.lang.String[] strings, int i)`
  static void requestPermissions(
    activity_.Activity activity,
    _$jni.JArray<_$jni.JString> strings,
    int i,
  ) {
    _requestPermissions(
            _class.reference.pointer,
            _id_requestPermissions as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            strings.reference.pointer,
            i)
        .check();
  }

  static final _id_shouldShowRequestPermissionRationale = _class.staticMethodId(
    r'shouldShowRequestPermissionRationale',
    r'(Landroid/app/Activity;Ljava/lang/String;)Z',
  );

  static final _shouldShowRequestPermissionRationale =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticBooleanMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean shouldShowRequestPermissionRationale(android.app.Activity activity, java.lang.String string)`
  static bool shouldShowRequestPermissionRationale(
    activity_.Activity activity,
    _$jni.JString string,
  ) {
    return _shouldShowRequestPermissionRationale(
            _class.reference.pointer,
            _id_shouldShowRequestPermissionRationale as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_isLaunchedFromBubble = _class.staticMethodId(
    r'isLaunchedFromBubble',
    r'(Landroid/app/Activity;)Z',
  );

  static final _isLaunchedFromBubble = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public boolean isLaunchedFromBubble(android.app.Activity activity)`
  static bool isLaunchedFromBubble(
    activity_.Activity activity,
  ) {
    return _isLaunchedFromBubble(
            _class.reference.pointer,
            _id_isLaunchedFromBubble as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .boolean;
  }

  static final _id_requestDragAndDropPermissions = _class.staticMethodId(
    r'requestDragAndDropPermissions',
    r'(Landroid/app/Activity;Landroid/view/DragEvent;)Landroidx/core/view/DragAndDropPermissionsCompat;',
  );

  static final _requestDragAndDropPermissions =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<
                          (
                            _$jni.Pointer<_$jni.Void>,
                            _$jni.Pointer<_$jni.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public androidx.core.view.DragAndDropPermissionsCompat requestDragAndDropPermissions(android.app.Activity activity, android.view.DragEvent dragEvent)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject requestDragAndDropPermissions(
    activity_.Activity activity,
    _$jni.JObject dragEvent,
  ) {
    return _requestDragAndDropPermissions(
            _class.reference.pointer,
            _id_requestDragAndDropPermissions as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            dragEvent.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_recreate = _class.staticMethodId(
    r'recreate',
    r'(Landroid/app/Activity;)V',
  );

  static final _recreate = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void recreate(android.app.Activity activity)`
  static void recreate(
    activity_.Activity activity,
  ) {
    _recreate(_class.reference.pointer, _id_recreate as _$jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_setLocusContext = _class.staticMethodId(
    r'setLocusContext',
    r'(Landroid/app/Activity;Landroidx/core/content/LocusIdCompat;Landroid/os/Bundle;)V',
  );

  static final _setLocusContext = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public void setLocusContext(android.app.Activity activity, androidx.core.content.LocusIdCompat locusIdCompat, android.os.Bundle bundle)`
  static void setLocusContext(
    activity_.Activity activity,
    _$jni.JObject locusIdCompat,
    _$jni.JObject bundle,
  ) {
    _setLocusContext(
            _class.reference.pointer,
            _id_setLocusContext as _$jni.JMethodIDPtr,
            activity.reference.pointer,
            locusIdCompat.reference.pointer,
            bundle.reference.pointer)
        .check();
  }
}

final class $ActivityCompat$Type extends _$jni.JObjType<ActivityCompat> {
  @_$jni.internal
  const $ActivityCompat$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroidx/core/app/ActivityCompat;';

  @_$jni.internal
  @_$core.override
  ActivityCompat fromReference(_$jni.JReference reference) =>
      ActivityCompat.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const contextcompat_.$ContextCompat$Type();

  @_$jni.internal
  @_$core.override
  final superCount = 2;

  @_$core.override
  int get hashCode => ($ActivityCompat$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityCompat$Type) &&
        other is $ActivityCompat$Type;
  }
}
