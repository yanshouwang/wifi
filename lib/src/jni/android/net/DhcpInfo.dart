// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `android.net.DhcpInfo`
class DhcpInfo extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<DhcpInfo> $type;

  @_$jni.internal
  DhcpInfo.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/net/DhcpInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $DhcpInfo$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  static final _id_dns1 = _class.instanceFieldId(
    r'dns1',
    r'I',
  );

  /// from: `public int dns1`
  int get dns1 => _id_dns1.get(this, const _$jni.jintType());

  /// from: `public int dns1`
  set dns1(int value) => _id_dns1.set(this, const _$jni.jintType(), value);

  static final _id_dns2 = _class.instanceFieldId(
    r'dns2',
    r'I',
  );

  /// from: `public int dns2`
  int get dns2 => _id_dns2.get(this, const _$jni.jintType());

  /// from: `public int dns2`
  set dns2(int value) => _id_dns2.set(this, const _$jni.jintType(), value);

  static final _id_gateway = _class.instanceFieldId(
    r'gateway',
    r'I',
  );

  /// from: `public int gateway`
  int get gateway => _id_gateway.get(this, const _$jni.jintType());

  /// from: `public int gateway`
  set gateway(int value) =>
      _id_gateway.set(this, const _$jni.jintType(), value);

  static final _id_ipAddress = _class.instanceFieldId(
    r'ipAddress',
    r'I',
  );

  /// from: `public int ipAddress`
  int get ipAddress => _id_ipAddress.get(this, const _$jni.jintType());

  /// from: `public int ipAddress`
  set ipAddress(int value) =>
      _id_ipAddress.set(this, const _$jni.jintType(), value);

  static final _id_leaseDuration = _class.instanceFieldId(
    r'leaseDuration',
    r'I',
  );

  /// from: `public int leaseDuration`
  int get leaseDuration => _id_leaseDuration.get(this, const _$jni.jintType());

  /// from: `public int leaseDuration`
  set leaseDuration(int value) =>
      _id_leaseDuration.set(this, const _$jni.jintType(), value);

  static final _id_netmask = _class.instanceFieldId(
    r'netmask',
    r'I',
  );

  /// from: `public int netmask`
  int get netmask => _id_netmask.get(this, const _$jni.jintType());

  /// from: `public int netmask`
  set netmask(int value) =>
      _id_netmask.set(this, const _$jni.jintType(), value);

  static final _id_serverAddress = _class.instanceFieldId(
    r'serverAddress',
    r'I',
  );

  /// from: `public int serverAddress`
  int get serverAddress => _id_serverAddress.get(this, const _$jni.jintType());

  /// from: `public int serverAddress`
  set serverAddress(int value) =>
      _id_serverAddress.set(this, const _$jni.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory DhcpInfo() {
    return DhcpInfo.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $DhcpInfo$Type extends _$jni.JObjType<DhcpInfo> {
  @_$jni.internal
  const $DhcpInfo$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/DhcpInfo;';

  @_$jni.internal
  @_$core.override
  DhcpInfo fromReference(_$jni.JReference reference) =>
      DhcpInfo.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($DhcpInfo$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($DhcpInfo$Type) && other is $DhcpInfo$Type;
  }
}
