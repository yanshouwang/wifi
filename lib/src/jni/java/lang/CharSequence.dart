// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `java.lang.CharSequence`
class CharSequence extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<CharSequence> $type;

  @_$jni.internal
  CharSequence.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'java/lang/CharSequence');

  /// The type which includes information such as the signature of this class.
  static const type = $CharSequence$Type();
  static final _id_length = _class.instanceMethodId(
    r'length',
    r'()I',
  );

  static final _length = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract int length()`
  int length() {
    return _length(reference.pointer, _id_length as _$jni.JMethodIDPtr).integer;
  }

  static final _id_charAt = _class.instanceMethodId(
    r'charAt',
    r'(I)C',
  );

  static final _charAt = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallCharMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public abstract char charAt(int i)`
  int charAt(
    int i,
  ) {
    return _charAt(reference.pointer, _id_charAt as _$jni.JMethodIDPtr, i).char;
  }

  static final _id_subSequence = _class.instanceMethodId(
    r'subSequence',
    r'(II)Ljava/lang/CharSequence;',
  );

  static final _subSequence = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `public abstract java.lang.CharSequence subSequence(int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  CharSequence subSequence(
    int i,
    int i1,
  ) {
    return _subSequence(
            reference.pointer, _id_subSequence as _$jni.JMethodIDPtr, i, i1)
        .object(const $CharSequence$Type());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public abstract java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_chars = _class.instanceMethodId(
    r'chars',
    r'()Ljava/util/stream/IntStream;',
  );

  static final _chars = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.stream.IntStream chars()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject chars() {
    return _chars(reference.pointer, _id_chars as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_codePoints = _class.instanceMethodId(
    r'codePoints',
    r'()Ljava/util/stream/IntStream;',
  );

  static final _codePoints = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.stream.IntStream codePoints()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject codePoints() {
    return _codePoints(reference.pointer, _id_codePoints as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_compare = _class.staticMethodId(
    r'compare',
    r'(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I',
  );

  static final _compare = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Pointer<_$jni.Void>,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr,
              _$jni.Pointer<_$jni.Void>,
              _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public int compare(java.lang.CharSequence charSequence, java.lang.CharSequence charSequence1)`
  static int compare(
    CharSequence charSequence,
    CharSequence charSequence1,
  ) {
    return _compare(_class.reference.pointer, _id_compare as _$jni.JMethodIDPtr,
            charSequence.reference.pointer, charSequence1.reference.pointer)
        .integer;
  }

  /// Maps a specific port to the implemented interface.
  static final _$core.Map<int, $CharSequence> _$impls = {};
  static _$jni.JObjectPtr _$invoke(
    int port,
    _$jni.JObjectPtr descriptor,
    _$jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      _$jni.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final _$jni.Pointer<
          _$jni.NativeFunction<
              _$jni.JObjectPtr Function(
                  _$jni.Int64, _$jni.JObjectPtr, _$jni.JObjectPtr)>>
      _$invokePointer = _$jni.Pointer.fromFunction(_$invoke);

  static _$jni.Pointer<_$jni.Void> _$invokeMethod(
    int $p,
    _$jni.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r'length()I') {
        final $r = _$impls[$p]!.length();
        return _$jni.JInteger($r).reference.toPointer();
      }
      if ($d == r'charAt(I)C') {
        final $r = _$impls[$p]!.charAt(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return _$jni.JCharacter($r).reference.toPointer();
      }
      if ($d == r'subSequence(II)Ljava/lang/CharSequence;') {
        final $r = _$impls[$p]!.subSequence(
          $a[0]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[1]
              .as(const _$jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
        );
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'toString()Ljava/lang/String;') {
        final $r = _$impls[$p]!.toString$1();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'chars()Ljava/util/stream/IntStream;') {
        final $r = _$impls[$p]!.chars();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'codePoints()Ljava/util/stream/IntStream;') {
        final $r = _$impls[$p]!.codePoints();
        return ($r as _$jni.JObject)
            .as(const _$jni.JObjectType())
            .reference
            .toPointer();
      }
      if ($d == r'compare(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)I') {
        final $r = _$impls[$p]!.compare(
          $a[0].as(const $CharSequence$Type(), releaseOriginal: true),
          $a[1].as(const $CharSequence$Type(), releaseOriginal: true),
        );
        return _$jni.JInteger($r).reference.toPointer();
      }
    } catch (e) {
      return _$jni.ProtectedJniExtensions.newDartException(e);
    }
    return _$jni.nullptr;
  }

  static void implementIn(
    _$jni.JImplementer implementer,
    $CharSequence $impl,
  ) {
    late final _$jni.RawReceivePort $p;
    $p = _$jni.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = _$jni.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      _$jni.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'java.lang.CharSequence',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory CharSequence.implement(
    $CharSequence $impl,
  ) {
    final $i = _$jni.JImplementer();
    implementIn($i, $impl);
    return CharSequence.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $CharSequence {
  factory $CharSequence({
    required int Function() length,
    required int Function(int i) charAt,
    required CharSequence Function(int i, int i1) subSequence,
    required _$jni.JString Function() toString$1,
    required _$jni.JObject Function() chars,
    required _$jni.JObject Function() codePoints,
    required int Function(CharSequence charSequence, CharSequence charSequence1)
        compare,
  }) = _$CharSequence;

  int length();
  int charAt(int i);
  CharSequence subSequence(int i, int i1);
  _$jni.JString toString$1();
  _$jni.JObject chars();
  _$jni.JObject codePoints();
  int compare(CharSequence charSequence, CharSequence charSequence1);
}

final class _$CharSequence with $CharSequence {
  _$CharSequence({
    required int Function() length,
    required int Function(int i) charAt,
    required CharSequence Function(int i, int i1) subSequence,
    required _$jni.JString Function() toString$1,
    required _$jni.JObject Function() chars,
    required _$jni.JObject Function() codePoints,
    required int Function(CharSequence charSequence, CharSequence charSequence1)
        compare,
  })  : _length = length,
        _charAt = charAt,
        _subSequence = subSequence,
        _toString$1 = toString$1,
        _chars = chars,
        _codePoints = codePoints,
        _compare = compare;

  final int Function() _length;
  final int Function(int i) _charAt;
  final CharSequence Function(int i, int i1) _subSequence;
  final _$jni.JString Function() _toString$1;
  final _$jni.JObject Function() _chars;
  final _$jni.JObject Function() _codePoints;
  final int Function(CharSequence charSequence, CharSequence charSequence1)
      _compare;

  int length() {
    return _length();
  }

  int charAt(int i) {
    return _charAt(i);
  }

  CharSequence subSequence(int i, int i1) {
    return _subSequence(i, i1);
  }

  _$jni.JString toString$1() {
    return _toString$1();
  }

  _$jni.JObject chars() {
    return _chars();
  }

  _$jni.JObject codePoints() {
    return _codePoints();
  }

  int compare(CharSequence charSequence, CharSequence charSequence1) {
    return _compare(charSequence, charSequence1);
  }
}

final class $CharSequence$Type extends _$jni.JObjType<CharSequence> {
  @_$jni.internal
  const $CharSequence$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Ljava/lang/CharSequence;';

  @_$jni.internal
  @_$core.override
  CharSequence fromReference(_$jni.JReference reference) =>
      CharSequence.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($CharSequence$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($CharSequence$Type) &&
        other is $CharSequence$Type;
  }
}
