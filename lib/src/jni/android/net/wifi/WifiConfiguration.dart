// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

/// from: `android.net.wifi.WifiConfiguration$AuthAlgorithm`
class WifiConfiguration_AuthAlgorithm extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_AuthAlgorithm> $type;

  @_$jni.internal
  WifiConfiguration_AuthAlgorithm.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration$AuthAlgorithm');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_AuthAlgorithm$Type();

  /// from: `static public final int LEAP`
  static const LEAP = 2;

  /// from: `static public final int OPEN`
  static const OPEN = 0;

  /// from: `static public final int SAE`
  static const SAE = 3;

  /// from: `static public final int SHARED`
  static const SHARED = 1;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));

  static final _id_varName = _class.staticFieldId(
    r'varName',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String varName`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get varName =>
      _id_varName.get(_class, const _$jni.JStringType());
}

final class $WifiConfiguration_AuthAlgorithm$Type
    extends _$jni.JObjType<WifiConfiguration_AuthAlgorithm> {
  @_$jni.internal
  const $WifiConfiguration_AuthAlgorithm$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration$AuthAlgorithm;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_AuthAlgorithm fromReference(_$jni.JReference reference) =>
      WifiConfiguration_AuthAlgorithm.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_AuthAlgorithm$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_AuthAlgorithm$Type) &&
        other is $WifiConfiguration_AuthAlgorithm$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$GroupCipher`
class WifiConfiguration_GroupCipher extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_GroupCipher> $type;

  @_$jni.internal
  WifiConfiguration_GroupCipher.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration$GroupCipher');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_GroupCipher$Type();

  /// from: `static public final int CCMP`
  static const CCMP = 3;

  /// from: `static public final int GCMP_128`
  static const GCMP_128 = 7;

  /// from: `static public final int GCMP_256`
  static const GCMP_256 = 5;

  /// from: `static public final int SMS4`
  static const SMS4 = 6;

  /// from: `static public final int TKIP`
  static const TKIP = 2;

  /// from: `static public final int WEP104`
  static const WEP104 = 1;

  /// from: `static public final int WEP40`
  static const WEP40 = 0;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));

  static final _id_varName = _class.staticFieldId(
    r'varName',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String varName`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get varName =>
      _id_varName.get(_class, const _$jni.JStringType());
}

final class $WifiConfiguration_GroupCipher$Type
    extends _$jni.JObjType<WifiConfiguration_GroupCipher> {
  @_$jni.internal
  const $WifiConfiguration_GroupCipher$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration$GroupCipher;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_GroupCipher fromReference(_$jni.JReference reference) =>
      WifiConfiguration_GroupCipher.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_GroupCipher$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_GroupCipher$Type) &&
        other is $WifiConfiguration_GroupCipher$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$GroupMgmtCipher`
class WifiConfiguration_GroupMgmtCipher extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_GroupMgmtCipher> $type;

  @_$jni.internal
  WifiConfiguration_GroupMgmtCipher.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiConfiguration$GroupMgmtCipher');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_GroupMgmtCipher$Type();

  /// from: `static public final int BIP_CMAC_256`
  static const BIP_CMAC_256 = 0;

  /// from: `static public final int BIP_GMAC_128`
  static const BIP_GMAC_128 = 1;

  /// from: `static public final int BIP_GMAC_256`
  static const BIP_GMAC_256 = 2;
}

final class $WifiConfiguration_GroupMgmtCipher$Type
    extends _$jni.JObjType<WifiConfiguration_GroupMgmtCipher> {
  @_$jni.internal
  const $WifiConfiguration_GroupMgmtCipher$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiConfiguration$GroupMgmtCipher;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_GroupMgmtCipher fromReference(_$jni.JReference reference) =>
      WifiConfiguration_GroupMgmtCipher.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_GroupMgmtCipher$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_GroupMgmtCipher$Type) &&
        other is $WifiConfiguration_GroupMgmtCipher$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$KeyMgmt`
class WifiConfiguration_KeyMgmt extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_KeyMgmt> $type;

  @_$jni.internal
  WifiConfiguration_KeyMgmt.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration$KeyMgmt');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_KeyMgmt$Type();

  /// from: `static public final int DPP`
  static const DPP = 17;

  /// from: `static public final int FILS_SHA256`
  static const FILS_SHA256 = 15;

  /// from: `static public final int FILS_SHA384`
  static const FILS_SHA384 = 16;

  /// from: `static public final int FT_EAP`
  static const FT_EAP = 7;

  /// from: `static public final int FT_PSK`
  static const FT_PSK = 6;

  /// from: `static public final int IEEE8021X`
  static const IEEE8021X = 3;

  /// from: `static public final int NONE`
  static const NONE = 0;

  /// from: `static public final int OSEN`
  static const OSEN = 5;

  /// from: `static public final int OWE`
  static const OWE = 9;

  /// from: `static public final int SAE`
  static const SAE = 8;

  /// from: `static public final int SUITE_B_192`
  static const SUITE_B_192 = 10;

  /// from: `static public final int WAPI_CERT`
  static const WAPI_CERT = 14;

  /// from: `static public final int WAPI_PSK`
  static const WAPI_PSK = 13;

  /// from: `static public final int WPA2_PSK`
  static const WPA2_PSK = 4;

  /// from: `static public final int WPA_EAP`
  static const WPA_EAP = 2;

  /// from: `static public final int WPA_EAP_SHA256`
  static const WPA_EAP_SHA256 = 12;

  /// from: `static public final int WPA_PSK`
  static const WPA_PSK = 1;

  /// from: `static public final int WPA_PSK_SHA256`
  static const WPA_PSK_SHA256 = 11;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));

  static final _id_varName = _class.staticFieldId(
    r'varName',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String varName`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get varName =>
      _id_varName.get(_class, const _$jni.JStringType());
}

final class $WifiConfiguration_KeyMgmt$Type
    extends _$jni.JObjType<WifiConfiguration_KeyMgmt> {
  @_$jni.internal
  const $WifiConfiguration_KeyMgmt$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration$KeyMgmt;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_KeyMgmt fromReference(_$jni.JReference reference) =>
      WifiConfiguration_KeyMgmt.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_KeyMgmt$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_KeyMgmt$Type) &&
        other is $WifiConfiguration_KeyMgmt$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$PairwiseCipher`
class WifiConfiguration_PairwiseCipher extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_PairwiseCipher> $type;

  @_$jni.internal
  WifiConfiguration_PairwiseCipher.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(
      r'android/net/wifi/WifiConfiguration$PairwiseCipher');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_PairwiseCipher$Type();

  /// from: `static public final int CCMP`
  static const CCMP = 2;

  /// from: `static public final int GCMP_128`
  static const GCMP_128 = 5;

  /// from: `static public final int GCMP_256`
  static const GCMP_256 = 3;

  /// from: `static public final int NONE`
  static const NONE = 0;

  /// from: `static public final int SMS4`
  static const SMS4 = 4;

  /// from: `static public final int TKIP`
  static const TKIP = 1;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));

  static final _id_varName = _class.staticFieldId(
    r'varName',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String varName`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get varName =>
      _id_varName.get(_class, const _$jni.JStringType());
}

final class $WifiConfiguration_PairwiseCipher$Type
    extends _$jni.JObjType<WifiConfiguration_PairwiseCipher> {
  @_$jni.internal
  const $WifiConfiguration_PairwiseCipher$Type();

  @_$jni.internal
  @_$core.override
  String get signature =>
      r'Landroid/net/wifi/WifiConfiguration$PairwiseCipher;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_PairwiseCipher fromReference(_$jni.JReference reference) =>
      WifiConfiguration_PairwiseCipher.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_PairwiseCipher$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_PairwiseCipher$Type) &&
        other is $WifiConfiguration_PairwiseCipher$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$Protocol`
class WifiConfiguration_Protocol extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_Protocol> $type;

  @_$jni.internal
  WifiConfiguration_Protocol.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration$Protocol');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_Protocol$Type();

  /// from: `static public final int RSN`
  static const RSN = 1;

  /// from: `static public final int WAPI`
  static const WAPI = 3;

  /// from: `static public final int WPA`
  static const WPA = 0;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));

  static final _id_varName = _class.staticFieldId(
    r'varName',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String varName`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get varName =>
      _id_varName.get(_class, const _$jni.JStringType());
}

final class $WifiConfiguration_Protocol$Type
    extends _$jni.JObjType<WifiConfiguration_Protocol> {
  @_$jni.internal
  const $WifiConfiguration_Protocol$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration$Protocol;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_Protocol fromReference(_$jni.JReference reference) =>
      WifiConfiguration_Protocol.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_Protocol$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_Protocol$Type) &&
        other is $WifiConfiguration_Protocol$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration$Status`
class WifiConfiguration_Status extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration_Status> $type;

  @_$jni.internal
  WifiConfiguration_Status.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration$Status');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration_Status$Type();

  /// from: `static public final int CURRENT`
  static const CURRENT = 0;

  /// from: `static public final int DISABLED`
  static const DISABLED = 1;

  /// from: `static public final int ENABLED`
  static const ENABLED = 2;
  static final _id_strings = _class.staticFieldId(
    r'strings',
    r'[Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String[] strings`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JArray<_$jni.JString> get strings =>
      _id_strings.get(_class, const _$jni.JArrayType(_$jni.JStringType()));
}

final class $WifiConfiguration_Status$Type
    extends _$jni.JObjType<WifiConfiguration_Status> {
  @_$jni.internal
  const $WifiConfiguration_Status$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration$Status;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration_Status fromReference(_$jni.JReference reference) =>
      WifiConfiguration_Status.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration_Status$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration_Status$Type) &&
        other is $WifiConfiguration_Status$Type;
  }
}

/// from: `android.net.wifi.WifiConfiguration`
class WifiConfiguration extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiConfiguration> $type;

  @_$jni.internal
  WifiConfiguration.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiConfiguration');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiConfiguration$Type();
  static final _id_BSSID = _class.instanceFieldId(
    r'BSSID',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String BSSID`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get BSSID => _id_BSSID.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String BSSID`
  /// The returned object must be released after use, by calling the [release] method.
  set BSSID(_$jni.JString value) =>
      _id_BSSID.set(this, const _$jni.JStringType(), value);

  static final _id_FQDN = _class.instanceFieldId(
    r'FQDN',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String FQDN`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get FQDN => _id_FQDN.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String FQDN`
  /// The returned object must be released after use, by calling the [release] method.
  set FQDN(_$jni.JString value) =>
      _id_FQDN.set(this, const _$jni.JStringType(), value);

  /// from: `static public final int RANDOMIZATION_AUTO`
  static const RANDOMIZATION_AUTO = 3;

  /// from: `static public final int RANDOMIZATION_NONE`
  static const RANDOMIZATION_NONE = 0;

  /// from: `static public final int RANDOMIZATION_NON_PERSISTENT`
  static const RANDOMIZATION_NON_PERSISTENT = 2;

  /// from: `static public final int RANDOMIZATION_PERSISTENT`
  static const RANDOMIZATION_PERSISTENT = 1;

  /// from: `static public final int SECURITY_TYPE_DPP`
  static const SECURITY_TYPE_DPP = 13;

  /// from: `static public final int SECURITY_TYPE_EAP`
  static const SECURITY_TYPE_EAP = 3;

  /// from: `static public final int SECURITY_TYPE_EAP_SUITE_B`
  static const SECURITY_TYPE_EAP_SUITE_B = 5;

  /// from: `static public final int SECURITY_TYPE_EAP_WPA3_ENTERPRISE`
  static const SECURITY_TYPE_EAP_WPA3_ENTERPRISE = 9;

  /// from: `static public final int SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT`
  static const SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT = 5;

  /// from: `static public final int SECURITY_TYPE_OPEN`
  static const SECURITY_TYPE_OPEN = 0;

  /// from: `static public final int SECURITY_TYPE_OWE`
  static const SECURITY_TYPE_OWE = 6;

  /// from: `static public final int SECURITY_TYPE_PSK`
  static const SECURITY_TYPE_PSK = 2;

  /// from: `static public final int SECURITY_TYPE_SAE`
  static const SECURITY_TYPE_SAE = 4;

  /// from: `static public final int SECURITY_TYPE_WAPI_CERT`
  static const SECURITY_TYPE_WAPI_CERT = 8;

  /// from: `static public final int SECURITY_TYPE_WAPI_PSK`
  static const SECURITY_TYPE_WAPI_PSK = 7;

  /// from: `static public final int SECURITY_TYPE_WEP`
  static const SECURITY_TYPE_WEP = 1;
  static final _id_SSID = _class.instanceFieldId(
    r'SSID',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String SSID`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get SSID => _id_SSID.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String SSID`
  /// The returned object must be released after use, by calling the [release] method.
  set SSID(_$jni.JString value) =>
      _id_SSID.set(this, const _$jni.JStringType(), value);

  static final _id_allowedAuthAlgorithms = _class.instanceFieldId(
    r'allowedAuthAlgorithms',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedAuthAlgorithms`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedAuthAlgorithms =>
      _id_allowedAuthAlgorithms.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedAuthAlgorithms`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedAuthAlgorithms(_$jni.JObject value) =>
      _id_allowedAuthAlgorithms.set(this, const _$jni.JObjectType(), value);

  static final _id_allowedGroupCiphers = _class.instanceFieldId(
    r'allowedGroupCiphers',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedGroupCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedGroupCiphers =>
      _id_allowedGroupCiphers.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedGroupCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedGroupCiphers(_$jni.JObject value) =>
      _id_allowedGroupCiphers.set(this, const _$jni.JObjectType(), value);

  static final _id_allowedGroupManagementCiphers = _class.instanceFieldId(
    r'allowedGroupManagementCiphers',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedGroupManagementCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedGroupManagementCiphers =>
      _id_allowedGroupManagementCiphers.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedGroupManagementCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedGroupManagementCiphers(_$jni.JObject value) =>
      _id_allowedGroupManagementCiphers.set(
          this, const _$jni.JObjectType(), value);

  static final _id_allowedKeyManagement = _class.instanceFieldId(
    r'allowedKeyManagement',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedKeyManagement`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedKeyManagement =>
      _id_allowedKeyManagement.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedKeyManagement`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedKeyManagement(_$jni.JObject value) =>
      _id_allowedKeyManagement.set(this, const _$jni.JObjectType(), value);

  static final _id_allowedPairwiseCiphers = _class.instanceFieldId(
    r'allowedPairwiseCiphers',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedPairwiseCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedPairwiseCiphers =>
      _id_allowedPairwiseCiphers.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedPairwiseCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedPairwiseCiphers(_$jni.JObject value) =>
      _id_allowedPairwiseCiphers.set(this, const _$jni.JObjectType(), value);

  static final _id_allowedProtocols = _class.instanceFieldId(
    r'allowedProtocols',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedProtocols`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedProtocols =>
      _id_allowedProtocols.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedProtocols`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedProtocols(_$jni.JObject value) =>
      _id_allowedProtocols.set(this, const _$jni.JObjectType(), value);

  static final _id_allowedSuiteBCiphers = _class.instanceFieldId(
    r'allowedSuiteBCiphers',
    r'Ljava/util/BitSet;',
  );

  /// from: `public java.util.BitSet allowedSuiteBCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get allowedSuiteBCiphers =>
      _id_allowedSuiteBCiphers.get(this, const _$jni.JObjectType());

  /// from: `public java.util.BitSet allowedSuiteBCiphers`
  /// The returned object must be released after use, by calling the [release] method.
  set allowedSuiteBCiphers(_$jni.JObject value) =>
      _id_allowedSuiteBCiphers.set(this, const _$jni.JObjectType(), value);

  static final _id_enterpriseConfig = _class.instanceFieldId(
    r'enterpriseConfig',
    r'Landroid/net/wifi/WifiEnterpriseConfig;',
  );

  /// from: `public android.net.wifi.WifiEnterpriseConfig enterpriseConfig`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject get enterpriseConfig =>
      _id_enterpriseConfig.get(this, const _$jni.JObjectType());

  /// from: `public android.net.wifi.WifiEnterpriseConfig enterpriseConfig`
  /// The returned object must be released after use, by calling the [release] method.
  set enterpriseConfig(_$jni.JObject value) =>
      _id_enterpriseConfig.set(this, const _$jni.JObjectType(), value);

  static final _id_hiddenSSID = _class.instanceFieldId(
    r'hiddenSSID',
    r'Z',
  );

  /// from: `public boolean hiddenSSID`
  bool get hiddenSSID => _id_hiddenSSID.get(this, const _$jni.jbooleanType());

  /// from: `public boolean hiddenSSID`
  set hiddenSSID(bool value) =>
      _id_hiddenSSID.set(this, const _$jni.jbooleanType(), value);

  static final _id_isHomeProviderNetwork = _class.instanceFieldId(
    r'isHomeProviderNetwork',
    r'Z',
  );

  /// from: `public boolean isHomeProviderNetwork`
  bool get isHomeProviderNetwork =>
      _id_isHomeProviderNetwork.get(this, const _$jni.jbooleanType());

  /// from: `public boolean isHomeProviderNetwork`
  set isHomeProviderNetwork(bool value) =>
      _id_isHomeProviderNetwork.set(this, const _$jni.jbooleanType(), value);

  static final _id_networkId = _class.instanceFieldId(
    r'networkId',
    r'I',
  );

  /// from: `public int networkId`
  int get networkId => _id_networkId.get(this, const _$jni.jintType());

  /// from: `public int networkId`
  set networkId(int value) =>
      _id_networkId.set(this, const _$jni.jintType(), value);

  static final _id_preSharedKey = _class.instanceFieldId(
    r'preSharedKey',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String preSharedKey`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get preSharedKey =>
      _id_preSharedKey.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String preSharedKey`
  /// The returned object must be released after use, by calling the [release] method.
  set preSharedKey(_$jni.JString value) =>
      _id_preSharedKey.set(this, const _$jni.JStringType(), value);

  static final _id_priority = _class.instanceFieldId(
    r'priority',
    r'I',
  );

  /// from: `public int priority`
  int get priority => _id_priority.get(this, const _$jni.jintType());

  /// from: `public int priority`
  set priority(int value) =>
      _id_priority.set(this, const _$jni.jintType(), value);

  static final _id_providerFriendlyName = _class.instanceFieldId(
    r'providerFriendlyName',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String providerFriendlyName`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get providerFriendlyName =>
      _id_providerFriendlyName.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String providerFriendlyName`
  /// The returned object must be released after use, by calling the [release] method.
  set providerFriendlyName(_$jni.JString value) =>
      _id_providerFriendlyName.set(this, const _$jni.JStringType(), value);

  static final _id_roamingConsortiumIds = _class.instanceFieldId(
    r'roamingConsortiumIds',
    r'[J',
  );

  /// from: `public long[] roamingConsortiumIds`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jlong> get roamingConsortiumIds => _id_roamingConsortiumIds
      .get(this, const _$jni.JArrayType(_$jni.jlongType()));

  /// from: `public long[] roamingConsortiumIds`
  /// The returned object must be released after use, by calling the [release] method.
  set roamingConsortiumIds(_$jni.JArray<_$jni.jlong> value) =>
      _id_roamingConsortiumIds.set(
          this, const _$jni.JArrayType(_$jni.jlongType()), value);

  static final _id_status = _class.instanceFieldId(
    r'status',
    r'I',
  );

  /// from: `public int status`
  int get status => _id_status.get(this, const _$jni.jintType());

  /// from: `public int status`
  set status(int value) => _id_status.set(this, const _$jni.jintType(), value);

  static final _id_wepKeys = _class.instanceFieldId(
    r'wepKeys',
    r'[Ljava/lang/String;',
  );

  /// from: `public java.lang.String[] wepKeys`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.JString> get wepKeys =>
      _id_wepKeys.get(this, const _$jni.JArrayType(_$jni.JStringType()));

  /// from: `public java.lang.String[] wepKeys`
  /// The returned object must be released after use, by calling the [release] method.
  set wepKeys(_$jni.JArray<_$jni.JString> value) =>
      _id_wepKeys.set(this, const _$jni.JArrayType(_$jni.JStringType()), value);

  static final _id_wepTxKeyIndex = _class.instanceFieldId(
    r'wepTxKeyIndex',
    r'I',
  );

  /// from: `public int wepTxKeyIndex`
  int get wepTxKeyIndex => _id_wepTxKeyIndex.get(this, const _$jni.jintType());

  /// from: `public int wepTxKeyIndex`
  set wepTxKeyIndex(int value) =>
      _id_wepTxKeyIndex.set(this, const _$jni.jintType(), value);

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiConfiguration() {
    return WifiConfiguration.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/net/wifi/WifiConfiguration;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.net.wifi.WifiConfiguration wifiConfiguration)`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiConfiguration.new$1(
    WifiConfiguration wifiConfiguration,
  ) {
    return WifiConfiguration.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            wifiConfiguration.reference.pointer)
        .reference);
  }

  static final _id_setSecurityParams = _class.instanceMethodId(
    r'setSecurityParams',
    r'(I)V',
  );

  static final _setSecurityParams = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setSecurityParams(int i)`
  void setSecurityParams(
    int i,
  ) {
    _setSecurityParams(
            reference.pointer, _id_setSecurityParams as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setMacRandomizationSetting = _class.instanceMethodId(
    r'setMacRandomizationSetting',
    r'(I)V',
  );

  static final _setMacRandomizationSetting =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              _$jni.JThrowablePtr Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public void setMacRandomizationSetting(int i)`
  void setMacRandomizationSetting(
    int i,
  ) {
    _setMacRandomizationSetting(reference.pointer,
            _id_setMacRandomizationSetting as _$jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getMacRandomizationSetting = _class.instanceMethodId(
    r'getMacRandomizationSetting',
    r'()I',
  );

  static final _getMacRandomizationSetting =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getMacRandomizationSetting()`
  int getMacRandomizationSetting() {
    return _getMacRandomizationSetting(reference.pointer,
            _id_getMacRandomizationSetting as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getRandomizedMacAddress = _class.instanceMethodId(
    r'getRandomizedMacAddress',
    r'()Landroid/net/MacAddress;',
  );

  static final _getRandomizedMacAddress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.MacAddress getRandomizedMacAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getRandomizedMacAddress() {
    return _getRandomizedMacAddress(reference.pointer,
            _id_getRandomizedMacAddress as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_isDppConfigurator = _class.instanceMethodId(
    r'isDppConfigurator',
    r'()Z',
  );

  static final _isDppConfigurator = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isDppConfigurator()`
  bool isDppConfigurator() {
    return _isDppConfigurator(
            reference.pointer, _id_isDppConfigurator as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPasspoint = _class.instanceMethodId(
    r'isPasspoint',
    r'()Z',
  );

  static final _isPasspoint = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isPasspoint()`
  bool isPasspoint() {
    return _isPasspoint(
            reference.pointer, _id_isPasspoint as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getKey = _class.instanceMethodId(
    r'getKey',
    r'()Ljava/lang/String;',
  );

  static final _getKey = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getKey()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getKey() {
    return _getKey(reference.pointer, _id_getKey as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_setIpConfiguration = _class.instanceMethodId(
    r'setIpConfiguration',
    r'(Landroid/net/IpConfiguration;)V',
  );

  static final _setIpConfiguration = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setIpConfiguration(android.net.IpConfiguration ipConfiguration)`
  void setIpConfiguration(
    _$jni.JObject ipConfiguration,
  ) {
    _setIpConfiguration(
            reference.pointer,
            _id_setIpConfiguration as _$jni.JMethodIDPtr,
            ipConfiguration.reference.pointer)
        .check();
  }

  static final _id_getHttpProxy = _class.instanceMethodId(
    r'getHttpProxy',
    r'()Landroid/net/ProxyInfo;',
  );

  static final _getHttpProxy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.ProxyInfo getHttpProxy()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getHttpProxy() {
    return _getHttpProxy(
            reference.pointer, _id_getHttpProxy as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_setHttpProxy = _class.instanceMethodId(
    r'setHttpProxy',
    r'(Landroid/net/ProxyInfo;)V',
  );

  static final _setHttpProxy = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void setHttpProxy(android.net.ProxyInfo proxyInfo)`
  void setHttpProxy(
    _$jni.JObject proxyInfo,
  ) {
    _setHttpProxy(reference.pointer, _id_setHttpProxy as _$jni.JMethodIDPtr,
            proxyInfo.reference.pointer)
        .check();
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $WifiConfiguration$Type extends _$jni.JObjType<WifiConfiguration> {
  @_$jni.internal
  const $WifiConfiguration$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiConfiguration;';

  @_$jni.internal
  @_$core.override
  WifiConfiguration fromReference(_$jni.JReference reference) =>
      WifiConfiguration.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiConfiguration$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiConfiguration$Type) &&
        other is $WifiConfiguration$Type;
  }
}
