// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import 'ScanResult.dart' as scanresult_;

/// from: `android.net.wifi.WifiInfo$Builder`
class WifiInfo_Builder extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiInfo_Builder> $type;

  @_$jni.internal
  WifiInfo_Builder.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/WifiInfo$Builder');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiInfo_Builder$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory WifiInfo_Builder() {
    return WifiInfo_Builder.fromReference(
        _new$(_class.reference.pointer, _id_new$ as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_setSsid = _class.instanceMethodId(
    r'setSsid',
    r'([B)Landroid/net/wifi/WifiInfo$Builder;',
  );

  static final _setSsid = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiInfo$Builder setSsid(byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo_Builder setSsid(
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    return _setSsid(reference.pointer, _id_setSsid as _$jni.JMethodIDPtr,
            bs.reference.pointer)
        .object(const $WifiInfo_Builder$Type());
  }

  static final _id_setBssid = _class.instanceMethodId(
    r'setBssid',
    r'(Ljava/lang/String;)Landroid/net/wifi/WifiInfo$Builder;',
  );

  static final _setBssid = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public android.net.wifi.WifiInfo$Builder setBssid(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo_Builder setBssid(
    _$jni.JString string,
  ) {
    return _setBssid(reference.pointer, _id_setBssid as _$jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $WifiInfo_Builder$Type());
  }

  static final _id_setRssi = _class.instanceMethodId(
    r'setRssi',
    r'(I)Landroid/net/wifi/WifiInfo$Builder;',
  );

  static final _setRssi = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public android.net.wifi.WifiInfo$Builder setRssi(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo_Builder setRssi(
    int i,
  ) {
    return _setRssi(reference.pointer, _id_setRssi as _$jni.JMethodIDPtr, i)
        .object(const $WifiInfo_Builder$Type());
  }

  static final _id_setNetworkId = _class.instanceMethodId(
    r'setNetworkId',
    r'(I)Landroid/net/wifi/WifiInfo$Builder;',
  );

  static final _setNetworkId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public android.net.wifi.WifiInfo$Builder setNetworkId(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo_Builder setNetworkId(
    int i,
  ) {
    return _setNetworkId(
            reference.pointer, _id_setNetworkId as _$jni.JMethodIDPtr, i)
        .object(const $WifiInfo_Builder$Type());
  }

  static final _id_setCurrentSecurityType = _class.instanceMethodId(
    r'setCurrentSecurityType',
    r'(I)Landroid/net/wifi/WifiInfo$Builder;',
  );

  static final _setCurrentSecurityType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int32,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public android.net.wifi.WifiInfo$Builder setCurrentSecurityType(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo_Builder setCurrentSecurityType(
    int i,
  ) {
    return _setCurrentSecurityType(reference.pointer,
            _id_setCurrentSecurityType as _$jni.JMethodIDPtr, i)
        .object(const $WifiInfo_Builder$Type());
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/net/wifi/WifiInfo;',
  );

  static final _build = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.WifiInfo build()`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo build() {
    return _build(reference.pointer, _id_build as _$jni.JMethodIDPtr)
        .object(const $WifiInfo$Type());
  }
}

final class $WifiInfo_Builder$Type extends _$jni.JObjType<WifiInfo_Builder> {
  @_$jni.internal
  const $WifiInfo_Builder$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiInfo$Builder;';

  @_$jni.internal
  @_$core.override
  WifiInfo_Builder fromReference(_$jni.JReference reference) =>
      WifiInfo_Builder.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiInfo_Builder$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiInfo_Builder$Type) &&
        other is $WifiInfo_Builder$Type;
  }
}

/// from: `android.net.wifi.WifiInfo`
class WifiInfo extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<WifiInfo> $type;

  @_$jni.internal
  WifiInfo.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/net/wifi/WifiInfo');

  /// The type which includes information such as the signature of this class.
  static const type = $WifiInfo$Type();
  static final _id_FREQUENCY_UNITS = _class.staticFieldId(
    r'FREQUENCY_UNITS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String FREQUENCY_UNITS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get FREQUENCY_UNITS =>
      _id_FREQUENCY_UNITS.get(_class, const _$jni.JStringType());

  static final _id_LINK_SPEED_UNITS = _class.staticFieldId(
    r'LINK_SPEED_UNITS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LINK_SPEED_UNITS`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JString get LINK_SPEED_UNITS =>
      _id_LINK_SPEED_UNITS.get(_class, const _$jni.JStringType());

  /// from: `static public final int LINK_SPEED_UNKNOWN`
  static const LINK_SPEED_UNKNOWN = -1;

  /// from: `static public final int SECURITY_TYPE_DPP`
  static const SECURITY_TYPE_DPP = 13;

  /// from: `static public final int SECURITY_TYPE_EAP`
  static const SECURITY_TYPE_EAP = 3;

  /// from: `static public final int SECURITY_TYPE_EAP_WPA3_ENTERPRISE`
  static const SECURITY_TYPE_EAP_WPA3_ENTERPRISE = 9;

  /// from: `static public final int SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT`
  static const SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT = 5;

  /// from: `static public final int SECURITY_TYPE_OPEN`
  static const SECURITY_TYPE_OPEN = 0;

  /// from: `static public final int SECURITY_TYPE_OSEN`
  static const SECURITY_TYPE_OSEN = 10;

  /// from: `static public final int SECURITY_TYPE_OWE`
  static const SECURITY_TYPE_OWE = 6;

  /// from: `static public final int SECURITY_TYPE_PASSPOINT_R1_R2`
  static const SECURITY_TYPE_PASSPOINT_R1_R2 = 11;

  /// from: `static public final int SECURITY_TYPE_PASSPOINT_R3`
  static const SECURITY_TYPE_PASSPOINT_R3 = 12;

  /// from: `static public final int SECURITY_TYPE_PSK`
  static const SECURITY_TYPE_PSK = 2;

  /// from: `static public final int SECURITY_TYPE_SAE`
  static const SECURITY_TYPE_SAE = 4;

  /// from: `static public final int SECURITY_TYPE_UNKNOWN`
  static const SECURITY_TYPE_UNKNOWN = -1;

  /// from: `static public final int SECURITY_TYPE_WAPI_CERT`
  static const SECURITY_TYPE_WAPI_CERT = 8;

  /// from: `static public final int SECURITY_TYPE_WAPI_PSK`
  static const SECURITY_TYPE_WAPI_PSK = 7;

  /// from: `static public final int SECURITY_TYPE_WEP`
  static const SECURITY_TYPE_WEP = 1;
  static final _id_getSSID = _class.instanceMethodId(
    r'getSSID',
    r'()Ljava/lang/String;',
  );

  static final _getSSID = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getSSID()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getSSID() {
    return _getSSID(reference.pointer, _id_getSSID as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getBSSID = _class.instanceMethodId(
    r'getBSSID',
    r'()Ljava/lang/String;',
  );

  static final _getBSSID = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getBSSID()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getBSSID() {
    return _getBSSID(reference.pointer, _id_getBSSID as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getApMldMacAddress = _class.instanceMethodId(
    r'getApMldMacAddress',
    r'()Landroid/net/MacAddress;',
  );

  static final _getApMldMacAddress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.MacAddress getApMldMacAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApMldMacAddress() {
    return _getApMldMacAddress(
            reference.pointer, _id_getApMldMacAddress as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApMloLinkId = _class.instanceMethodId(
    r'getApMloLinkId',
    r'()I',
  );

  static final _getApMloLinkId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getApMloLinkId()`
  int getApMloLinkId() {
    return _getApMloLinkId(
            reference.pointer, _id_getApMloLinkId as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAffiliatedMloLinks = _class.instanceMethodId(
    r'getAffiliatedMloLinks',
    r'()Ljava/util/List;',
  );

  static final _getAffiliatedMloLinks = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getAffiliatedMloLinks()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAffiliatedMloLinks() {
    return _getAffiliatedMloLinks(
            reference.pointer, _id_getAffiliatedMloLinks as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getAssociatedMloLinks = _class.instanceMethodId(
    r'getAssociatedMloLinks',
    r'()Ljava/util/List;',
  );

  static final _getAssociatedMloLinks = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getAssociatedMloLinks()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAssociatedMloLinks() {
    return _getAssociatedMloLinks(
            reference.pointer, _id_getAssociatedMloLinks as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getRssi = _class.instanceMethodId(
    r'getRssi',
    r'()I',
  );

  static final _getRssi = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getRssi()`
  int getRssi() {
    return _getRssi(reference.pointer, _id_getRssi as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWifiStandard = _class.instanceMethodId(
    r'getWifiStandard',
    r'()I',
  );

  static final _getWifiStandard = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getWifiStandard()`
  int getWifiStandard() {
    return _getWifiStandard(
            reference.pointer, _id_getWifiStandard as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLinkSpeed = _class.instanceMethodId(
    r'getLinkSpeed',
    r'()I',
  );

  static final _getLinkSpeed = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getLinkSpeed()`
  int getLinkSpeed() {
    return _getLinkSpeed(
            reference.pointer, _id_getLinkSpeed as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTxLinkSpeedMbps = _class.instanceMethodId(
    r'getTxLinkSpeedMbps',
    r'()I',
  );

  static final _getTxLinkSpeedMbps = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getTxLinkSpeedMbps()`
  int getTxLinkSpeedMbps() {
    return _getTxLinkSpeedMbps(
            reference.pointer, _id_getTxLinkSpeedMbps as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxSupportedTxLinkSpeedMbps = _class.instanceMethodId(
    r'getMaxSupportedTxLinkSpeedMbps',
    r'()I',
  );

  static final _getMaxSupportedTxLinkSpeedMbps =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getMaxSupportedTxLinkSpeedMbps()`
  int getMaxSupportedTxLinkSpeedMbps() {
    return _getMaxSupportedTxLinkSpeedMbps(reference.pointer,
            _id_getMaxSupportedTxLinkSpeedMbps as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getRxLinkSpeedMbps = _class.instanceMethodId(
    r'getRxLinkSpeedMbps',
    r'()I',
  );

  static final _getRxLinkSpeedMbps = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getRxLinkSpeedMbps()`
  int getRxLinkSpeedMbps() {
    return _getRxLinkSpeedMbps(
            reference.pointer, _id_getRxLinkSpeedMbps as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMaxSupportedRxLinkSpeedMbps = _class.instanceMethodId(
    r'getMaxSupportedRxLinkSpeedMbps',
    r'()I',
  );

  static final _getMaxSupportedRxLinkSpeedMbps =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public int getMaxSupportedRxLinkSpeedMbps()`
  int getMaxSupportedRxLinkSpeedMbps() {
    return _getMaxSupportedRxLinkSpeedMbps(reference.pointer,
            _id_getMaxSupportedRxLinkSpeedMbps as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getFrequency = _class.instanceMethodId(
    r'getFrequency',
    r'()I',
  );

  static final _getFrequency = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getFrequency()`
  int getFrequency() {
    return _getFrequency(
            reference.pointer, _id_getFrequency as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getMacAddress = _class.instanceMethodId(
    r'getMacAddress',
    r'()Ljava/lang/String;',
  );

  static final _getMacAddress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getMacAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getMacAddress() {
    return _getMacAddress(
            reference.pointer, _id_getMacAddress as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r'isRestricted',
    r'()Z',
  );

  static final _isRestricted = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isRestricted()`
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPasspointFqdn = _class.instanceMethodId(
    r'getPasspointFqdn',
    r'()Ljava/lang/String;',
  );

  static final _getPasspointFqdn = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String getPasspointFqdn()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getPasspointFqdn() {
    return _getPasspointFqdn(
            reference.pointer, _id_getPasspointFqdn as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getPasspointProviderFriendlyName = _class.instanceMethodId(
    r'getPasspointProviderFriendlyName',
    r'()Ljava/lang/String;',
  );

  static final _getPasspointProviderFriendlyName =
      _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                    _$jni.Pointer<_$jni.Void>,
                    _$jni.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>();

  /// from: `public java.lang.String getPasspointProviderFriendlyName()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString getPasspointProviderFriendlyName() {
    return _getPasspointProviderFriendlyName(reference.pointer,
            _id_getPasspointProviderFriendlyName as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_getSubscriptionId = _class.instanceMethodId(
    r'getSubscriptionId',
    r'()I',
  );

  static final _getSubscriptionId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getSubscriptionId()`
  int getSubscriptionId() {
    return _getSubscriptionId(
            reference.pointer, _id_getSubscriptionId as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getNetworkId = _class.instanceMethodId(
    r'getNetworkId',
    r'()I',
  );

  static final _getNetworkId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getNetworkId()`
  int getNetworkId() {
    return _getNetworkId(
            reference.pointer, _id_getNetworkId as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getSupplicantState = _class.instanceMethodId(
    r'getSupplicantState',
    r'()Landroid/net/wifi/SupplicantState;',
  );

  static final _getSupplicantState = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.SupplicantState getSupplicantState()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getSupplicantState() {
    return _getSupplicantState(
            reference.pointer, _id_getSupplicantState as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getIpAddress = _class.instanceMethodId(
    r'getIpAddress',
    r'()I',
  );

  static final _getIpAddress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getIpAddress()`
  int getIpAddress() {
    return _getIpAddress(
            reference.pointer, _id_getIpAddress as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getHiddenSSID = _class.instanceMethodId(
    r'getHiddenSSID',
    r'()Z',
  );

  static final _getHiddenSSID = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean getHiddenSSID()`
  bool getHiddenSSID() {
    return _getHiddenSSID(
            reference.pointer, _id_getHiddenSSID as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getDetailedStateOf = _class.staticMethodId(
    r'getDetailedStateOf',
    r'(Landroid/net/wifi/SupplicantState;)Landroid/net/NetworkInfo$DetailedState;',
  );

  static final _getDetailedStateOf = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `static public android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState supplicantState)`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject getDetailedStateOf(
    _$jni.JObject supplicantState,
  ) {
    return _getDetailedStateOf(
            _class.reference.pointer,
            _id_getDetailedStateOf as _$jni.JMethodIDPtr,
            supplicantState.reference.pointer)
        .object(const _$jni.JObjectType());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_getInformationElements = _class.instanceMethodId(
    r'getInformationElements',
    r'()Ljava/util/List;',
  );

  static final _getInformationElements = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getInformationElements()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<scanresult_.ScanResult_InformationElement>
      getInformationElements() {
    return _getInformationElements(
            reference.pointer, _id_getInformationElements as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(
            scanresult_.$ScanResult_InformationElement$Type()));
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_makeCopy = _class.instanceMethodId(
    r'makeCopy',
    r'(J)Landroid/net/wifi/WifiInfo;',
  );

  static final _makeCopy = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<(_$jni.Int64,)>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
              _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `public android.net.wifi.WifiInfo makeCopy(long j)`
  /// The returned object must be released after use, by calling the [release] method.
  WifiInfo makeCopy(
    int j,
  ) {
    return _makeCopy(reference.pointer, _id_makeCopy as _$jni.JMethodIDPtr, j)
        .object(const $WifiInfo$Type());
  }

  static final _id_getApplicableRedactions = _class.instanceMethodId(
    r'getApplicableRedactions',
    r'()J',
  );

  static final _getApplicableRedactions = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public long getApplicableRedactions()`
  int getApplicableRedactions() {
    return _getApplicableRedactions(reference.pointer,
            _id_getApplicableRedactions as _$jni.JMethodIDPtr)
        .long;
  }

  static final _id_getCurrentSecurityType = _class.instanceMethodId(
    r'getCurrentSecurityType',
    r'()I',
  );

  static final _getCurrentSecurityType = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getCurrentSecurityType()`
  int getCurrentSecurityType() {
    return _getCurrentSecurityType(
            reference.pointer, _id_getCurrentSecurityType as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $WifiInfo$Type extends _$jni.JObjType<WifiInfo> {
  @_$jni.internal
  const $WifiInfo$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/WifiInfo;';

  @_$jni.internal
  @_$core.override
  WifiInfo fromReference(_$jni.JReference reference) =>
      WifiInfo.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($WifiInfo$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($WifiInfo$Type) && other is $WifiInfo$Type;
  }
}
