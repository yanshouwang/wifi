// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as _$core;

import 'package:jni/_internal.dart' as _$jni;
import 'package:jni/jni.dart' as _$jni;

import '../../../java/lang/CharSequence.dart' as charsequence_;

/// from: `android.net.wifi.ScanResult$InformationElement`
class ScanResult_InformationElement extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ScanResult_InformationElement> $type;

  @_$jni.internal
  ScanResult_InformationElement.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      _$jni.JClass.forName(r'android/net/wifi/ScanResult$InformationElement');

  /// The type which includes information such as the signature of this class.
  static const type = $ScanResult_InformationElement$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  static final _id_new$ = _class.constructorId(
    r'(II[B)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>,
                  _$jni.JMethodIDPtr,
                  _$jni.VarArgs<
                      (
                        _$jni.Int32,
                        _$jni.Int32,
                        _$jni.Pointer<_$jni.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, int, int, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(int i, int i1, byte[] bs)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult_InformationElement(
    int i,
    int i1,
    _$jni.JArray<_$jni.jbyte> bs,
  ) {
    return ScanResult_InformationElement.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr,
            i,
            i1,
            bs.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Landroid/net/wifi/ScanResult$InformationElement;)V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.net.wifi.ScanResult$InformationElement informationElement)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult_InformationElement.new$1(
    ScanResult_InformationElement informationElement,
  ) {
    return ScanResult_InformationElement.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as _$jni.JMethodIDPtr,
            informationElement.reference.pointer)
        .reference);
  }

  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()I',
  );

  static final _getId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getId()`
  int getId() {
    return _getId(reference.pointer, _id_getId as _$jni.JMethodIDPtr).integer;
  }

  static final _id_getIdExt = _class.instanceMethodId(
    r'getIdExt',
    r'()I',
  );

  static final _getIdExt = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getIdExt()`
  int getIdExt() {
    return _getIdExt(reference.pointer, _id_getIdExt as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getBytes = _class.instanceMethodId(
    r'getBytes',
    r'()Ljava/nio/ByteBuffer;',
  );

  static final _getBytes = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.nio.ByteBuffer getBytes()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JByteBuffer getBytes() {
    return _getBytes(reference.pointer, _id_getBytes as _$jni.JMethodIDPtr)
        .object(const _$jni.JByteBufferType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    _$jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as _$jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as _$jni.JMethodIDPtr)
        .integer;
  }
}

final class $ScanResult_InformationElement$Type
    extends _$jni.JObjType<ScanResult_InformationElement> {
  @_$jni.internal
  const $ScanResult_InformationElement$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/ScanResult$InformationElement;';

  @_$jni.internal
  @_$core.override
  ScanResult_InformationElement fromReference(_$jni.JReference reference) =>
      ScanResult_InformationElement.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ScanResult_InformationElement$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanResult_InformationElement$Type) &&
        other is $ScanResult_InformationElement$Type;
  }
}

/// from: `android.net.wifi.ScanResult`
class ScanResult extends _$jni.JObject {
  @_$jni.internal
  @_$core.override
  final _$jni.JObjType<ScanResult> $type;

  @_$jni.internal
  ScanResult.fromReference(
    _$jni.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = _$jni.JClass.forName(r'android/net/wifi/ScanResult');

  /// The type which includes information such as the signature of this class.
  static const type = $ScanResult$Type();
  static final _id_BSSID = _class.instanceFieldId(
    r'BSSID',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String BSSID`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get BSSID => _id_BSSID.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String BSSID`
  /// The returned object must be released after use, by calling the [release] method.
  set BSSID(_$jni.JString value) =>
      _id_BSSID.set(this, const _$jni.JStringType(), value);

  /// from: `static public final int CHANNEL_WIDTH_160MHZ`
  static const CHANNEL_WIDTH_160MHZ = 3;

  /// from: `static public final int CHANNEL_WIDTH_20MHZ`
  static const CHANNEL_WIDTH_20MHZ = 0;

  /// from: `static public final int CHANNEL_WIDTH_320MHZ`
  static const CHANNEL_WIDTH_320MHZ = 5;

  /// from: `static public final int CHANNEL_WIDTH_40MHZ`
  static const CHANNEL_WIDTH_40MHZ = 1;

  /// from: `static public final int CHANNEL_WIDTH_80MHZ`
  static const CHANNEL_WIDTH_80MHZ = 2;

  /// from: `static public final int CHANNEL_WIDTH_80MHZ_PLUS_MHZ`
  static const CHANNEL_WIDTH_80MHZ_PLUS_MHZ = 4;
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static _$jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const _$jni.JObjectType());

  /// from: `static public final int PREAMBLE_EHT`
  static const PREAMBLE_EHT = 4;

  /// from: `static public final int PREAMBLE_HE`
  static const PREAMBLE_HE = 3;

  /// from: `static public final int PREAMBLE_HT`
  static const PREAMBLE_HT = 1;

  /// from: `static public final int PREAMBLE_LEGACY`
  static const PREAMBLE_LEGACY = 0;

  /// from: `static public final int PREAMBLE_VHT`
  static const PREAMBLE_VHT = 2;
  static final _id_SSID = _class.instanceFieldId(
    r'SSID',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String SSID`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get SSID => _id_SSID.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String SSID`
  /// The returned object must be released after use, by calling the [release] method.
  set SSID(_$jni.JString value) =>
      _id_SSID.set(this, const _$jni.JStringType(), value);

  /// from: `static public final int UNSPECIFIED`
  static const UNSPECIFIED = -1;

  /// from: `static public final int WIFI_BAND_24_GHZ`
  static const WIFI_BAND_24_GHZ = 1;

  /// from: `static public final int WIFI_BAND_5_GHZ`
  static const WIFI_BAND_5_GHZ = 2;

  /// from: `static public final int WIFI_BAND_60_GHZ`
  static const WIFI_BAND_60_GHZ = 16;

  /// from: `static public final int WIFI_BAND_6_GHZ`
  static const WIFI_BAND_6_GHZ = 8;

  /// from: `static public final int WIFI_STANDARD_11AC`
  static const WIFI_STANDARD_11AC = 5;

  /// from: `static public final int WIFI_STANDARD_11AD`
  static const WIFI_STANDARD_11AD = 7;

  /// from: `static public final int WIFI_STANDARD_11AX`
  static const WIFI_STANDARD_11AX = 6;

  /// from: `static public final int WIFI_STANDARD_11BE`
  static const WIFI_STANDARD_11BE = 8;

  /// from: `static public final int WIFI_STANDARD_11N`
  static const WIFI_STANDARD_11N = 4;

  /// from: `static public final int WIFI_STANDARD_LEGACY`
  static const WIFI_STANDARD_LEGACY = 1;

  /// from: `static public final int WIFI_STANDARD_UNKNOWN`
  static const WIFI_STANDARD_UNKNOWN = 0;
  static final _id_capabilities = _class.instanceFieldId(
    r'capabilities',
    r'Ljava/lang/String;',
  );

  /// from: `public java.lang.String capabilities`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString get capabilities =>
      _id_capabilities.get(this, const _$jni.JStringType());

  /// from: `public java.lang.String capabilities`
  /// The returned object must be released after use, by calling the [release] method.
  set capabilities(_$jni.JString value) =>
      _id_capabilities.set(this, const _$jni.JStringType(), value);

  static final _id_centerFreq0 = _class.instanceFieldId(
    r'centerFreq0',
    r'I',
  );

  /// from: `public int centerFreq0`
  int get centerFreq0 => _id_centerFreq0.get(this, const _$jni.jintType());

  /// from: `public int centerFreq0`
  set centerFreq0(int value) =>
      _id_centerFreq0.set(this, const _$jni.jintType(), value);

  static final _id_centerFreq1 = _class.instanceFieldId(
    r'centerFreq1',
    r'I',
  );

  /// from: `public int centerFreq1`
  int get centerFreq1 => _id_centerFreq1.get(this, const _$jni.jintType());

  /// from: `public int centerFreq1`
  set centerFreq1(int value) =>
      _id_centerFreq1.set(this, const _$jni.jintType(), value);

  static final _id_channelWidth = _class.instanceFieldId(
    r'channelWidth',
    r'I',
  );

  /// from: `public int channelWidth`
  int get channelWidth => _id_channelWidth.get(this, const _$jni.jintType());

  /// from: `public int channelWidth`
  set channelWidth(int value) =>
      _id_channelWidth.set(this, const _$jni.jintType(), value);

  static final _id_frequency = _class.instanceFieldId(
    r'frequency',
    r'I',
  );

  /// from: `public int frequency`
  int get frequency => _id_frequency.get(this, const _$jni.jintType());

  /// from: `public int frequency`
  set frequency(int value) =>
      _id_frequency.set(this, const _$jni.jintType(), value);

  static final _id_level = _class.instanceFieldId(
    r'level',
    r'I',
  );

  /// from: `public int level`
  int get level => _id_level.get(this, const _$jni.jintType());

  /// from: `public int level`
  set level(int value) => _id_level.set(this, const _$jni.jintType(), value);

  static final _id_operatorFriendlyName = _class.instanceFieldId(
    r'operatorFriendlyName',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public java.lang.CharSequence operatorFriendlyName`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence get operatorFriendlyName =>
      _id_operatorFriendlyName.get(
          this, const charsequence_.$CharSequence$Type());

  /// from: `public java.lang.CharSequence operatorFriendlyName`
  /// The returned object must be released after use, by calling the [release] method.
  set operatorFriendlyName(charsequence_.CharSequence value) =>
      _id_operatorFriendlyName.set(
          this, const charsequence_.$CharSequence$Type(), value);

  static final _id_timestamp = _class.instanceFieldId(
    r'timestamp',
    r'J',
  );

  /// from: `public long timestamp`
  int get timestamp => _id_timestamp.get(this, const _$jni.jlongType());

  /// from: `public long timestamp`
  set timestamp(int value) =>
      _id_timestamp.set(this, const _$jni.jlongType(), value);

  static final _id_venueName = _class.instanceFieldId(
    r'venueName',
    r'Ljava/lang/CharSequence;',
  );

  /// from: `public java.lang.CharSequence venueName`
  /// The returned object must be released after use, by calling the [release] method.
  charsequence_.CharSequence get venueName =>
      _id_venueName.get(this, const charsequence_.$CharSequence$Type());

  /// from: `public java.lang.CharSequence venueName`
  /// The returned object must be released after use, by calling the [release] method.
  set venueName(charsequence_.CharSequence value) =>
      _id_venueName.set(this, const charsequence_.$CharSequence$Type(), value);

  static final _id_new$ = _class.constructorId(
    r'(Landroid/net/wifi/ScanResult;)V',
  );

  static final _new$ = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JniResult Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni.VarArgs<(_$jni.Pointer<_$jni.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>)>();

  /// from: `public void <init>(android.net.wifi.ScanResult scanResult)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult(
    ScanResult scanResult,
  ) {
    return ScanResult.fromReference(_new$(_class.reference.pointer,
            _id_new$ as _$jni.JMethodIDPtr, scanResult.reference.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'()V',
  );

  static final _new$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory ScanResult.new$1() {
    return ScanResult.fromReference(
        _new$1(_class.reference.pointer, _id_new$1 as _$jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getWifiSsid = _class.instanceMethodId(
    r'getWifiSsid',
    r'()Landroid/net/wifi/WifiSsid;',
  );

  static final _getWifiSsid = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.wifi.WifiSsid getWifiSsid()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getWifiSsid() {
    return _getWifiSsid(
            reference.pointer, _id_getWifiSsid as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApMldMacAddress = _class.instanceMethodId(
    r'getApMldMacAddress',
    r'()Landroid/net/MacAddress;',
  );

  static final _getApMldMacAddress = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public android.net.MacAddress getApMldMacAddress()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JObject getApMldMacAddress() {
    return _getApMldMacAddress(
            reference.pointer, _id_getApMldMacAddress as _$jni.JMethodIDPtr)
        .object(const _$jni.JObjectType());
  }

  static final _id_getApMloLinkId = _class.instanceMethodId(
    r'getApMloLinkId',
    r'()I',
  );

  static final _getApMloLinkId = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getApMloLinkId()`
  int getApMloLinkId() {
    return _getApMloLinkId(
            reference.pointer, _id_getApMloLinkId as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getAffiliatedMloLinks = _class.instanceMethodId(
    r'getAffiliatedMloLinks',
    r'()Ljava/util/List;',
  );

  static final _getAffiliatedMloLinks = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getAffiliatedMloLinks()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<_$jni.JObject> getAffiliatedMloLinks() {
    return _getAffiliatedMloLinks(
            reference.pointer, _id_getAffiliatedMloLinks as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType(_$jni.JObjectType()));
  }

  static final _id_getWifiStandard = _class.instanceMethodId(
    r'getWifiStandard',
    r'()I',
  );

  static final _getWifiStandard = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int getWifiStandard()`
  int getWifiStandard() {
    return _getWifiStandard(
            reference.pointer, _id_getWifiStandard as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_is80211mcResponder = _class.instanceMethodId(
    r'is80211mcResponder',
    r'()Z',
  );

  static final _is80211mcResponder = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean is80211mcResponder()`
  bool is80211mcResponder() {
    return _is80211mcResponder(
            reference.pointer, _id_is80211mcResponder as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isPasspointNetwork = _class.instanceMethodId(
    r'isPasspointNetwork',
    r'()Z',
  );

  static final _isPasspointNetwork = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public boolean isPasspointNetwork()`
  bool isPasspointNetwork() {
    return _isPasspointNetwork(
            reference.pointer, _id_isPasspointNetwork as _$jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_convertChannelToFrequencyMhzIfSupported =
      _class.staticMethodId(
    r'convertChannelToFrequencyMhzIfSupported',
    r'(II)I',
  );

  static final _convertChannelToFrequencyMhzIfSupported =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(
                          _$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr,
                          _$jni.VarArgs<(_$jni.Int32, _$jni.Int32)>)>>(
              'globalEnv_CallStaticIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int, int)>();

  /// from: `static public int convertChannelToFrequencyMhzIfSupported(int i, int i1)`
  static int convertChannelToFrequencyMhzIfSupported(
    int i,
    int i1,
  ) {
    return _convertChannelToFrequencyMhzIfSupported(
            _class.reference.pointer,
            _id_convertChannelToFrequencyMhzIfSupported as _$jni.JMethodIDPtr,
            i,
            i1)
        .integer;
  }

  static final _id_convertFrequencyMhzToChannelIfSupported =
      _class.staticMethodId(
    r'convertFrequencyMhzToChannelIfSupported',
    r'(I)I',
  );

  static final _convertFrequencyMhzToChannelIfSupported =
      _$jni.ProtectedJniExtensions.lookup<
                  _$jni.NativeFunction<
                      _$jni.JniResult Function(_$jni.Pointer<_$jni.Void>,
                          _$jni.JMethodIDPtr, _$jni.VarArgs<(_$jni.Int32,)>)>>(
              'globalEnv_CallStaticIntMethod')
          .asFunction<
              _$jni.JniResult Function(
                  _$jni.Pointer<_$jni.Void>, _$jni.JMethodIDPtr, int)>();

  /// from: `static public int convertFrequencyMhzToChannelIfSupported(int i)`
  static int convertFrequencyMhzToChannelIfSupported(
    int i,
  ) {
    return _convertFrequencyMhzToChannelIfSupported(
            _class.reference.pointer,
            _id_convertFrequencyMhzToChannelIfSupported as _$jni.JMethodIDPtr,
            i)
        .integer;
  }

  static final _id_getInformationElements = _class.instanceMethodId(
    r'getInformationElements',
    r'()Ljava/util/List;',
  );

  static final _getInformationElements = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.util.List getInformationElements()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JList<ScanResult_InformationElement> getInformationElements() {
    return _getInformationElements(
            reference.pointer, _id_getInformationElements as _$jni.JMethodIDPtr)
        .object(const _$jni.JListType($ScanResult_InformationElement$Type()));
  }

  static final _id_getSecurityTypes = _class.instanceMethodId(
    r'getSecurityTypes',
    r'()[I',
  );

  static final _getSecurityTypes = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int[] getSecurityTypes()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JArray<_$jni.jint> getSecurityTypes() {
    return _getSecurityTypes(
            reference.pointer, _id_getSecurityTypes as _$jni.JMethodIDPtr)
        .object(const _$jni.JArrayType(_$jni.jintType()));
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  _$jni.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as _$jni.JMethodIDPtr)
        .object(const _$jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents = _$jni.ProtectedJniExtensions.lookup<
          _$jni.NativeFunction<
              _$jni.JniResult Function(
                _$jni.Pointer<_$jni.Void>,
                _$jni.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          _$jni.JniResult Function(
            _$jni.Pointer<_$jni.Void>,
            _$jni.JMethodIDPtr,
          )>();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as _$jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r'writeToParcel',
    r'(Landroid/os/Parcel;I)V',
  );

  static final _writeToParcel = _$jni.ProtectedJniExtensions.lookup<
              _$jni.NativeFunction<
                  _$jni.JThrowablePtr Function(
                      _$jni.Pointer<_$jni.Void>,
                      _$jni.JMethodIDPtr,
                      _$jni
                          .VarArgs<(_$jni.Pointer<_$jni.Void>, _$jni.Int32)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          _$jni.JThrowablePtr Function(_$jni.Pointer<_$jni.Void>,
              _$jni.JMethodIDPtr, _$jni.Pointer<_$jni.Void>, int)>();

  /// from: `public void writeToParcel(android.os.Parcel parcel, int i)`
  void writeToParcel(
    _$jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as _$jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }
}

final class $ScanResult$Type extends _$jni.JObjType<ScanResult> {
  @_$jni.internal
  const $ScanResult$Type();

  @_$jni.internal
  @_$core.override
  String get signature => r'Landroid/net/wifi/ScanResult;';

  @_$jni.internal
  @_$core.override
  ScanResult fromReference(_$jni.JReference reference) =>
      ScanResult.fromReference(reference);

  @_$jni.internal
  @_$core.override
  _$jni.JObjType get superType => const _$jni.JObjectType();

  @_$jni.internal
  @_$core.override
  final superCount = 1;

  @_$core.override
  int get hashCode => ($ScanResult$Type).hashCode;

  @_$core.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ScanResult$Type) && other is $ScanResult$Type;
  }
}
